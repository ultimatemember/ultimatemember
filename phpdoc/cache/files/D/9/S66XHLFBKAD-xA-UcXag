1760490696
ijeqzL8hUX%3A8bddbe460369d95b058efcdba6048a0b-4384dd43cb9dfa2e1d755cde147d2022
s:169168:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjQzODRkZDQzY2I5ZGZhMmUxZDc1NWNkZTE0N2QyMDIyIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MjE6ImNsYXNzLXNpdGUtaGVhbHRoLnBocCI7czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBwYXRoIjtzOjM2OiJpbmNsdWRlcy9hZG1pbi9jbGFzcy1zaXRlLWhlYWx0aC5waHAiO3M6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAc291cmNlIjtzOjk5MDk0OiI8P3BocApuYW1lc3BhY2UgdW1cYWRtaW47CgppZiAoICEgZGVmaW5lZCggJ0FCU1BBVEgnICkgKSB7CglleGl0Owp9CgovKioKICogQ2xhc3MgU2l0ZV9IZWFsdGgKICoKICogQHBhY2thZ2UgdW1cYWRtaW4KICovCmNsYXNzIFNpdGVfSGVhbHRoIHsKCgkvKioKCSAqIFN0cmluZyBvZiBhIGJhZGdlIGNvbG9yLgoJICogT3B0aW9uczogYmx1ZSwgZ3JlZW4sIHJlZCwgb3JhbmdlLCBwdXJwbGUgYW5kIGdyYXkuCgkgKgoJICogQHNlZSBodHRwczovL21ha2Uud29yZHByZXNzLm9yZy9jb3JlLzIwMTkvMDQvMjUvc2l0ZS1oZWFsdGgtY2hlY2staW4tNS0yLwoJICoKCSAqIEBzaW5jZSAyLjguMwoJICovCgljb25zdCBCQURHRV9DT0xPUiA9ICdibHVlJzsKCgkvKioKCSAqIFNpdGVfSGVhbHRoIGNvbnN0cnVjdG9yLgoJICovCglwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoKSB7CgkJYWRkX2ZpbHRlciggJ2RlYnVnX2luZm9ybWF0aW9uJywgYXJyYXkoICR0aGlzLCAnZGVidWdfaW5mb3JtYXRpb24nICksIDIwICk7CgkJYWRkX2ZpbHRlciggJ3NpdGVfc3RhdHVzX3Rlc3RzJywgYXJyYXkoICR0aGlzLCAncmVnaXN0ZXJfc2l0ZV9zdGF0dXNfdGVzdHMnICkgKTsKCX0KCglwdWJsaWMgZnVuY3Rpb24gcmVnaXN0ZXJfc2l0ZV9zdGF0dXNfdGVzdHMoICR0ZXN0cyApIHsKCQkkY3VzdG9tX3RlbXBsYXRlcyA9IFVNKCktPmNvbW1vbigpLT50aGVtZSgpLT5nZXRfY3VzdG9tX3RlbXBsYXRlc19saXN0KCk7CgoJCWlmICggISBlbXB0eSggJGN1c3RvbV90ZW1wbGF0ZXMgKSApIHsKCQkJJHRlc3RzWydkaXJlY3QnXVsndW1fb3ZlcnJpZGVfdGVtcGxhdGVzJ10gPSBhcnJheSgKCQkJCSdsYWJlbCcgPT4gZXNjX2h0bWxfXyggJ0FyZSB0aGUgVWx0aW1hdGUgTWVtYmVyIHRlbXBsYXRlcyBvdXQgb2YgZGF0ZT8nLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJJ3Rlc3QnICA9PiBhcnJheSggJHRoaXMsICdvdmVycmlkZV90ZW1wbGF0ZXNfdGVzdCcgKSwKCQkJKTsKCQl9CgoJCSRmaXJzdF9hY3RpdmF0aW9uX2RhdGUgPSBnZXRfb3B0aW9uKCAndW1fZmlyc3RfYWN0aXZhdGlvbl9kYXRlJywgZmFsc2UgKTsKCQlpZiAoICEgZW1wdHkoICRmaXJzdF9hY3RpdmF0aW9uX2RhdGUgKSAmJiAkZmlyc3RfYWN0aXZhdGlvbl9kYXRlIDwgMTcxNjMzNjAwMCApIHsKCQkJJHRlc3RzWydkaXJlY3QnXVsndW1fb3V0ZGF0ZWRfaWNvbnMnXSA9IGFycmF5KAoJCQkJJ2xhYmVsJyA9PiBlc2NfaHRtbF9fKCAnQXJlIHRoZSBpY29ucyBpbiBVbHRpbWF0ZSBNZW1iZXIgRm9ybXMgYW5kIFNldHRpbmdzIG91dCBvZiBkYXRlPycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkndGVzdCcgID0+IGFycmF5KCAkdGhpcywgJ291dGRhdGVkX2ljb25zX3Rlc3QnICksCgkJCSk7CgkJfQoKCQlyZXR1cm4gJHRlc3RzOwoJfQoKCXB1YmxpYyBmdW5jdGlvbiBvdmVycmlkZV90ZW1wbGF0ZXNfdGVzdCgpIHsKCQkkcmVzdWx0ID0gYXJyYXkoCgkJCSdsYWJlbCcgICAgICAgPT4gX18oICdZb3UgaGF2ZSB0aGUgbW9zdCByZWNlbnQgdmVyc2lvbiBvZiBjdXN0b20gVWx0aW1hdGUgTWVtYmVyIHRlbXBsYXRlcycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCSdzdGF0dXMnICAgICAgPT4gJ2dvb2QnLAoJCQknYmFkZ2UnICAgICAgID0+IGFycmF5KAoJCQkJJ2xhYmVsJyA9PiBVTV9QTFVHSU5fTkFNRSwKCQkJCSdjb2xvcicgPT4gc2VsZjo6QkFER0VfQ09MT1IsCgkJCSksCgkJCSdkZXNjcmlwdGlvbicgPT4gc3ByaW50ZigKCQkJCSc8cD4lczwvcD4nLAoJCQkJX18oICdZb3VyIGN1c3RvbSBVbHRpbWF0ZSBNZW1iZXIgdGVtcGxhdGVzIHRoYXQgYXJlIHNpdHVhdGVkIGluIHRoZSB0aGVtZSBoYXZlIHRoZSBtb3N0IHJlY2VudCB2ZXJzaW9uIGFuZCBhcmUgcmVhZHkgdG8gdXNlLicsICd1bHRpbWF0ZS1tZW1iZXInICkKCQkJKSwKCQkJJ2FjdGlvbnMnICAgICA9PiAnJywKCQkJJ3Rlc3QnICAgICAgICA9PiAndW1fb3ZlcnJpZGVfdGVtcGxhdGVzJywKCQkpOwoKCQlpZiAoIFVNKCktPmNvbW1vbigpLT50aGVtZSgpLT5pc19vdXRkYXRlZF90ZW1wbGF0ZV9leGlzdCgpICkgewoJCQkkcmVzdWx0WydsYWJlbCddICAgICAgICAgID0gX18oICdZb3VyIGN1c3RvbSB0ZW1wbGF0ZXMgYXJlIG91dCBvZiBkYXRlJywgJ3VsdGltYXRlLW1lbWJlcicgKTsKCQkJJHJlc3VsdFsnc3RhdHVzJ10gICAgICAgICA9ICdjcml0aWNhbCc7CgkJCSRyZXN1bHRbJ2JhZGdlJ11bJ2NvbG9yJ10gPSAncmVkJzsKCQkJJHJlc3VsdFsnZGVzY3JpcHRpb24nXSAgICA9IHNwcmludGYoCgkJCQknPHA+JXM8L3A+JywKCQkJCV9fKCAnWW91ciBjdXN0b20gVWx0aW1hdGUgTWVtYmVyIHRlbXBsYXRlcyB0aGF0IGFyZSBzaXR1YXRlZCBpbiB0aGUgdGhlbWUgYXJlIG91dCBvZiBkYXRlIGFuZCBtYXkgYnJlYWsgdGhlIHdlYnNpdGVcJ3MgZnVuY3Rpb25hbGl0eS4nLCAndWx0aW1hdGUtbWVtYmVyJyApCgkJCSk7CgkJCSRyZXN1bHRbJ2FjdGlvbnMnXSAgICAgICAgPSBzcHJpbnRmKAoJCQkJJzxwPjxhIGhyZWY9IiVzIj4lczwvYT48L3A+JywKCQkJCWFkbWluX3VybCggJ2FkbWluLnBocD9wYWdlPXVtX29wdGlvbnMmdGFiPWFkdmFuY2VkJnNlY3Rpb249b3ZlcnJpZGVfdGVtcGxhdGVzJyApLAoJCQkJZXNjX2h0bWxfXyggJ0NoZWNrIHN0YXR1cyBhbmQgdXBkYXRlJywgJ3VsdGltYXRlLW1lbWJlcicgKQoJCQkpOwoJCX0KCgkJcmV0dXJuICRyZXN1bHQ7Cgl9CgoJLyoqCgkgKiBAcmV0dXJuIGJvb2x8YXJyYXkKCSAqLwoJcHJpdmF0ZSBmdW5jdGlvbiBnZXRfb3V0ZGF0ZWRfaWNvbnMoKSB7CgkJJHJlc3VsdCA9IGFycmF5KAoJCQknZGVzY3JpcHRpb24nID0+ICcnLAoJCQknYWN0aW9ucycgICAgID0+ICcnLAoJCSk7CgoJCSRvbGRfaWNvbnMgPSBVTSgpLT5mb250aWNvbnMoKS0+YWxsOwoKCQkkZm9ybXMgPSBnZXRfcG9zdHMoCgkJCWFycmF5KAoJCQkJJ3Bvc3RfdHlwZScgICAgICA9PiAndW1fZm9ybScsCgkJCQkncG9zdHNfcGVyX3BhZ2UnID0+IC0xLAoJCQkJJ2ZpZWxkcycgICAgICAgICA9PiAnaWRzJywKCQkJKQoJCSk7CgoJCSRmb3Jtc19jb3VudCA9IDA7CgkJJGJyZWFrX2Zvcm1zID0gYXJyYXkoKTsKCQlpZiAoICEgZW1wdHkoICRmb3JtcyApICkgewoJCQlmb3JlYWNoICggJGZvcm1zIGFzICRmb3JtX2lkICkgewoJCQkJJGZpZWxkcyA9IFVNKCktPnF1ZXJ5KCktPmdldF9hdHRyKCAnY3VzdG9tX2ZpZWxkcycsICRmb3JtX2lkICk7CgkJCQlpZiAoIGVtcHR5KCAkZmllbGRzICkgKSB7CgkJCQkJY29udGludWU7CgkJCQl9CgkJCQlmb3JlYWNoICggJGZpZWxkcyBhcyAkZmllbGQgKSB7CgkJCQkJaWYgKCBlbXB0eSggJGZpZWxkWydpY29uJ10gKSApIHsKCQkJCQkJY29udGludWU7CgkJCQkJfQoKCQkJCQlpZiAoIGluX2FycmF5KCAkZmllbGRbJ2ljb24nXSwgJG9sZF9pY29ucywgdHJ1ZSApICkgewoJCQkJCQkkYnJlYWtfZm9ybXNbXSA9IGFycmF5KAoJCQkJCQkJJ2lkJyAgICA9PiAkZm9ybV9pZCwKCQkJCQkJCSd0aXRsZScgPT4gZ2V0X3RoZV90aXRsZSggJGZvcm1faWQgKSwKCQkJCQkJCSdsaW5rJyAgPT4gZ2V0X2VkaXRfcG9zdF9saW5rKCAkZm9ybV9pZCApLAoJCQkJCQkpOwoJCQkJCQkkZm9ybXNfY291bnQrKzsKCQkJCQkJY29udGludWUgMjsKCQkJCQl9CgkJCQl9CgkJCX0KCQl9CgoJCWlmICggMCA8ICRmb3Jtc19jb3VudCApIHsKCQkJJHJlc3VsdFsnZGVzY3JpcHRpb24nXSAuPSBzcHJpbnRmKAoJCQkJJzxwPiVzPC9wPicsCgkJCQlfXyggJ1lvdXIgZmllbGRzXCcgaWNvbnMgaW4gdGhlIFVsdGltYXRlIE1lbWJlciBGb3JtcyBhcmUgb3V0IG9mIGRhdGUuJywgJ3VsdGltYXRlLW1lbWJlcicgKQoJCQkpOwoKCQkJaWYgKCAhIGVtcHR5KCAkYnJlYWtfZm9ybXMgKSApIHsKCQkJCSRyZXN1bHRbJ2Rlc2NyaXB0aW9uJ10gLj0gc3ByaW50ZigKCQkJCQknPHA+JXMnLAoJCQkJCV9fKCAnUmVsYXRlZCB0byBVbHRpbWF0ZSBNZW1iZXIgRm9ybXM6ICcsICd1bHRpbWF0ZS1tZW1iZXInICkKCQkJCSk7CgoJCQkJJGZvcm1fbGlua3MgPSBhcnJheSgpOwoJCQkJZm9yZWFjaCAoICRicmVha19mb3JtcyBhcyAkYnJlYWtfZm9ybSApIHsKCQkJCQkkZm9ybV9saW5rc1tdID0gc3ByaW50ZigKCQkJCQkJJzxhIGhyZWY9IiVzIiB0YXJnZXQ9Il9ibGFuayI+JXMgKCNJRDogJXMpPC9hPicsCgkJCQkJCWVzY191cmwoICRicmVha19mb3JtWydsaW5rJ10gKSwKCQkJCQkJZXNjX2h0bWwoICRicmVha19mb3JtWyd0aXRsZSddICksCgkJCQkJCWVzY19odG1sKCAkYnJlYWtfZm9ybVsnaWQnXSApCgkJCQkJKTsKCQkJCX0KCgkJCQkkcmVzdWx0WydkZXNjcmlwdGlvbiddIC49IHNwcmludGYoCgkJCQkJJyVzPC9wPjxociAvPicsCgkJCQkJaW1wbG9kZSggJywgJywgJGZvcm1fbGlua3MgKQoJCQkJKTsKCQkJfQoKCQkJJHJlc3VsdFsnYWN0aW9ucyddIC49IHNwcmludGYoCgkJCQknPHA+PGEgaHJlZj0iJXMiPiVzPC9hPjwvcD4nLAoJCQkJYWRtaW5fdXJsKCAnZWRpdC5waHA/cG9zdF90eXBlPXVtX2Zvcm0nICksCgkJCQllc2NfaHRtbF9fKCAnRWRpdCBmb3JtIGZpZWxkcyBhbmQgdXBkYXRlJywgJ3VsdGltYXRlLW1lbWJlcicgKQoJCQkpOwoJCX0KCgkJJHJlc3VsdCA9IGFwcGx5X2ZpbHRlcnMoICd1bV9nZXRfb3V0ZGF0ZWRfaWNvbnNfcmVzdWx0JywgJHJlc3VsdCwgJG9sZF9pY29ucyApOwoKCQlpZiAoICEgZW1wdHkoICRyZXN1bHRbJ2Rlc2NyaXB0aW9uJ10gKSApIHsKCQkJJHJlc3VsdFsnZGVzY3JpcHRpb24nXSAuPSBzcHJpbnRmKAoJCQkJJzxwPiVzPC9wPicsCgkJCQlfXyggJ0FzIHNvb24gYXMgbGVnYWN5IGljb25zIHdpbGwgYmUgcmVtb3ZlZCBvbGQgaWNvbnMgbWF5IGJyZWFrIHRoZSB3ZWJzaXRlXCdzIGZ1bmN0aW9uYWxpdHkuJywgJ3VsdGltYXRlLW1lbWJlcicgKQoJCQkpOwoJCX0KCgkJaWYgKCAhIGVtcHR5KCAkcmVzdWx0WydkZXNjcmlwdGlvbiddICkgJiYgISBlbXB0eSggJHJlc3VsdFsnYWN0aW9ucyddICkgKSB7CgkJCXJldHVybiAkcmVzdWx0OwoJCX0KCgkJcmV0dXJuIGZhbHNlOwoJfQoKCXB1YmxpYyBmdW5jdGlvbiBvdXRkYXRlZF9pY29uc190ZXN0KCkgewoJCSRyZXN1bHQgPSBhcnJheSgKCQkJJ2xhYmVsJyAgICAgICA9PiBfXyggJ1lvdSBoYXZlIHRoZSBtb3N0IHJlY2VudCB2ZXJzaW9uIG9mIGljb25zIGluIFVsdGltYXRlIE1lbWJlciBmb3JtcyBhbmQgc2V0dGluZ3MnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQknc3RhdHVzJyAgICAgID0+ICdnb29kJywKCQkJJ2JhZGdlJyAgICAgICA9PiBhcnJheSgKCQkJCSdsYWJlbCcgPT4gVU1fUExVR0lOX05BTUUsCgkJCQknY29sb3InID0+IHNlbGY6OkJBREdFX0NPTE9SLAoJCQkpLAoJCQknZGVzY3JpcHRpb24nID0+IHNwcmludGYoCgkJCQknPHA+JXM8L3A+JywKCQkJCV9fKCAnWW91ciBmaWVsZHMgaW4gdGhlIFVsdGltYXRlIE1lbWJlciBGb3JtcyBhbmQgc2V0dGluZ3MgaGF2ZSB0aGUgbW9zdCByZWNlbnQgdmVyc2lvbiBhbmQgYXJlIHJlYWR5IHRvIHVzZS4nLCAndWx0aW1hdGUtbWVtYmVyJyApCgkJCSksCgkJCSdhY3Rpb25zJyAgICAgPT4gJycsCgkJCSd0ZXN0JyAgICAgICAgPT4gJ3VtX291dGRhdGVkX2ljb25zJywKCQkpOwoKCQkkb3V0ZGF0ZWRfaWNvbnMgPSAkdGhpcy0+Z2V0X291dGRhdGVkX2ljb25zKCk7CgoJCWlmICggZmFsc2UgIT09ICRvdXRkYXRlZF9pY29ucyApIHsKCQkJJHJlc3VsdFsnbGFiZWwnXSAgICAgICAgICA9IF9fKCAnU29tZSBmaWVsZCBpY29ucyBhbmQgKG9yKSBVbHRpbWF0ZSBNZW1iZXIgc2V0dGluZ3MgaWNvbnMgYXJlIG91dCBvZiBkYXRlJywgJ3VsdGltYXRlLW1lbWJlcicgKTsKCQkJJHJlc3VsdFsnc3RhdHVzJ10gICAgICAgICA9ICdyZWNvbW1lbmRlZCc7CgkJCSRyZXN1bHRbJ2JhZGdlJ11bJ2NvbG9yJ10gPSAnb3JhbmdlJzsKCQkJJHJlc3VsdFsnZGVzY3JpcHRpb24nXSAgICA9ICRvdXRkYXRlZF9pY29uc1snZGVzY3JpcHRpb24nXTsKCQkJJHJlc3VsdFsnYWN0aW9ucyddICAgICAgICA9ICRvdXRkYXRlZF9pY29uc1snYWN0aW9ucyddOwoJCX0KCgkJcmV0dXJuICRyZXN1bHQ7Cgl9CgoJcHJpdmF0ZSBmdW5jdGlvbiBnZXRfcm9sZXMoKSB7CgkJcmV0dXJuIFVNKCktPnJvbGVzKCktPmdldF9yb2xlcygpOwoJfQoKCXByaXZhdGUgZnVuY3Rpb24gZ2V0X2Zvcm1zKCkgewoJCSRmb3Jtc19kYXRhID0gZ2V0X3Bvc3RzKAoJCQlhcnJheSgKCQkJCSdwb3N0X3R5cGUnICAgICAgPT4gJ3VtX2Zvcm0nLAoJCQkJJ3Bvc3RzX3Blcl9wYWdlJyA9PiAtMSwKCQkJKQoJCSk7CgkJJGZvcm1zICAgICAgPSBhcnJheSgpOwoJCWZvcmVhY2ggKCAkZm9ybXNfZGF0YSBhcyAkZm9ybSApIHsKCQkJJGZvcm1zWyAnSUQjJyAuICRmb3JtLT5JRCBdID0gJGZvcm0tPnBvc3RfdGl0bGU7CgkJfQoJCXJldHVybiAkZm9ybXM7Cgl9CgoJcHJpdmF0ZSBmdW5jdGlvbiBnZXRfcm9sZV9tZXRhKCAka2V5ICkgewoJCXJldHVybiBnZXRfb3B0aW9uKCAidW1fcm9sZV97JGtleX1fbWV0YSIsIGZhbHNlICk7Cgl9CgoJcHVibGljIGZ1bmN0aW9uIGFycmF5X21hcCggJGl0ZW0gKSB7CgkJaWYgKCBpc19hcnJheSggJGl0ZW0gKSApIHsKCQkJJGl0ZW0gPSBtYXliZV9zZXJpYWxpemUoICRpdGVtICk7CgkJfQoJCXJldHVybiAkaXRlbTsKCX0KCglwcml2YXRlIGZ1bmN0aW9uIGdldF9maWVsZF9kYXRhKCAkaW5mbywgJGtleSwgJGZpZWxkX2tleSwgJGZpZWxkICkgewoJCSRyb3cgICAgICAgID0gaXNzZXQoICRmaWVsZFsnbWV0YWtleSddICkgPyBmYWxzZSA6IHRydWU7CgkJJHRpdGxlICAgICAgPSAkcm93ID8gX18oICdSb3c6ICcsICd1bHRpbWF0ZS1tZW1iZXInICkgLiAkZmllbGRbJ2lkJ10gOiBfXyggJ0ZpZWxkOiAnLCAndWx0aW1hdGUtbWVtYmVyJyApIC4gJGZpZWxkWydtZXRha2V5J107CgkJJGZpZWxkICAgICAgPSBhcnJheV9tYXAoIGFycmF5KCAmJHRoaXMsICdhcnJheV9tYXAnICksICRmaWVsZCApOwoJCSRmaWVsZF9pbmZvID0gYXJyYXkoCgkJCSd1bS1maWVsZF8nIC4gJGZpZWxkX2tleSA9PiBhcnJheSgKCQkJCSdsYWJlbCcgPT4gJHRpdGxlLAoJCQkJJ3ZhbHVlJyA9PiAkZmllbGQsCgkJCSksCgkJKTsKCgkJcmV0dXJuICRmaWVsZF9pbmZvOwoJfQoKCXByaXZhdGUgZnVuY3Rpb24gZ2V0X21lbWJlcl9kaXJlY3RvcmllcygpIHsKCQkkcXVlcnkgICAgICAgICAgICAgID0gbmV3IFxXUF9RdWVyeSgpOwoJCSRtZW1iZXJfZGlyZWN0b3JpZXMgPSAkcXVlcnktPnF1ZXJ5KAoJCQlhcnJheSgKCQkJCSdwb3N0X3R5cGUnICAgICAgPT4gJ3VtX2RpcmVjdG9yeScsCgkJCQkncG9zdHNfcGVyX3BhZ2UnID0+IC0xLAoJCQkpCgkJKTsKCgkJJGRpcmVjdG9yaWVzID0gYXJyYXkoKTsKCQlmb3JlYWNoICggJG1lbWJlcl9kaXJlY3RvcmllcyBhcyAkZGlyZWN0b3J5ICkgewoJCQkkZGlyZWN0b3JpZXNbICdJRCMnIC4gJGRpcmVjdG9yeS0+SUQgXSA9ICRkaXJlY3RvcnktPnBvc3RfdGl0bGU7CgkJfQoKCQlyZXR1cm4gJGRpcmVjdG9yaWVzOwoJfQoKCS8qKgoJICogQWRkIG91ciBkYXRhIHRvIFNpdGUgSGVhbHRoIGluZm9ybWF0aW9uLgoJICoKCSAqIEBzaW5jZSAyLjcuMAoJICoKCSAqIEBwYXJhbSBhcnJheSAkaW5mbyBUaGUgU2l0ZSBIZWFsdGggaW5mb3JtYXRpb24uCgkgKgoJICogQHJldHVybiBhcnJheSBUaGUgdXBkYXRlZCBTaXRlIEhlYWx0aCBpbmZvcm1hdGlvbi4KCSAqLwoJcHVibGljIGZ1bmN0aW9uIGRlYnVnX2luZm9ybWF0aW9uKCAkaW5mbyApIHsKCQkkbGFiZWxzID0gYXJyYXkoCgkJCSd5ZXMnICAgICA9PiBfXyggJ1llcycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCSdubycgICAgICA9PiBfXyggJ05vJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJJ2FsbCcgICAgID0+IF9fKCAnQWxsJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJJ2RlZmF1bHQnID0+IF9fKCAnRGVmYXVsdCcsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCSdub3BhZ2VzJyA9PiBfXyggJ05vIHByZWRlZmluZWQgcGFnZScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJKTsKCgkJJGluZm9bJ3VsdGltYXRlLW1lbWJlciddID0gYXJyYXkoCgkJCSdsYWJlbCcgICAgICAgPT4gX18oICdVbHRpbWF0ZSBNZW1iZXInLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQknZGVzY3JpcHRpb24nID0+IF9fKCAnVGhpcyBkZWJ1ZyBpbmZvcm1hdGlvbiBmb3IgeW91ciBVbHRpbWF0ZSBNZW1iZXIgaW5zdGFsbGF0aW9uIGNhbiBhc3Npc3QgeW91IGluIGdldHRpbmcgc3VwcG9ydC4nLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQknZmllbGRzJyAgICAgID0+IGFycmF5KCksCgkJKTsKCgkJLy8gUGFnZXMgc2V0dGluZ3MuCgkJJHBhZ2VzICAgICAgICAgICAgPSBhcnJheSgpOwoJCSRwcmVkZWZpbmVkX3BhZ2VzID0gVU0oKS0+Y29uZmlnKCktPmNvcmVfcGFnZXM7CgkJZm9yZWFjaCAoICRwcmVkZWZpbmVkX3BhZ2VzIGFzICRwYWdlX3MgPT4gJHBhZ2UgKSB7CgkJCSRwYWdlX2lkICAgID0gVU0oKS0+b3B0aW9ucygpLT5nZXRfcHJlZGVmaW5lZF9wYWdlX29wdGlvbl9rZXkoICRwYWdlX3MgKTsKCQkJJHBhZ2VfdGl0bGUgPSAhIGVtcHR5KCAkcGFnZVsndGl0bGUnXSApID8gJHBhZ2VbJ3RpdGxlJ10gOiAnJzsKCQkJaWYgKCBlbXB0eSggJHBhZ2VfdGl0bGUgKSApIHsKCQkJCWNvbnRpbnVlOwoJCQl9CgoJCQkkcHJlZGVmaW5lZF9wYWdlX2lkID0gVU0oKS0+b3B0aW9ucygpLT5nZXQoICRwYWdlX2lkICk7CgoJCQlpZiAoIGVtcHR5KCAkcHJlZGVmaW5lZF9wYWdlX2lkICkgKSB7CgkJCQkkcGFnZXNbICRwYWdlX3RpdGxlIF0gPSAkbGFiZWxzWydub3BhZ2VzJ107CgkJCQljb250aW51ZTsKCQkJfQoJCQkvLyB0cmFuc2xhdG9yczogJTEkcyBpcyBhIHByZWRlZmluZWQgcGFnZSB0aXRsZTsgJTIkZCBpcyBhIHByZWRlZmluZWQgcGFnZSBJRDsgJTMkcyBpcyBhIHByZWRlZmluZWQgcGFnZSBwZXJtYWxpbmsuCgkJCSRwYWdlc1sgJHBhZ2VfdGl0bGUgXSA9IHNwcmludGYoIF9fKCAnJTEkcyAoSUQjJTIkZCkgfCAlMyRzJywgJ3VsdGltYXRlLW1lbWJlcicgKSwgZ2V0X3RoZV90aXRsZSggJHByZWRlZmluZWRfcGFnZV9pZCApLCAkcHJlZGVmaW5lZF9wYWdlX2lkLCBnZXRfcGVybWFsaW5rKCAkcHJlZGVmaW5lZF9wYWdlX2lkICkgKTsKCQl9CgoJCSRwYWdlcyA9IGFwcGx5X2ZpbHRlcnMoICd1bV9kZWJ1Z19pbmZvcm1hdGlvbl9wYWdlcycsICRwYWdlcyApOwoKCQkkcGFnZXNfc2V0dGluZ3MgPSBhcnJheSgKCQkJJ3VtLXBhZ2VzJyA9PiBhcnJheSgKCQkJCSdsYWJlbCcgPT4gX18oICdQYWdlcycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkndmFsdWUnID0+ICRwYWdlcywKCQkJKSwKCQkpOwoKCQkvLyBVc2VyIHNldHRpbmdzCgkJJHBlcm1hbGlua19iYXNlID0gVU0oKS0+Y29uZmlnKCktPnBlcm1hbGlua19iYXNlX29wdGlvbnM7CgkJJGRpc3BsYXlfbmFtZSAgID0gVU0oKS0+Y29uZmlnKCktPmRpc3BsYXlfbmFtZV9vcHRpb25zOwoKCQkkdXNlcl9zZXR0aW5ncyA9IGFycmF5KAoJCQkndW0tcGVybWFsaW5rX2Jhc2UnICAgICAgICAgICAgICA9PiBhcnJheSgKCQkJCSdsYWJlbCcgPT4gX18oICdQcm9maWxlIFBlcm1hbGluayBCYXNlJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCSd2YWx1ZScgPT4gaXNzZXQoICRwZXJtYWxpbmtfYmFzZVsgVU0oKS0+b3B0aW9ucygpLT5nZXQoICdwZXJtYWxpbmtfYmFzZScgKSBdICkgPyAkcGVybWFsaW5rX2Jhc2VbIFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAncGVybWFsaW5rX2Jhc2UnICkgXSA6ICRsYWJlbHNbJ25vJ10sCgkJCSksCgkJCSd1bS1kaXNwbGF5X25hbWUnICAgICAgICAgICAgICAgID0+IGFycmF5KAoJCQkJJ2xhYmVsJyA9PiBfXyggJ1VzZXIgRGlzcGxheSBOYW1lJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCSd2YWx1ZScgPT4gaXNzZXQoICRkaXNwbGF5X25hbWVbIFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAnZGlzcGxheV9uYW1lJyApIF0gKSA/ICRkaXNwbGF5X25hbWVbIFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAnZGlzcGxheV9uYW1lJyApIF0gOiAkbGFiZWxzWydubyddLAoJCQkpLAoJCQkndW0tYXV0aG9yX3JlZGlyZWN0JyAgICAgICAgICAgICA9PiBhcnJheSgKCQkJCSdsYWJlbCcgPT4gX18oICdBdXRvbWF0aWNhbGx5IHJlZGlyZWN0IGF1dGhvciBwYWdlIHRvIHRoZWlyIHByb2ZpbGU/JywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCSd2YWx1ZScgPT4gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdhdXRob3JfcmVkaXJlY3QnICkgPyAkbGFiZWxzWyd5ZXMnXSA6ICRsYWJlbHNbJ25vJ10sCgkJCSksCgkJCSd1bS1tZW1iZXJzX3BhZ2UnICAgICAgICAgICAgICAgID0+IGFycmF5KAoJCQkJJ2xhYmVsJyA9PiBfXyggJ0VuYWJsZSBNZW1iZXJzIERpcmVjdG9yeScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkndmFsdWUnID0+IFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAnbWVtYmVyc19wYWdlJyApID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCQkpLAoJCQkndW0tdG9nZ2xlX3Bhc3N3b3JkJyAgICAgICAgICAgICA9PiBhcnJheSgKCQkJCSdsYWJlbCcgPT4gX18oICdTaG93L2hpZGUgcGFzc3dvcmQgYnV0dG9uJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCSd2YWx1ZScgPT4gVU0oKS0+b3B0aW9ucygpLT5nZXQoICd0b2dnbGVfcGFzc3dvcmQnICkgPyAkbGFiZWxzWyd5ZXMnXSA6ICRsYWJlbHNbJ25vJ10sCgkJCSksCgkJCSd1bS1yZXF1aXJlX3N0cm9uZ3Bhc3MnICAgICAgICAgID0+IGFycmF5KAoJCQkJJ2xhYmVsJyA9PiBfXyggJ1JlcXVpcmUgU3Ryb25nIFBhc3N3b3JkcycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkndmFsdWUnID0+IFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAncmVxdWlyZV9zdHJvbmdwYXNzJyApID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCQkpLAoJCQkndW0tcGFzc3dvcmRfbWluX2NoYXJzJyAgICAgICAgICA9PiBhcnJheSgKCQkJCSdsYWJlbCcgPT4gX18oICdSZXF1aXJlIFN0cm9uZyBQYXNzd29yZHMnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJJ3ZhbHVlJyA9PiBVTSgpLT5vcHRpb25zKCktPmdldCggJ3Bhc3N3b3JkX21pbl9jaGFycycgKSwKCQkJKSwKCQkJJ3VtLXBhc3N3b3JkX21heF9jaGFycycgICAgICAgICAgPT4gYXJyYXkoCgkJCQknbGFiZWwnID0+IF9fKCAnUmVxdWlyZSBTdHJvbmcgUGFzc3dvcmRzJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCSd2YWx1ZScgPT4gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdwYXNzd29yZF9tYXhfY2hhcnMnICksCgkJCSksCgkJCSd1bS1wcm9maWxlX25vaW5kZXgnICAgICAgICAgICAgID0+IGFycmF5KAoJCQkJJ2xhYmVsJyA9PiBfXyggJ0F2b2lkIGluZGV4aW5nIHByb2ZpbGUgYnkgc2VhcmNoIGVuZ2luZXMnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJJ3ZhbHVlJyA9PiBVTSgpLT5vcHRpb25zKCktPmdldCggJ3Byb2ZpbGVfbm9pbmRleCcgKSA/ICRsYWJlbHNbJ3llcyddIDogJGxhYmVsc1snbm8nXSwKCQkJKSwKCQkJJ3VtLWFjdGl2YXRpb25fbGlua19leHBpcnlfdGltZScgPT4gYXJyYXkoCgkJCQknbGFiZWwnID0+IF9fKCAnQWN0aXZhdGlvbiBsaW5rIGxpZmV0aW1lJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCSd2YWx1ZScgPT4gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdhY3RpdmF0aW9uX2xpbmtfZXhwaXJ5X3RpbWUnICksCgkJCSksCgkJCSd1bS11c2VfZ3JhdmF0YXJzJyAgICAgICAgICAgICAgID0+IGFycmF5KAoJCQkJJ2xhYmVsJyA9PiBfXyggJ1VzZSBHcmF2YXRhcnM/JywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCSd2YWx1ZScgPT4gVU0oKS0+b3B0aW9ucygpLT5nZXQoICd1c2VfZ3JhdmF0YXJzJyApID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCQkpLAoJCQkndW0tZGVsZXRlX2NvbW1lbnRzJyAgICAgICAgICAgICA9PiBhcnJheSgKCQkJCSdsYWJlbCcgPT4gX18oICdEZWxldGluZyB1c2VyIGNvbW1lbnRzIGFmdGVyIGRlbGV0aW5nIGEgdXNlcicsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkndmFsdWUnID0+IFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAnZGVsZXRlX2NvbW1lbnRzJyApID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCQkpLAoJCSk7CgoJCWlmICggJ2N1c3RvbV9tZXRhJyA9PT0gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdwZXJtYWxpbmtfYmFzZScgKSApIHsKCQkJJHVzZXJfc2V0dGluZ3MgPSBVTSgpLT5hcnJheV9pbnNlcnRfYmVmb3JlKAoJCQkJJHVzZXJfc2V0dGluZ3MsCgkJCQkndW0tZGlzcGxheV9uYW1lJywKCQkJCWFycmF5KAoJCQkJCSd1bS1wZXJtYWxpbmtfYmFzZV9jdXN0b21fbWV0YScgPT4gYXJyYXkoCgkJCQkJCSdsYWJlbCcgPT4gX18oICdQcm9maWxlIFBlcm1hbGluayBCYXNlIEN1c3RvbSBNZXRhIEtleScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCSd2YWx1ZScgPT4gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdwZXJtYWxpbmtfYmFzZV9jdXN0b21fbWV0YScgKSwKCQkJCQkpLAoJCQkJKQoJCQkpOwoJCX0KCgkJaWYgKCAnZmllbGQnID09PSBVTSgpLT5vcHRpb25zKCktPmdldCggJ2Rpc3BsYXlfbmFtZScgKSApIHsKCQkJJHVzZXJfc2V0dGluZ3MgPSBVTSgpLT5hcnJheV9pbnNlcnRfYmVmb3JlKAoJCQkJJHVzZXJfc2V0dGluZ3MsCgkJCQkndW0tYXV0aG9yX3JlZGlyZWN0JywKCQkJCWFycmF5KAoJCQkJCSd1bS1kaXNwbGF5X25hbWVfZmllbGQnID0+IGFycmF5KAoJCQkJCQknbGFiZWwnID0+IF9fKCAnRGlzcGxheSBOYW1lIEN1c3RvbSBGaWVsZChzKScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCSd2YWx1ZScgPT4gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdkaXNwbGF5X25hbWVfZmllbGQnICksCgkJCQkJKSwKCQkJCSkKCQkJKTsKCQl9CgoJCWlmICggVU0oKS0+b3B0aW9ucygpLT5nZXQoICd1c2VfZ3JhdmF0YXJzJyApICkgewoJCQkkZ3JhdmF0YXJfb3B0aW9ucyA9IGFycmF5KAoJCQkJJ2RlZmF1bHQnICAgPT4gX18oICdEZWZhdWx0JywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCSc0MDQnICAgICAgID0+IF9fKCAnNDA0ICggRmlsZSBOb3QgRm91bmQgcmVzcG9uc2UgKScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQknbW0nICAgICAgICA9PiBfXyggJ015c3RlcnkgTWFuJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCSdpZGVudGljb24nID0+IF9fKCAnSWRlbnRpY29uJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCSdtb25zdGVyaWQnID0+IF9fKCAnTW9uc3RlcmlkJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCSd3YXZhdGFyJyAgID0+IF9fKCAnV2F2YXRhcicsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkncmV0cm8nICAgICA9PiBfXyggJ1JldHJvJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCSdibGFuaycgICAgID0+IF9fKCAnQmxhbmsgKCBhIHRyYW5zcGFyZW50IFBORyBpbWFnZSApJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJKTsKCgkJCSR1c2VyX3NldHRpbmdzWyd1bS11c2VfdW1fZ3JhdmF0YXJfZGVmYXVsdF9idWlsdGluX2ltYWdlJ10gPSBhcnJheSgKCQkJCSdsYWJlbCcgPT4gX18oICdVc2UgR3JhdmF0YXIgYnVpbHRpbiBpbWFnZScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkndmFsdWUnID0+ICRncmF2YXRhcl9vcHRpb25zWyBVTSgpLT5vcHRpb25zKCktPmdldCggJ3VzZV91bV9ncmF2YXRhcl9kZWZhdWx0X2J1aWx0aW5faW1hZ2UnICkgXSwKCQkJKTsKCQkJaWYgKCAnZGVmYXVsdCcgPT09IFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAndXNlX3VtX2dyYXZhdGFyX2RlZmF1bHRfYnVpbHRpbl9pbWFnZScgKSApIHsKCQkJCSR1c2VyX3NldHRpbmdzWyd1bS11c2VfdW1fZ3JhdmF0YXJfZGVmYXVsdF9pbWFnZSddID0gYXJyYXkoCgkJCQkJJ2xhYmVsJyA9PiBfXyggJ1VzZSBEZWZhdWx0IHBsdWdpbiBhdmF0YXIgYXMgR3JhdmF0YXJcJ3MgRGVmYXVsdCBhdmF0YXInLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCSd2YWx1ZScgPT4gVU0oKS0+b3B0aW9ucygpLT5nZXQoICd1c2VfdW1fZ3JhdmF0YXJfZGVmYXVsdF9pbWFnZScgKSA/ICRsYWJlbHNbJ3llcyddIDogJGxhYmVsc1snbm8nXSwKCQkJCSk7CgkJCX0KCQl9CgoJCS8vIEFjY291bnQgc2V0dGluZ3MKCQkkYWNjb3VudF9zZXR0aW5ncyA9IGFycmF5KAoJCQkndW0tYWNjb3VudF90YWJfcGFzc3dvcmQnID0+IGFycmF5KAoJCQkJJ2xhYmVsJyA9PiBfXyggJ1Bhc3N3b3JkIEFjY291bnQgVGFiJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCSd2YWx1ZScgPT4gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdhY2NvdW50X3RhYl9wYXNzd29yZCcgKSA/ICRsYWJlbHNbJ3llcyddIDogJGxhYmVsc1snbm8nXSwKCQkJKSwKCQkJJ3VtLWFjY291bnRfdGFiX3ByaXZhY3knICA9PiBhcnJheSgKCQkJCSdsYWJlbCcgPT4gX18oICdQcml2YWN5IEFjY291bnQgVGFiJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCSd2YWx1ZScgPT4gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdhY2NvdW50X3RhYl9wcml2YWN5JyApID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCQkpLAoJCSk7CgoJCWlmICggZmFsc2UgIT09IFVNKCktPmFjY291bnQoKS0+aXNfbm90aWZpY2F0aW9uc190YWJfdmlzaWJsZSgpICkgewoJCQkkYWNjb3VudF9zZXR0aW5nc1sndW0tYWNjb3VudF90YWJfbm90aWZpY2F0aW9ucyddID0gYXJyYXkoCgkJCQknbGFiZWwnID0+IF9fKCAnTm90aWZpY2F0aW9ucyBBY2NvdW50IFRhYicsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkndmFsdWUnID0+IFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAnYWNjb3VudF90YWJfbm90aWZpY2F0aW9ucycgKSA/ICRsYWJlbHNbJ3llcyddIDogJGxhYmVsc1snbm8nXSwKCQkJKTsKCQl9CgoJCSRhY2NvdW50X3NldHRpbmdzID0gYXJyYXlfbWVyZ2UoCgkJCSRhY2NvdW50X3NldHRpbmdzLAoJCQlhcnJheSgKCQkJCSd1bS1hY2NvdW50X3RhYl9kZWxldGUnICAgICAgICAgICAgICAgICAgID0+IGFycmF5KAoJCQkJCSdsYWJlbCcgPT4gX18oICdEZWxldGUgQWNjb3VudCBUYWInLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCSd2YWx1ZScgPT4gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdhY2NvdW50X3RhYl9kZWxldGUnICkgPyAkbGFiZWxzWyd5ZXMnXSA6ICRsYWJlbHNbJ25vJ10sCgkJCQkpLAoJCQkJJ3VtLWRlbGV0ZV9hY2NvdW50X3RleHQnICAgICAgICAgICAgICAgICAgPT4gYXJyYXkoCgkJCQkJJ2xhYmVsJyA9PiBfXyggJ0FjY291bnQgRGVsZXRpb24gQ3VzdG9tIFRleHQnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCSd2YWx1ZScgPT4gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdkZWxldGVfYWNjb3VudF90ZXh0JyApLAoJCQkJKSwKCQkJCSd1bS1kZWxldGVfYWNjb3VudF9ub19wYXNzX3JlcXVpcmVkX3RleHQnID0+IGFycmF5KAoJCQkJCSdsYWJlbCcgPT4gX18oICdBY2NvdW50IERlbGV0aW9uIHdpdGhvdXQgcGFzc3dvcmQgQ3VzdG9tIFRleHQnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCSd2YWx1ZScgPT4gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdkZWxldGVfYWNjb3VudF9ub19wYXNzX3JlcXVpcmVkX3RleHQnICksCgkJCQkpLAoJCQkJJ3VtLWFjY291bnRfbmFtZScgICAgICAgICAgICAgICAgICAgICAgICAgPT4gYXJyYXkoCgkJCQkJJ2xhYmVsJyA9PiBfXyggJ0FkZCBhIEZpcnN0ICYgTGFzdCBOYW1lIGZpZWxkcycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJJ3ZhbHVlJyA9PiBVTSgpLT5vcHRpb25zKCktPmdldCggJ2FjY291bnRfbmFtZScgKSA/ICRsYWJlbHNbJ3llcyddIDogJGxhYmVsc1snbm8nXSwKCQkJCSksCgkJCSkKCQkpOwoKCQlpZiAoIFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAnYWNjb3VudF9uYW1lJyApICkgewoJCQkkYWNjb3VudF9zZXR0aW5nc1sndW0tYWNjb3VudF9uYW1lX2Rpc2FibGUnXSA9IGFycmF5KAoJCQkJJ2xhYmVsJyA9PiBfXyggJ0Rpc2FibGUgRmlyc3QgJiBMYXN0IG5hbWUgZmllbGQgZWRpdGluZycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkndmFsdWUnID0+IFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAnYWNjb3VudF9uYW1lX2Rpc2FibGUnICkgPyAkbGFiZWxzWyd5ZXMnXSA6ICRsYWJlbHNbJ25vJ10sCgkJCSk7CgkJCSRhY2NvdW50X3NldHRpbmdzWyd1bS1hY2NvdW50X25hbWVfcmVxdWlyZSddID0gYXJyYXkoCgkJCQknbGFiZWwnID0+IF9fKCAnUmVxdWlyZSBGaXJzdCAmIExhc3QgTmFtZScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkndmFsdWUnID0+IFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAnYWNjb3VudF9uYW1lX3JlcXVpcmUnICkgPyAkbGFiZWxzWyd5ZXMnXSA6ICRsYWJlbHNbJ25vJ10sCgkJCSk7CgkJfQoKCQkkYWNjb3VudF9zZXR0aW5nc1sndW0tYWNjb3VudF9lbWFpbCddID0gYXJyYXkoCgkJCSdsYWJlbCcgPT4gX18oICdBbGxvdyB1c2VycyB0byBjaGFuZ2UgZW1haWwnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkndmFsdWUnID0+IFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAnYWNjb3VudF9lbWFpbCcgKSA/ICRsYWJlbHNbJ3llcyddIDogJGxhYmVsc1snbm8nXSwKCQkpOwoKCQkkYWNjb3VudF9zZXR0aW5nc1sndW0tYWNjb3VudF9nZW5lcmFsX3Bhc3N3b3JkJ10gPSBhcnJheSgKCQkJJ2xhYmVsJyA9PiBfXyggJ1Bhc3N3b3JkIGlzIHJlcXVpcmVkPycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCSd2YWx1ZScgPT4gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdhY2NvdW50X2dlbmVyYWxfcGFzc3dvcmQnICkgPyAkbGFiZWxzWyd5ZXMnXSA6ICRsYWJlbHNbJ25vJ10sCgkJKTsKCgkJJGFjY291bnRfc2V0dGluZ3NbJ3VtLWFjY291bnRfaGlkZV9pbl9kaXJlY3RvcnknXSA9IGFycmF5KAoJCQknbGFiZWwnID0+IF9fKCAnQWxsb3cgdXNlcnMgdG8gaGlkZSB0aGVpciBwcm9maWxlcyBmcm9tIGRpcmVjdG9yeScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCSd2YWx1ZScgPT4gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdhY2NvdW50X2hpZGVfaW5fZGlyZWN0b3J5JyApID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCSk7CgoJCWlmICggVU0oKS0+b3B0aW9ucygpLT5nZXQoICdhY2NvdW50X2hpZGVfaW5fZGlyZWN0b3J5JyApICkgewoJCQkkYWNjb3VudF9zZXR0aW5nc1sndW0tYWNjb3VudF9oaWRlX2luX2RpcmVjdG9yeV9kZWZhdWx0J10gPSBhcnJheSgKCQkJCSdsYWJlbCcgPT4gX18oICdIaWRlIHByb2ZpbGVzIGZyb20gZGlyZWN0b3J5IGJ5IGRlZmF1bHQnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJJ3ZhbHVlJyA9PiBVTSgpLT5vcHRpb25zKCktPmdldCggJ2FjY291bnRfaGlkZV9pbl9kaXJlY3RvcnlfZGVmYXVsdCcgKSwKCQkJKTsKCQl9CgoJCS8vIFVwbG9hZHMgc2V0dGluZ3MKCQkkcHJvZmlsZV9zaXplc19saXN0ID0gJyc7CgkJJHByb2ZpbGVfc2l6ZXMgICAgICA9IFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAncGhvdG9fdGh1bWJfc2l6ZXMnICk7CgkJaWYgKCAhIGVtcHR5KCAkcHJvZmlsZV9zaXplcyApICkgewoJCQlmb3JlYWNoICggJHByb2ZpbGVfc2l6ZXMgYXMgJHNpemUgKSB7CgkJCQkkcHJvZmlsZV9zaXplc19saXN0ID0gZW1wdHkoICRwcm9maWxlX3NpemVzX2xpc3QgKSA/ICRzaXplIDogJHByb2ZpbGVfc2l6ZXNfbGlzdCAuICcsICcgLiAkc2l6ZTsKCQkJfQoJCX0KCQkkY292ZXJfc2l6ZXNfbGlzdCA9ICcnOwoJCSRjb3Zlcl9zaXplcyAgICAgID0gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdjb3Zlcl90aHVtYl9zaXplcycgKTsKCQlpZiAoICEgZW1wdHkoICRjb3Zlcl9zaXplcyApICkgewoJCQlmb3JlYWNoICggJGNvdmVyX3NpemVzIGFzICRzaXplICkgewoJCQkJJGNvdmVyX3NpemVzX2xpc3QgPSBlbXB0eSggJGNvdmVyX3NpemVzX2xpc3QgKSA/ICRzaXplIDogJGNvdmVyX3NpemVzX2xpc3QgLiAnLCAnIC4gJHNpemU7CgkJCX0KCQl9CgkJJHVwbG9hZHNfc2V0dGluZ3MgPSBhcnJheSgKCQkJJ3VtLXByb2ZpbGVfcGhvdG9fbWF4X3NpemUnICAgID0+IGFycmF5KAoJCQkJJ2xhYmVsJyA9PiBfXyggJ1Byb2ZpbGUgUGhvdG8gTWF4aW11bSBGaWxlIFNpemUgKGJ5dGVzKScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkndmFsdWUnID0+IFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAncHJvZmlsZV9waG90b19tYXhfc2l6ZScgKSwKCQkJKSwKCQkJJ3VtLWNvdmVyX3Bob3RvX21heF9zaXplJyAgICAgID0+IGFycmF5KAoJCQkJJ2xhYmVsJyA9PiBfXyggJ0NvdmVyIFBob3RvIE1heGltdW0gRmlsZSBTaXplIChieXRlcyknLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJJ3ZhbHVlJyA9PiBVTSgpLT5vcHRpb25zKCktPmdldCggJ2NvdmVyX3Bob3RvX21heF9zaXplJyApLAoJCQkpLAoJCQkndW0tcGhvdG9fdGh1bWJfc2l6ZXMnICAgICAgICAgPT4gYXJyYXkoCgkJCQknbGFiZWwnID0+IF9fKCAnUHJvZmlsZSBQaG90byBUaHVtYm5haWwgU2l6ZXMgKHB4KScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkndmFsdWUnID0+ICRwcm9maWxlX3NpemVzX2xpc3QsCgkJCSksCgkJCSd1bS1jb3Zlcl90aHVtYl9zaXplcycgICAgICAgICA9PiBhcnJheSgKCQkJCSdsYWJlbCcgPT4gX18oICdDb3ZlciBQaG90byBUaHVtYm5haWwgU2l6ZXMgKHB4KScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkndmFsdWUnID0+ICRjb3Zlcl9zaXplc19saXN0LAoJCQkpLAoJCQkndW0taW1hZ2Vfb3JpZW50YXRpb25fYnlfZXhpZicgPT4gYXJyYXkoCgkJCQknbGFiZWwnID0+IF9fKCAnQ2hhbmdlIGltYWdlIG9yaWVudGF0aW9uJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCSd2YWx1ZScgPT4gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdpbWFnZV9vcmllbnRhdGlvbl9ieV9leGlmJyApID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCQkpLAoJCQkndW0taW1hZ2VfY29tcHJlc3Npb24nICAgICAgICAgPT4gYXJyYXkoCgkJCQknbGFiZWwnID0+IF9fKCAnSW1hZ2UgUXVhbGl0eScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkndmFsdWUnID0+IFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAnaW1hZ2VfY29tcHJlc3Npb24nICksCgkJCSksCgkJCSd1bS1pbWFnZV9tYXhfd2lkdGgnICAgICAgICAgICA9PiBhcnJheSgKCQkJCSdsYWJlbCcgPT4gX18oICdJbWFnZSBVcGxvYWQgTWF4aW11bSBXaWR0aCAocHgpJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCSd2YWx1ZScgPT4gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdpbWFnZV9tYXhfd2lkdGgnICksCgkJCSksCgkJCSd1bS1jb3Zlcl9taW5fd2lkdGgnICAgICAgICAgICA9PiBhcnJheSgKCQkJCSdsYWJlbCcgPT4gX18oICdDb3ZlciBQaG90byBNaW5pbXVtIFdpZHRoIChweCknLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJJ3ZhbHVlJyA9PiBVTSgpLT5vcHRpb25zKCktPmdldCggJ2NvdmVyX21pbl93aWR0aCcgKSwKCQkJKSwKCQkpOwoKCQkvLyBDb250ZW50IFJlc3RyaWN0aW9uIHNldHRpbmdzCgkJJHJlc3RyaWN0ZWRfcG9zdHMgICAgICA9IFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAncmVzdHJpY3RlZF9hY2Nlc3NfcG9zdF9tZXRhYm94JyApOwoJCSRyZXN0cmljdGVkX3Bvc3RzX2xpc3QgPSAnJzsKCQlpZiAoICEgZW1wdHkoICRyZXN0cmljdGVkX3Bvc3RzICkgKSB7CgkJCWZvcmVhY2ggKCAkcmVzdHJpY3RlZF9wb3N0cyBhcyAka2V5ID0+ICRwb3N0cyApIHsKCQkJCSRyZXN0cmljdGVkX3Bvc3RzX2xpc3QgPSBlbXB0eSggJHJlc3RyaWN0ZWRfcG9zdHNfbGlzdCApID8gJGtleSA6ICRyZXN0cmljdGVkX3Bvc3RzX2xpc3QgLiAnLCAnIC4gJGtleTsKCQkJfQoJCX0KCQkkcmVzdHJpY3RlZF90YXhvbm9teSAgICAgID0gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdyZXN0cmljdGVkX2FjY2Vzc190YXhvbm9teV9tZXRhYm94JyApOwoJCSRyZXN0cmljdGVkX3RheG9ub215X2xpc3QgPSAnJzsKCQlpZiAoICEgZW1wdHkoICRyZXN0cmljdGVkX3RheG9ub215ICkgKSB7CgkJCWZvcmVhY2ggKCAkcmVzdHJpY3RlZF90YXhvbm9teSBhcyAka2V5ID0+ICRwb3N0cyApIHsKCQkJCSRyZXN0cmljdGVkX3RheG9ub215X2xpc3QgPSBlbXB0eSggJHJlc3RyaWN0ZWRfdGF4b25vbXlfbGlzdCApID8gJGtleSA6ICRyZXN0cmljdGVkX3RheG9ub215X2xpc3QgLiAnLCAnIC4gJGtleTsKCQkJfQoJCX0KCgkJJGFjY2Vzc2libGUgPSBhYnNpbnQoIFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAnYWNjZXNzaWJsZScgKSApOwoKCQkkcmVzdHJpY3Rfc2V0dGluZ3MgPSBhcnJheSgKCQkJJ3VtLWFjY2Vzc2libGUnID0+IGFycmF5KAoJCQkJJ2xhYmVsJyA9PiBfXyggJ0dsb2JhbCBTaXRlIEFjY2VzcycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkndmFsdWUnID0+IDAgPT09ICRhY2Nlc3NpYmxlID8gX18oICdTaXRlIGFjY2Vzc2libGUgdG8gRXZlcnlvbmUnLCAndWx0aW1hdGUtbWVtYmVyJyApIDogX18oICdTaXRlIGFjY2Vzc2libGUgdG8gTG9nZ2VkIEluIFVzZXJzJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJKSwKCQkpOwoKCQlpZiAoIDIgPT09ICRhY2Nlc3NpYmxlICkgewoJCQkkZXhjbHVkZV91cmlzICAgICAgPSBVTSgpLT5vcHRpb25zKCktPmdldCggJ2FjY2Vzc19leGNsdWRlX3VyaXMnICk7CgkJCSRleGNsdWRlX3VyaXNfbGlzdCA9ICcnOwoJCQlpZiAoICEgZW1wdHkoICRleGNsdWRlX3VyaXMgKSApIHsKCQkJCSRleGNsdWRlX3VyaXNfbGlzdCA9IGltcGxvZGUoICcsICcsICRleGNsdWRlX3VyaXMgKTsKCQkJfQoJCQkkcmVzdHJpY3Rfc2V0dGluZ3NbJ3VtLWFjY2Vzc19yZWRpcmVjdCddICAgICAgICAgID0gYXJyYXkoCgkJCQknbGFiZWwnID0+IF9fKCAnQ3VzdG9tIFJlZGlyZWN0IFVSTCcsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkndmFsdWUnID0+IFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAnYWNjZXNzX3JlZGlyZWN0JyApLAoJCQkpOwoJCQkkcmVzdHJpY3Rfc2V0dGluZ3NbJ3VtLWFjY2Vzc19leGNsdWRlX3VyaXMnXSAgICAgID0gYXJyYXkoCgkJCQknbGFiZWwnID0+IF9fKCAnRXhjbHVkZSB0aGUgZm9sbG93aW5nIFVSTHMnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJJ3ZhbHVlJyA9PiAkZXhjbHVkZV91cmlzX2xpc3QsCgkJCSk7CgkJCSRyZXN0cmljdF9zZXR0aW5nc1sndW0taG9tZV9wYWdlX2FjY2Vzc2libGUnXSAgICAgPSBhcnJheSgKCQkJCSdsYWJlbCcgPT4gX18oICdBbGxvdyBIb21lcGFnZSB0byBiZSBhY2Nlc3NpYmxlJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCSd2YWx1ZScgPT4gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdob21lX3BhZ2VfYWNjZXNzaWJsZScgKSA/ICRsYWJlbHNbJ3llcyddIDogJGxhYmVsc1snbm8nXSwKCQkJKTsKCQkJJHJlc3RyaWN0X3NldHRpbmdzWyd1bS1jYXRlZ29yeV9wYWdlX2FjY2Vzc2libGUnXSA9IGFycmF5KAoJCQkJJ2xhYmVsJyA9PiBfXyggJ0FsbG93IENhdGVnb3J5IHBhZ2VzIHRvIGJlIGFjY2Vzc2libGUnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJJ3ZhbHVlJyA9PiBVTSgpLT5vcHRpb25zKCktPmdldCggJ2NhdGVnb3J5X3BhZ2VfYWNjZXNzaWJsZScgKSA/ICRsYWJlbHNbJ3llcyddIDogJGxhYmVsc1snbm8nXSwKCQkJKTsKCQl9CgoJCSRyZXN0cmljdF9zZXR0aW5nc1sndW0tcmVzdHJpY3RlZF9wb3N0X3RpdGxlX3JlcGxhY2UnXSA9IGFycmF5KAoJCQknbGFiZWwnID0+IF9fKCAnUmVzdHJpY3RlZCBDb250ZW50IFRpdGxlcycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCSd2YWx1ZScgPT4gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdyZXN0cmljdGVkX3Bvc3RfdGl0bGVfcmVwbGFjZScgKSA/ICRsYWJlbHNbJ3llcyddIDogJGxhYmVsc1snbm8nXSwKCQkpOwoJCWlmICggVU0oKS0+b3B0aW9ucygpLT5nZXQoICdyZXN0cmljdGVkX3Bvc3RfdGl0bGVfcmVwbGFjZScgKSApIHsKCQkJJHJlc3RyaWN0X3NldHRpbmdzWyd1bS1yZXN0cmljdGVkX2FjY2Vzc19wb3N0X3RpdGxlJ10gPSBhcnJheSgKCQkJCSdsYWJlbCcgPT4gX18oICdSZXN0cmljdGVkIENvbnRlbnQgVGl0bGUgVGV4dCcsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkndmFsdWUnID0+IHN0cmlwc2xhc2hlcyggVU0oKS0+b3B0aW9ucygpLT5nZXQoICdyZXN0cmljdGVkX2FjY2Vzc19wb3N0X3RpdGxlJyApICksCgkJCSk7CgkJfQoKCQkkcmVzdHJpY3Rfc2V0dGluZ3NbJ3VtLXJlc3RyaWN0ZWRfYWNjZXNzX21lc3NhZ2UnXSA9IGFycmF5KAoJCQknbGFiZWwnID0+IF9fKCAnUmVzdHJpY3RlZCBBY2Nlc3MgTWVzc2FnZScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCSd2YWx1ZScgPT4gc3RyaXBzbGFzaGVzKCBVTSgpLT5vcHRpb25zKCktPmdldCggJ3Jlc3RyaWN0ZWRfYWNjZXNzX21lc3NhZ2UnICkgKSwKCQkpOwoJCSRyZXN0cmljdF9zZXR0aW5nc1sndW0tcmVzdHJpY3RlZF9ibG9ja3MnXSAgICAgICAgID0gYXJyYXkoCgkJCSdsYWJlbCcgPT4gX18oICdFbmFibGUgdGhlICJDb250ZW50IFJlc3RyaWN0aW9uIiBzZXR0aW5ncyBmb3IgdGhlIEd1dGVuYmVyZyBCbG9ja3MnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkndmFsdWUnID0+IFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAncmVzdHJpY3RlZF9ibG9ja3MnICkgPyAkbGFiZWxzWyd5ZXMnXSA6ICRsYWJlbHNbJ25vJ10sCgkJKTsKCQlpZiAoIFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAncmVzdHJpY3RlZF9ibG9ja3MnICkgKSB7CgkJCSRyZXN0cmljdF9zZXR0aW5nc1sndW0tcmVzdHJpY3RlZF9ibG9ja19tZXNzYWdlJ10gPSBhcnJheSgKCQkJCSdsYWJlbCcgPT4gX18oICdSZXN0cmljdGVkIEFjY2VzcyBCbG9jayBNZXNzYWdlJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCSd2YWx1ZScgPT4gc3RyaXBzbGFzaGVzKCBVTSgpLT5vcHRpb25zKCktPmdldCggJ3Jlc3RyaWN0ZWRfYmxvY2tfbWVzc2FnZScgKSApLAoJCQkpOwoJCX0KCQkkcmVzdHJpY3Rfc2V0dGluZ3NbJ3VtLXJlc3RyaWN0ZWRfYWNjZXNzX3Bvc3RfbWV0YWJveCddICAgICA9IGFycmF5KAoJCQknbGFiZWwnID0+IF9fKCAnRW5hYmxlIHRoZSAiQ29udGVudCBSZXN0cmljdGlvbiIgc2V0dGluZ3MgZm9yIHBvc3QgdHlwZXMnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkndmFsdWUnID0+ICRyZXN0cmljdGVkX3Bvc3RzX2xpc3QsCgkJKTsKCQkkcmVzdHJpY3Rfc2V0dGluZ3NbJ3VtLXJlc3RyaWN0ZWRfYWNjZXNzX3RheG9ub215X21ldGFib3gnXSA9IGFycmF5KAoJCQknbGFiZWwnID0+IF9fKCAnRW5hYmxlIHRoZSAiQ29udGVudCBSZXN0cmljdGlvbiIgc2V0dGluZ3MgZm9yIHRheG9ub21pZXMnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkndmFsdWUnID0+ICRyZXN0cmljdGVkX3RheG9ub215X2xpc3QsCgkJKTsKCgkJLy8gQWNjZXNzIG90aGVyIHNldHRpbmdzCgkJJGJsb2NrZWRfZW1haWxzICAgID0gc3RyX3JlcGxhY2UoICc8YnIgLz4nLCAnLCAnLCBubDJiciggVU0oKS0+b3B0aW9ucygpLT5nZXQoICdibG9ja2VkX2VtYWlscycgKSApICk7CgkJJGJsb2NrZWRfd29yZHMgICAgID0gc3RyX3JlcGxhY2UoICc8YnIgLz4nLCAnLCAnLCBubDJiciggVU0oKS0+b3B0aW9ucygpLT5nZXQoICdibG9ja2VkX3dvcmRzJyApICkgKTsKCQkkYWxsb3dlZF9jYWxsYmFja3MgPSBzdHJfcmVwbGFjZSggJzxiciAvPicsICcsICcsIG5sMmJyKCBVTSgpLT5vcHRpb25zKCktPmdldCggJ2FsbG93ZWRfY2hvaWNlX2NhbGxiYWNrcycgKSApICk7CgoJCSRhY2Nlc3Nfb3RoZXJfc2V0dGluZ3MgPSBhcnJheSgKCQkJJ3VtLWVuYWJsZV9yZXNldF9wYXNzd29yZF9saW1pdCcgPT4gYXJyYXkoCgkJCQknbGFiZWwnID0+IF9fKCAnRW5hYmxlIHRoZSBSZXNldCBQYXNzd29yZCBMaW1pdD8nLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJJ3ZhbHVlJyA9PiBVTSgpLT5vcHRpb25zKCktPmdldCggJ2VuYWJsZV9yZXNldF9wYXNzd29yZF9saW1pdCcgKSA/ICRsYWJlbHNbJ3llcyddIDogJGxhYmVsc1snbm8nXSwKCQkJKSwKCQkpOwoJCWlmICggVU0oKS0+b3B0aW9ucygpLT5nZXQoICdlbmFibGVfcmVzZXRfcGFzc3dvcmRfbGltaXQnICkgKSB7CgkJCSRhY2Nlc3Nfb3RoZXJfc2V0dGluZ3NbJ3VtLXJlc2V0X3Bhc3N3b3JkX2xpbWl0X251bWJlciddID0gYXJyYXkoCgkJCQknbGFiZWwnID0+IF9fKCAnUmVzZXQgUGFzc3dvcmQgTGltaXQgJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCSd2YWx1ZScgPT4gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdyZXNldF9wYXNzd29yZF9saW1pdF9udW1iZXInICksCgkJCSk7CgkJfQoJCSRhY2Nlc3Nfb3RoZXJfc2V0dGluZ3NbJ3VtLWNoYW5nZV9wYXNzd29yZF9yZXF1ZXN0X2xpbWl0J10gPSBhcnJheSgKCQkJJ2xhYmVsJyA9PiBfXyggJ0NoYW5nZSBQYXNzd29yZCByZXF1ZXN0IGxpbWl0ICcsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCSd2YWx1ZScgPT4gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdjaGFuZ2VfcGFzc3dvcmRfcmVxdWVzdF9saW1pdCcgKSwKCQkpOwoJCSRhY2Nlc3Nfb3RoZXJfc2V0dGluZ3NbJ3VtLWJsb2NrZWRfZW1haWxzJ10gICAgICAgICAgICAgICAgPSBhcnJheSgKCQkJJ2xhYmVsJyA9PiBfXyggJ0Jsb2NrZWQgRW1haWwgQWRkcmVzc2VzJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJJ3ZhbHVlJyA9PiBzdHJpcHNsYXNoZXMoICRibG9ja2VkX2VtYWlscyApLAoJCSk7CgkJJGFjY2Vzc19vdGhlcl9zZXR0aW5nc1sndW0tYmxvY2tlZF93b3JkcyddICAgICAgICAgICAgICAgICA9IGFycmF5KAoJCQknbGFiZWwnID0+IF9fKCAnQmxhY2tsaXN0IFdvcmRzJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJJ3ZhbHVlJyA9PiBzdHJpcHNsYXNoZXMoICRibG9ja2VkX3dvcmRzICksCgkJKTsKCQkkYWNjZXNzX290aGVyX3NldHRpbmdzWyd1bS1hbGxvd2VkX2Nob2ljZV9jYWxsYmFja3MnXSAgICAgID0gYXJyYXkoCgkJCSdsYWJlbCcgPT4gX18oICdBbGxvd2VkIENob2ljZSBDYWxsYmFja3MnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkndmFsdWUnID0+IHN0cmlwc2xhc2hlcyggJGFsbG93ZWRfY2FsbGJhY2tzICksCgkJKTsKCQkkYWNjZXNzX290aGVyX3NldHRpbmdzWyd1bS1hbGxvd191cmxfcmVkaXJlY3RfY29uZmlybSddICAgID0gYXJyYXkoCgkJCSdsYWJlbCcgPT4gX18oICdBbGxvdyBleHRlcm5hbCBsaW5rIHJlZGlyZWN0IGNvbmZpcm0gJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJJ3ZhbHVlJyA9PiBVTSgpLT5vcHRpb25zKCktPmdldCggJ2FsbG93X3VybF9yZWRpcmVjdF9jb25maXJtJyApID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCSk7CgoJCS8vIEVtYWlsIHNldHRpbmdzCgkJJGVtYWlsX3NldHRpbmdzID0gYXJyYXkoCgkJCSd1bS1hZG1pbl9lbWFpbCcgICAgPT4gYXJyYXkoCgkJCQknbGFiZWwnID0+IF9fKCAnQWRtaW4gRW1haWwgQWRkcmVzcycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkndmFsdWUnID0+IFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAnYWRtaW5fZW1haWwnICksCgkJCSksCgkJCSd1bS1tYWlsX2Zyb20nICAgICAgPT4gYXJyYXkoCgkJCQknbGFiZWwnID0+IF9fKCAnTWFpbCBhcHBlYXJzIGZyb20nLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJJ3ZhbHVlJyA9PiBVTSgpLT5vcHRpb25zKCktPmdldCggJ21haWxfZnJvbScgKSwKCQkJKSwKCQkJJ3VtLW1haWxfZnJvbV9hZGRyJyA9PiBhcnJheSgKCQkJCSdsYWJlbCcgPT4gX18oICdNYWlsIGFwcGVhcnMgZnJvbSBhZGRyZXNzJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCSd2YWx1ZScgPT4gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdtYWlsX2Zyb21fYWRkcicgKSwKCQkJKSwKCQkJJ3VtLWVtYWlsX2h0bWwnICAgICA9PiBhcnJheSgKCQkJCSdsYWJlbCcgPT4gX18oICdVc2UgSFRNTCBmb3IgRW1haWxzPycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkndmFsdWUnID0+IFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAnZW1haWxfaHRtbCcgKSA/ICRsYWJlbHNbJ3llcyddIDogJGxhYmVsc1snbm8nXSwKCQkJKSwKCQkpOwoKCQkkZW1haWxzID0gVU0oKS0+Y29uZmlnKCktPmVtYWlsX25vdGlmaWNhdGlvbnM7CgkJZm9yZWFjaCAoICRlbWFpbHMgYXMgJGtleSA9PiAkZW1haWwgKSB7CgkJCWlmICggVU0oKS0+b3B0aW9ucygpLT5nZXQoICRrZXkgLiAnX29uJyApICkgewoJCQkJJGVtYWlsX3NldHRpbmdzWyAndW0tJyAuICRrZXkgXSA9IGFycmF5KAoJCQkJCS8vIHRyYW5zbGF0b3JzOiAlcyBpcyBlbWFpbCB0ZW1wbGF0ZSB0aXRsZS4KCQkJCQknbGFiZWwnID0+IHNwcmludGYoIF9fKCAnIiVzIiBTdWJqZWN0JywgJ3VsdGltYXRlLW1lbWJlcicgKSwgJGVtYWlsWyd0aXRsZSddICksCgkJCQkJJ3ZhbHVlJyA9PiBVTSgpLT5vcHRpb25zKCktPmdldCggJGtleSAuICdfc3ViJyApLAoJCQkJKTsKCgkJCQkkZW1haWxfc2V0dGluZ3NbICd1bS10aGVtZV8nIC4gJGtleSBdID0gYXJyYXkoCgkJCQkJLy8gdHJhbnNsYXRvcnM6ICVzIGlzIGVtYWlsIHRlbXBsYXRlIHRpdGxlLgoJCQkJCSdsYWJlbCcgPT4gc3ByaW50ZiggX18oICdUZW1wbGF0ZSAiJXMiIGluIHRoZW1lPycsICd1bHRpbWF0ZS1tZW1iZXInICksICRlbWFpbFsndGl0bGUnXSApLAoJCQkJCSd2YWx1ZScgPT4gJycgIT09IGxvY2F0ZV90ZW1wbGF0ZSggYXJyYXkoICd1bHRpbWF0ZS1tZW1iZXIvZW1haWxzLycgLiAka2V5IC4gJy5waHAnICkgKSA/ICRsYWJlbHNbJ3llcyddIDogJGxhYmVsc1snbm8nXSwKCQkJCSk7CgkJCX0KCQl9CgoJCS8vIEFwcGVhcmFuY2Ugc2V0dGluZ3MuCgkJLy8gPiBQcm9maWxlIHNlY3Rpb24uCgkJJGljb25zX2Rpc3BsYXlfb3B0aW9ucyAgICAgICA9IGFycmF5KAoJCQknZmllbGQnID0+IF9fKCAnU2hvdyBpbnNpZGUgdGV4dCBmaWVsZCcsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCSdsYWJlbCcgPT4gX18oICdTaG93IHdpdGggbGFiZWwnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQknb2ZmJyAgID0+IF9fKCAnVHVybiBvZmYnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCSk7CgkJJHByb2ZpbGVfaGVhZGVyX21lbnVfb3B0aW9ucyA9IGFycmF5KAoJCQknYmMnID0+IF9fKCAnQm90dG9tIG9mIEljb24nLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQknbGMnID0+IF9fKCAnTGVmdCBvZiBJY29uIChyaWdodCBmb3IgUlRMKScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJKTsKCgkJJHByb2ZpbGVfdGVtcGxhdGVzICAgICAgPSBVTSgpLT5zaG9ydGNvZGVzKCktPmdldF90ZW1wbGF0ZXMoICdwcm9maWxlJyApOwoJCSRwcm9maWxlX3RlbXBsYXRlX2tleSAgID0gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdwcm9maWxlX3RlbXBsYXRlJyApOwoJCSRwcm9maWxlX3RlbXBsYXRlX3RpdGxlID0gYXJyYXlfa2V5X2V4aXN0cyggJHByb2ZpbGVfdGVtcGxhdGVfa2V5LCAkcHJvZmlsZV90ZW1wbGF0ZXMgKSA/ICRwcm9maWxlX3RlbXBsYXRlc1sgJHByb2ZpbGVfdGVtcGxhdGVfa2V5IF0gOiBfXyggJ05vIHRlbXBsYXRlIG5hbWUnLCAndWx0aW1hdGUtbWVtYmVyJyApOwoJCSRwcm9maWxlX3NlY29uZGFyeV9idG4gID0gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdwcm9maWxlX3NlY29uZGFyeV9idG4nICk7CgkJJHByb2ZpbGVfY292ZXJfZW5hYmxlZCAgPSBVTSgpLT5vcHRpb25zKCktPmdldCggJ3Byb2ZpbGVfY292ZXJfZW5hYmxlZCcgKTsKCQkkcHJvZmlsZV9lbXB0eV90ZXh0ICAgICA9IFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAncHJvZmlsZV9lbXB0eV90ZXh0JyApOwoKCQkkYXBwZWFyYW5jZV9zZXR0aW5ncyA9IGFycmF5KAoJCQkndW0tcHJvZmlsZV90ZW1wbGF0ZScgICAgICAgICA9PiBhcnJheSgKCQkJCSdsYWJlbCcgPT4gX18oICdQcm9maWxlIERlZmF1bHQgVGVtcGxhdGUnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJLy8gdHJhbnNsYXRvcnM6ICUxJHMgLSBwcm9maWxlIHRlbXBsYXRlIG5hbWUsICUyJHMgLSBwcm9maWxlIHRlbXBsYXRlIGZpbGVuYW1lCgkJCQkndmFsdWUnID0+IHNwcmludGYoIF9fKCAnJTEkcyAoZmlsZW5hbWU6ICUyJHMucGhwKScsICd1bHRpbWF0ZS1tZW1iZXInICksICRwcm9maWxlX3RlbXBsYXRlX3RpdGxlLCAkcHJvZmlsZV90ZW1wbGF0ZV9rZXkgKSwKCQkJKSwKCQkJJ3VtLXByb2ZpbGVfbWF4X3dpZHRoJyAgICAgICAgPT4gYXJyYXkoCgkJCQknbGFiZWwnID0+IF9fKCAnUHJvZmlsZSBNYXhpbXVtIFdpZHRoJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCSd2YWx1ZScgPT4gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdwcm9maWxlX21heF93aWR0aCcgKSwKCQkJKSwKCQkJJ3VtLXByb2ZpbGVfYXJlYV9tYXhfd2lkdGgnICAgPT4gYXJyYXkoCgkJCQknbGFiZWwnID0+IF9fKCAnUHJvZmlsZSBBcmVhIE1heGltdW0gV2lkdGgnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJJ3ZhbHVlJyA9PiBVTSgpLT5vcHRpb25zKCktPmdldCggJ3Byb2ZpbGVfYXJlYV9tYXhfd2lkdGgnICksCgkJCSksCgkJCSd1bS1wcm9maWxlX2ljb25zJyAgICAgICAgICAgID0+IGFycmF5KAoJCQkJJ2xhYmVsJyA9PiBfXyggJ1Byb2ZpbGUgRmllbGQgSWNvbnMnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJJ3ZhbHVlJyA9PiAkaWNvbnNfZGlzcGxheV9vcHRpb25zWyBVTSgpLT5vcHRpb25zKCktPmdldCggJ3Byb2ZpbGVfaWNvbnMnICkgXSwKCQkJKSwKCQkJJ3VtLXByb2ZpbGVfcHJpbWFyeV9idG5fd29yZCcgPT4gYXJyYXkoCgkJCQknbGFiZWwnID0+IF9fKCAnUHJvZmlsZSBQcmltYXJ5IEJ1dHRvbiBUZXh0JywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCSd2YWx1ZScgPT4gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdwcm9maWxlX3ByaW1hcnlfYnRuX3dvcmQnICksCgkJCSksCgkJCSd1bS1wcm9maWxlX3NlY29uZGFyeV9idG4nICAgID0+IGFycmF5KAoJCQkJJ2xhYmVsJyA9PiBfXyggJ1Byb2ZpbGUgU2Vjb25kYXJ5IEJ1dHRvbicsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkndmFsdWUnID0+ICRwcm9maWxlX3NlY29uZGFyeV9idG4gPyAkbGFiZWxzWyd5ZXMnXSA6ICRsYWJlbHNbJ25vJ10sCgkJCSksCgkJKTsKCQlpZiAoICEgZW1wdHkoICRwcm9maWxlX3NlY29uZGFyeV9idG4gKSApIHsKCQkJJGFwcGVhcmFuY2Vfc2V0dGluZ3NbJ3VtLXByb2ZpbGVfc2Vjb25kYXJ5X2J0bl93b3JkJ10gPSBhcnJheSgKCQkJCSdsYWJlbCcgPT4gX18oICdQcm9maWxlIFNlY29uZGFyeSBCdXR0b24gVGV4dCAnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJJ3ZhbHVlJyA9PiBVTSgpLT5vcHRpb25zKCktPmdldCggJ3Byb2ZpbGVfc2Vjb25kYXJ5X2J0bl93b3JkJyApLAoJCQkpOwoJCX0KCgkJJGRlZmF1bHRfYXZhdGFyID0gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdkZWZhdWx0X2F2YXRhcicgKTsKCQkkZGVmYXVsdF9jb3ZlciAgPSBVTSgpLT5vcHRpb25zKCktPmdldCggJ2RlZmF1bHRfY292ZXInICk7CgoJCSRhcHBlYXJhbmNlX3NldHRpbmdzWyd1bS1kZWZhdWx0X2F2YXRhciddICAgICAgICAgICAgICAgPSBhcnJheSgKCQkJJ2xhYmVsJyA9PiBfXyggJ0RlZmF1bHQgUHJvZmlsZSBQaG90bycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCSd2YWx1ZScgPT4gISBlbXB0eSggJGRlZmF1bHRfYXZhdGFyWyd1cmwnXSApID8gJGRlZmF1bHRfYXZhdGFyWyd1cmwnXSA6ICcnLAoJCSk7CgkJJGFwcGVhcmFuY2Vfc2V0dGluZ3NbJ3VtLWRlZmF1bHRfY292ZXInXSAgICAgICAgICAgICAgICA9IGFycmF5KAoJCQknbGFiZWwnID0+IF9fKCAnRGVmYXVsdCBDb3ZlciBQaG90bycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCSd2YWx1ZScgPT4gISBlbXB0eSggJGRlZmF1bHRfY292ZXJbJ3VybCddICkgPyAkZGVmYXVsdF9jb3ZlclsndXJsJ10gOiAnJywKCQkpOwoJCSRhcHBlYXJhbmNlX3NldHRpbmdzWyd1bS1kaXNhYmxlX3Byb2ZpbGVfcGhvdG9fdXBsb2FkJ10gPSBhcnJheSgKCQkJJ2xhYmVsJyA9PiBfXyggJ0Rpc2FibGUgUHJvZmlsZSBQaG90byBVcGxvYWQnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkndmFsdWUnID0+IFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAnZGlzYWJsZV9wcm9maWxlX3Bob3RvX3VwbG9hZCcgKSA/ICRsYWJlbHNbJ3llcyddIDogJGxhYmVsc1snbm8nXSwKCQkpOwoJCSRhcHBlYXJhbmNlX3NldHRpbmdzWyd1bS1wcm9maWxlX3Bob3Rvc2l6ZSddICAgICAgICAgICAgPSBhcnJheSgKCQkJJ2xhYmVsJyA9PiBfXyggJ1Byb2ZpbGUgUGhvdG8gU2l6ZScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCSd2YWx1ZScgPT4gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdwcm9maWxlX3Bob3Rvc2l6ZScgKSAuICd4JyAuIFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAncHJvZmlsZV9waG90b3NpemUnICkgLiAncHgnLAoJCSk7CgkJJGFwcGVhcmFuY2Vfc2V0dGluZ3NbJ3VtLXByb2ZpbGVfY292ZXJfZW5hYmxlZCddICAgICAgICA9IGFycmF5KAoJCQknbGFiZWwnID0+IF9fKCAnUHJvZmlsZSBDb3ZlciBQaG90b3MnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkndmFsdWUnID0+ICRwcm9maWxlX2NvdmVyX2VuYWJsZWQgPyAkbGFiZWxzWyd5ZXMnXSA6ICRsYWJlbHNbJ25vJ10sCgkJKTsKCQlpZiAoICEgZW1wdHkoICRwcm9maWxlX2NvdmVyX2VuYWJsZWQgKSApIHsKCQkJJGFwcGVhcmFuY2Vfc2V0dGluZ3NbJ3VtLXByb2ZpbGVfY292ZXJzaXplJ10gICA9IGFycmF5KAoJCQkJJ2xhYmVsJyA9PiBfXyggJ1Byb2ZpbGUgQ292ZXIgU2l6ZScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkndmFsdWUnID0+IFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAncHJvZmlsZV9jb3ZlcnNpemUnICkgLiAncHgnLAoJCQkpOwoJCQkkYXBwZWFyYW5jZV9zZXR0aW5nc1sndW0tcHJvZmlsZV9jb3Zlcl9yYXRpbyddID0gYXJyYXkoCgkJCQknbGFiZWwnID0+IF9fKCAnUHJvZmlsZSBDb3ZlciBSYXRpbycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkndmFsdWUnID0+IFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAncHJvZmlsZV9jb3Zlcl9yYXRpbycgKSwKCQkJKTsKCQl9CgkJJGFwcGVhcmFuY2Vfc2V0dGluZ3NbJ3VtLXByb2ZpbGVfc2hvd19tZXRhaWNvbiddICAgICA9IGFycmF5KAoJCQknbGFiZWwnID0+IF9fKCAnUHJvZmlsZSBIZWFkZXIgTWV0YSBUZXh0IEljb24nLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkndmFsdWUnID0+IFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAncHJvZmlsZV9zaG93X21ldGFpY29uJyApID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCSk7CgkJJGFwcGVhcmFuY2Vfc2V0dGluZ3NbJ3VtLXByb2ZpbGVfc2hvd19uYW1lJ10gICAgICAgICA9IGFycmF5KAoJCQknbGFiZWwnID0+IF9fKCAnU2hvdyBkaXNwbGF5IG5hbWUgaW4gcHJvZmlsZSBoZWFkZXInLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkndmFsdWUnID0+IFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAncHJvZmlsZV9zaG93X25hbWUnICkgPyAkbGFiZWxzWyd5ZXMnXSA6ICRsYWJlbHNbJ25vJ10sCgkJKTsKCQkkYXBwZWFyYW5jZV9zZXR0aW5nc1sndW0tcHJvZmlsZV9zaG93X3NvY2lhbF9saW5rcyddID0gYXJyYXkoCgkJCSdsYWJlbCcgPT4gX18oICdTaG93IHNvY2lhbCBsaW5rcyBpbiBwcm9maWxlIGhlYWRlcicsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCSd2YWx1ZScgPT4gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdwcm9maWxlX3Nob3dfc29jaWFsX2xpbmtzJyApID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCSk7CgkJJGFwcGVhcmFuY2Vfc2V0dGluZ3NbJ3VtLXByb2ZpbGVfc2hvd19iaW8nXSAgICAgICAgICA9IGFycmF5KAoJCQknbGFiZWwnID0+IF9fKCAnU2hvdyB1c2VyIGRlc2NyaXB0aW9uIGluIGhlYWRlcicsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCSd2YWx1ZScgPT4gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdwcm9maWxlX3Nob3dfYmlvJyApID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCSk7CgkJJGFwcGVhcmFuY2Vfc2V0dGluZ3NbJ3VtLXByb2ZpbGVfc2hvd19odG1sX2JpbyddICAgICA9IGFycmF5KAoJCQknbGFiZWwnID0+IF9fKCAnRW5hYmxlIEhUTUwgc3VwcG9ydCBmb3IgdXNlciBkZXNjcmlwdGlvbicsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCSd2YWx1ZScgPT4gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdwcm9maWxlX3Nob3dfaHRtbF9iaW8nICkgPyAkbGFiZWxzWyd5ZXMnXSA6ICRsYWJlbHNbJ25vJ10sCgkJKTsKCQkkYXBwZWFyYW5jZV9zZXR0aW5nc1sndW0tcHJvZmlsZV9iaW9fbWF4Y2hhcnMnXSAgICAgID0gYXJyYXkoCgkJCSdsYWJlbCcgPT4gX18oICdVc2VyIGRlc2NyaXB0aW9uIG1heGltdW0gY2hhcnMnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkndmFsdWUnID0+IFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAncHJvZmlsZV9iaW9fbWF4Y2hhcnMnICksCgkJKTsKCQkkYXBwZWFyYW5jZV9zZXR0aW5nc1sndW0tcHJvZmlsZV9oZWFkZXJfbWVudSddICAgICAgID0gYXJyYXkoCgkJCSdsYWJlbCcgPT4gX18oICdQcm9maWxlIEhlYWRlciBNZW51IFBvc2l0aW9uJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJJ3ZhbHVlJyA9PiAkcHJvZmlsZV9oZWFkZXJfbWVudV9vcHRpb25zWyBVTSgpLT5vcHRpb25zKCktPmdldCggJ3Byb2ZpbGVfaGVhZGVyX21lbnUnICkgXSwKCQkpOwoJCSRhcHBlYXJhbmNlX3NldHRpbmdzWyd1bS1wcm9maWxlX2VtcHR5X3RleHQnXSAgICAgICAgPSBhcnJheSgKCQkJJ2xhYmVsJyA9PiBfXyggJ1Nob3cgYSBjdXN0b20gbWVzc2FnZSBpZiBwcm9maWxlIGlzIGVtcHR5JywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJJ3ZhbHVlJyA9PiAkcHJvZmlsZV9lbXB0eV90ZXh0ID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCSk7CgkJaWYgKCAhIGVtcHR5KCAkcHJvZmlsZV9lbXB0eV90ZXh0ICkgKSB7CgkJCSRhcHBlYXJhbmNlX3NldHRpbmdzWyd1bS1wcm9maWxlX2VtcHR5X3RleHRfZW1vJ10gPSBhcnJheSgKCQkJCSdsYWJlbCcgPT4gX18oICdTaG93IHRoZSBlbW90aWNvbicsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkndmFsdWUnID0+IFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAncHJvZmlsZV9lbXB0eV90ZXh0X2VtbycgKSA/ICRsYWJlbHNbJ3llcyddIDogJGxhYmVsc1snbm8nXSwKCQkJKTsKCQl9CgoJCS8vID4gUHJvZmlsZSBNZW51IHNlY3Rpb24uCgkJJHByb2ZpbGVfbWVudSA9IFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAncHJvZmlsZV9tZW51JyApOwoKCQkkYXBwZWFyYW5jZV9zZXR0aW5nc1sndW0tcHJvZmlsZV9tZW51J10gPSBhcnJheSgKCQkJJ2xhYmVsJyA9PiBfXyggJ0VuYWJsZSBwcm9maWxlIG1lbnUnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkndmFsdWUnID0+ICRwcm9maWxlX21lbnUgPyAkbGFiZWxzWyd5ZXMnXSA6ICRsYWJlbHNbJ25vJ10sCgkJKTsKCgkJaWYgKCAhIGVtcHR5KCAkcHJvZmlsZV9tZW51ICkgKSB7CgkJCS8qKgoJCQkgKiBGaWx0ZXJzIGEgcHJpdmFjeSBsaXN0IGV4dGVuZC4KCQkJICoKCQkJICogQHNpbmNlIDIuNy4wCgkJCSAqIEBob29rIHVtX3Byb2ZpbGVfdGFic19wcml2YWN5X2xpc3QKCQkJICoKCQkJICogQHBhcmFtIHthcnJheX0gJHByaXZhY3lfb3B0aW9uIEFkZCBvcHRpb25zIGZvciBwcm9maWxlIHRhYnMnIHByaXZhY3kuCgkJCSAqCgkJCSAqIEByZXR1cm4ge2FycmF5fSBPcHRpb25zIGZvciBwcm9maWxlIHRhYnMnIHByaXZhY3kuCgkJCSAqCgkJCSAqIEBleGFtcGxlIDxjYXB0aW9uPkFkZCBvcHRpb25zIGZvciBwcm9maWxlIHRhYnMnIHByaXZhY3kuPC9jYXB0aW9uPgoJCQkgKiBmdW5jdGlvbiB1bV9wcm9maWxlX21lbnVfbGlua19hdHRycyggJHByaXZhY3lfb3B0aW9uICkgewoJCQkgKiAgICAgLy8geW91ciBjb2RlIGhlcmUKCQkJICogICAgIHJldHVybiAkcHJpdmFjeV9vcHRpb247CgkJCSAqIH0KCQkJICogYWRkX2ZpbHRlciggJ3VtX3Byb2ZpbGVfdGFic19wcml2YWN5X2xpc3QnLCAndW1fcHJvZmlsZV90YWJzX3ByaXZhY3lfbGlzdCcsIDEwLCAxICk7CgkJCSAqLwoJCQkkcHJpdmFjeV9vcHRpb24gPSBVTSgpLT5wcm9maWxlKCktPnRhYnNfcHJpdmFjeSgpOwoKCQkJJHRhYnMgPSBVTSgpLT5wcm9maWxlKCktPnRhYnMoKTsKCQkJZm9yZWFjaCAoICR0YWJzIGFzICRpZCA9PiAkdGFiICkgewoJCQkJaWYgKCAhIGVtcHR5KCAkdGFiWydoaWRkZW4nXSApICkgewoJCQkJCWNvbnRpbnVlOwoJCQkJfQoKCQkJCSR0YWJfZW5hYmxlZCA9IFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAncHJvZmlsZV90YWJfJyAuICRpZCApOwoKCQkJCSRhcHBlYXJhbmNlX3NldHRpbmdzWyAndW0tcHJvZmlsZV90YWJfJyAuICRpZCBdID0gYXJyYXkoCgkJCQkJLy8gdHJhbnNsYXRvcnM6ICVzIFByb2ZpbGUgVGFiIFRpdGxlCgkJCQkJJ2xhYmVsJyA9PiBzcHJpbnRmKCBfXyggJyVzIFRhYicsICd1bHRpbWF0ZS1tZW1iZXInICksICR0YWJbJ25hbWUnXSApLAoJCQkJCSd2YWx1ZScgPT4gJHRhYl9lbmFibGVkID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCQkJKTsKCgkJCQlpZiAoICEgaXNzZXQoICR0YWJbJ2RlZmF1bHRfcHJpdmFjeSddICkgJiYgISBlbXB0eSggJHRhYl9lbmFibGVkICkgKSB7CgkJCQkJJHByaXZhY3kgPSBVTSgpLT5vcHRpb25zKCktPmdldCggJ3Byb2ZpbGVfdGFiXycgLiAkaWQgLiAnX3ByaXZhY3knICk7CgkJCQkJaWYgKCBpc19udW1lcmljKCAkcHJpdmFjeSApICkgewoJCQkJCQkkYXBwZWFyYW5jZV9zZXR0aW5nc1sgJ3VtLXByb2ZpbGVfdGFiXycgLiAkaWQgLiAnX3ByaXZhY3knIF0gPSBhcnJheSgKCQkJCQkJCS8vIHRyYW5zbGF0b3JzOiAlcyBQcm9maWxlIFRhYiBUaXRsZQoJCQkJCQkJJ2xhYmVsJyA9PiBzcHJpbnRmKCBfXyggJ1dobyBjYW4gc2VlICVzIFRhYj8nLCAndWx0aW1hdGUtbWVtYmVyJyApLCAkdGFiWyduYW1lJ10gKSwKCQkJCQkJCSd2YWx1ZScgPT4gJHByaXZhY3lfb3B0aW9uWyBVTSgpLT5vcHRpb25zKCktPmdldCggJ3Byb2ZpbGVfdGFiXycgLiAkaWQgLiAnX3ByaXZhY3knICkgXSwKCQkJCQkJKTsKCQkJCQl9CgkJCQl9CgkJCX0KCQkJLyoqCgkJCSAqIEZpbHRlcnMgYXBwZWFyYW5jZSBzZXR0aW5ncyBmb3IgU2l0ZSBIZWFsdGggZXh0ZW5kLgoJCQkgKgoJCQkgKiBAc2luY2UgMi43LjAKCQkJICogQGhvb2sgdW1fcHJvZmlsZV90YWJzX3NpdGVfaGVhbHRoCgkJCSAqCgkJCSAqIEBwYXJhbSB7YXJyYXl9ICRhcHBlYXJhbmNlX3NldHRpbmdzIEFwcGVhcmFuY2Ugc2V0dGluZ3MgZm9yIFNpdGUgSGVhbHRoLgoJCQkgKgoJCQkgKiBAcmV0dXJuIHthcnJheX0gQXBwZWFyYW5jZSBzZXR0aW5ncyBmb3IgU2l0ZSBIZWFsdGguCgkJCSAqCgkJCSAqIEBleGFtcGxlIDxjYXB0aW9uPkFkZCBvcHRpb25zIGZvciBhcHBlYXJhbmNlIHNldHRpbmdzIGZvciBTaXRlIEhlYWx0aC48L2NhcHRpb24+CgkJCSAqIGZ1bmN0aW9uIHVtX3Byb2ZpbGVfdGFic19zaXRlX2hlYWx0aCggJGFwcGVhcmFuY2Vfc2V0dGluZ3MgKSB7CgkJCSAqICAgICAvLyB5b3VyIGNvZGUgaGVyZQoJCQkgKiAgICAgcmV0dXJuICRhcHBlYXJhbmNlX3NldHRpbmdzOwoJCQkgKiB9CgkJCSAqIGFkZF9maWx0ZXIoICd1bV9wcm9maWxlX3RhYnNfc2l0ZV9oZWFsdGgnLCAndW1fcHJvZmlsZV90YWJzX3NpdGVfaGVhbHRoJywgMTAsIDEgKTsKCQkJICovCgkJCSRhcHBlYXJhbmNlX3NldHRpbmdzID0gYXBwbHlfZmlsdGVycyggJ3VtX3Byb2ZpbGVfdGFic19zaXRlX2hlYWx0aCcsICRhcHBlYXJhbmNlX3NldHRpbmdzICk7CgoJCQkvKioKCQkJICogRmlsdGVycyB1c2VyIHByb2ZpbGUgdGFicwoJCQkgKgoJCQkgKiBAc2luY2UgMi43LjAKCQkJICogQGhvb2sgdW1fcHJvZmlsZV90YWJzCgkJCSAqCgkJCSAqIEBwYXJhbSB7YXJyYXl9ICR0YWJzIHRhYnMgbGlzdC4KCQkJICoKCQkJICogQHJldHVybiB7YXJyYXl9IHRhYnMgbGlzdC4KCQkJICoKCQkJICogQGV4YW1wbGUgPGNhcHRpb24+QWRkIG9wdGlvbnMgZm9yIHByb2ZpbGUgdGFicycgcHJpdmFjeS48L2NhcHRpb24+CgkJCSAqIGZ1bmN0aW9uIHVtX3Byb2ZpbGVfdGFicyggJHRhYnMgKSB7CgkJCSAqICAgICAvLyB5b3VyIGNvZGUgaGVyZQoJCQkgKiAgICAgcmV0dXJuICR0YWJzOwoJCQkgKiB9CgkJCSAqIGFkZF9maWx0ZXIoICd1bV9wcm9maWxlX3RhYnMnLCAndW1fcHJvZmlsZV90YWJzJywgMTAsIDEgKTsKCQkJICovCgkJCSR0YWJzX29wdGlvbnMgPSBhcHBseV9maWx0ZXJzKAoJCQkJJ3VtX3Byb2ZpbGVfdGFicycsCgkJCQlhcnJheSgKCQkJCQknbWFpbicgICAgID0+IGFycmF5KAoJCQkJCQknbmFtZScgPT4gX18oICdBYm91dCcsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCSdpY29uJyA9PiAndW0tZmFpY29uLXVzZXInLAoJCQkJCSksCgkJCQkJJ3Bvc3RzJyAgICA9PiBhcnJheSgKCQkJCQkJJ25hbWUnID0+IF9fKCAnUG9zdHMnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQknaWNvbicgPT4gJ3VtLWZhaWNvbi1wZW5jaWwnLAoJCQkJCSksCgkJCQkJJ2NvbW1lbnRzJyA9PiBhcnJheSgKCQkJCQkJJ25hbWUnID0+IF9fKCAnQ29tbWVudHMnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQknaWNvbicgPT4gJ3VtLWZhaWNvbi1jb21tZW50JywKCQkJCQkpLAoJCQkJKQoJCQkpOwoKCQkJJGFwcGVhcmFuY2Vfc2V0dGluZ3NbJ3VtLXByb2ZpbGVfbWVudV9kZWZhdWx0X3RhYiddID0gYXJyYXkoCgkJCQknbGFiZWwnID0+IF9fKCAnUHJvZmlsZSBtZW51IGRlZmF1bHQgdGFiJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCSd2YWx1ZScgPT4gJHRhYnNfb3B0aW9uc1sgVU0oKS0+b3B0aW9ucygpLT5nZXQoICdwcm9maWxlX21lbnVfZGVmYXVsdF90YWInICkgXSwKCQkJKTsKCQkJJGFwcGVhcmFuY2Vfc2V0dGluZ3NbJ3VtLXByb2ZpbGVfbWVudV9pY29ucyddICAgICAgID0gYXJyYXkoCgkJCQknbGFiZWwnID0+IF9fKCAnRW5hYmxlIG1lbnUgaWNvbnMgaW4gZGVza3RvcCB2aWV3JywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCSd2YWx1ZScgPT4gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdwcm9maWxlX21lbnVfaWNvbnMnICkgPyAkbGFiZWxzWyd5ZXMnXSA6ICRsYWJlbHNbJ25vJ10sCgkJCSk7CgkJfQoKCQkvLyA+IFJlZ2lzdHJhdGlvbiBGb3JtIHNlY3Rpb24uCgkJJHJlZ2lzdGVyX3RlbXBsYXRlcyAgICAgID0gVU0oKS0+c2hvcnRjb2RlcygpLT5nZXRfdGVtcGxhdGVzKCAncmVnaXN0ZXInICk7CgkJJHJlZ2lzdGVyX3RlbXBsYXRlX2tleSAgID0gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdyZWdpc3Rlcl90ZW1wbGF0ZScgKTsKCQkkcmVnaXN0ZXJfdGVtcGxhdGVfdGl0bGUgPSBhcnJheV9rZXlfZXhpc3RzKCAkcmVnaXN0ZXJfdGVtcGxhdGVfa2V5LCAkcmVnaXN0ZXJfdGVtcGxhdGVzICkgPyAkcmVnaXN0ZXJfdGVtcGxhdGVzWyAkcmVnaXN0ZXJfdGVtcGxhdGVfa2V5IF0gOiBfXyggJ05vIHRlbXBsYXRlIG5hbWUnLCAndWx0aW1hdGUtbWVtYmVyJyApOwoJCSRyZWdpc3Rlcl9zZWNvbmRhcnlfYnRuICA9IFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAncmVnaXN0ZXJfc2Vjb25kYXJ5X2J0bicgKTsKCgkJJGZvcm1fYWxpZ25fb3B0aW9ucyA9IGFycmF5KAoJCQknY2VudGVyJyA9PiBfXyggJ0NlbnRlcmVkJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJJ2xlZnQnICAgPT4gX18oICdMZWZ0IGFsaWduZWQnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkncmlnaHQnICA9PiBfXyggJ1JpZ2h0IGFsaWduZWQnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCSk7CgoJCSRhcHBlYXJhbmNlX3NldHRpbmdzWyd1bS1yZWdpc3Rlcl90ZW1wbGF0ZSddICAgICAgICAgPSBhcnJheSgKCQkJJ2xhYmVsJyA9PiBfXyggJ1JlZ2lzdHJhdGlvbiBEZWZhdWx0IFRlbXBsYXRlJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJLy8gdHJhbnNsYXRvcnM6ICUxJHMgLSByZWdpc3RlciB0ZW1wbGF0ZSBuYW1lLCAlMiRzIC0gcmVnaXN0ZXIgdGVtcGxhdGUgZmlsZW5hbWUKCQkJJ3ZhbHVlJyA9PiBzcHJpbnRmKCBfXyggJyUxJHMgKGZpbGVuYW1lOiAlMiRzLnBocCknLCAndWx0aW1hdGUtbWVtYmVyJyApLCAkcmVnaXN0ZXJfdGVtcGxhdGVfdGl0bGUsICRyZWdpc3Rlcl90ZW1wbGF0ZV9rZXkgKSwKCQkpOwoJCSRhcHBlYXJhbmNlX3NldHRpbmdzWyd1bS1yZWdpc3Rlcl9tYXhfd2lkdGgnXSAgICAgICAgPSBhcnJheSgKCQkJJ2xhYmVsJyA9PiBfXyggJ1JlZ2lzdHJhdGlvbiBNYXhpbXVtIFdpZHRoJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJJ3ZhbHVlJyA9PiBVTSgpLT5vcHRpb25zKCktPmdldCggJ3JlZ2lzdGVyX21heF93aWR0aCcgKSwKCQkpOwoJCSRhcHBlYXJhbmNlX3NldHRpbmdzWyd1bS1yZWdpc3Rlcl9hbGlnbiddICAgICAgICAgICAgPSBhcnJheSgKCQkJJ2xhYmVsJyA9PiBfXyggJ1JlZ2lzdHJhdGlvbiBTaG9ydGNvZGUgQWxpZ25tZW50JywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJJ3ZhbHVlJyA9PiAkZm9ybV9hbGlnbl9vcHRpb25zWyBVTSgpLT5vcHRpb25zKCktPmdldCggJ3JlZ2lzdGVyX2FsaWduJyApIF0sCgkJKTsKCQkkYXBwZWFyYW5jZV9zZXR0aW5nc1sndW0tcmVnaXN0ZXJfaWNvbnMnXSAgICAgICAgICAgID0gYXJyYXkoCgkJCSdsYWJlbCcgPT4gX18oICdSZWdpc3RyYXRpb24gRmllbGQgSWNvbnMnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkndmFsdWUnID0+ICRpY29uc19kaXNwbGF5X29wdGlvbnNbIFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAncmVnaXN0ZXJfaWNvbnMnICkgXSwKCQkpOwoJCSRhcHBlYXJhbmNlX3NldHRpbmdzWyd1bS1yZWdpc3Rlcl9wcmltYXJ5X2J0bl93b3JkJ10gPSBhcnJheSgKCQkJJ2xhYmVsJyA9PiBfXyggJ1JlZ2lzdHJhdGlvbiBQcmltYXJ5IEJ1dHRvbiBUZXh0ICcsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCSd2YWx1ZScgPT4gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdyZWdpc3Rlcl9wcmltYXJ5X2J0bl93b3JkJyApLAoJCSk7CgkJJGFwcGVhcmFuY2Vfc2V0dGluZ3NbJ3VtLXJlZ2lzdGVyX3NlY29uZGFyeV9idG4nXSAgICA9IGFycmF5KAoJCQknbGFiZWwnID0+IF9fKCAnUmVnaXN0cmF0aW9uIFNlY29uZGFyeSBCdXR0b24nLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkndmFsdWUnID0+ICRyZWdpc3Rlcl9zZWNvbmRhcnlfYnRuID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCSk7CgkJaWYgKCAhIGVtcHR5KCAkcmVnaXN0ZXJfc2Vjb25kYXJ5X2J0biApICkgewoJCQkkYXBwZWFyYW5jZV9zZXR0aW5nc1sndW0tcmVnaXN0ZXJfc2Vjb25kYXJ5X2J0bl93b3JkJ10gPSBhcnJheSgKCQkJCSdsYWJlbCcgPT4gX18oICdSZWdpc3RyYXRpb24gU2Vjb25kYXJ5IEJ1dHRvbiBUZXh0JywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCSd2YWx1ZScgPT4gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdyZWdpc3Rlcl9zZWNvbmRhcnlfYnRuX3dvcmQnICksCgkJCSk7CgkJCSRhcHBlYXJhbmNlX3NldHRpbmdzWyd1bS1yZWdpc3Rlcl9zZWNvbmRhcnlfYnRuX3VybCddICA9IGFycmF5KAoJCQkJJ2xhYmVsJyA9PiBfXyggJ1JlZ2lzdHJhdGlvbiBTZWNvbmRhcnkgQnV0dG9uIFVSTCcsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkndmFsdWUnID0+IFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAncmVnaXN0ZXJfc2Vjb25kYXJ5X2J0bl91cmwnICksCgkJCSk7CgkJfQoJCSRhcHBlYXJhbmNlX3NldHRpbmdzWyd1bS1yZWdpc3Rlcl9yb2xlJ10gPSBhcnJheSgKCQkJJ2xhYmVsJyA9PiBfXyggJ1JlZ2lzdHJhdGlvbiBEZWZhdWx0IFJvbGUnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkndmFsdWUnID0+ICEgZW1wdHkoIFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAncmVnaXN0ZXJfcm9sZScgKSApID8gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdyZWdpc3Rlcl9yb2xlJyApIDogX18oICdEZWZhdWx0JywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkpOwoKCQkvLyA+IExvZ2luIEZvcm0gc2VjdGlvbi4KCQkkbG9naW5fdGVtcGxhdGVzICAgICAgPSBVTSgpLT5zaG9ydGNvZGVzKCktPmdldF90ZW1wbGF0ZXMoICdsb2dpbicgKTsKCQkkbG9naW5fdGVtcGxhdGVfa2V5ICAgPSBVTSgpLT5vcHRpb25zKCktPmdldCggJ2xvZ2luX3RlbXBsYXRlJyApOwoJCSRsb2dpbl90ZW1wbGF0ZV90aXRsZSA9IGFycmF5X2tleV9leGlzdHMoICRsb2dpbl90ZW1wbGF0ZV9rZXksICRsb2dpbl90ZW1wbGF0ZXMgKSA/ICRsb2dpbl90ZW1wbGF0ZXNbICRsb2dpbl90ZW1wbGF0ZV9rZXkgXSA6IF9fKCAnTm8gdGVtcGxhdGUgbmFtZScsICd1bHRpbWF0ZS1tZW1iZXInICk7CgkJJGxvZ2luX3NlY29uZGFyeV9idG4gID0gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdsb2dpbl9zZWNvbmRhcnlfYnRuJyApOwoKCQkkYXBwZWFyYW5jZV9zZXR0aW5nc1sndW0tbG9naW5fdGVtcGxhdGUnXSAgICAgICAgID0gYXJyYXkoCgkJCSdsYWJlbCcgPT4gX18oICdMb2dpbiBEZWZhdWx0IFRlbXBsYXRlJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJLy8gdHJhbnNsYXRvcnM6ICUxJHMgLSBsb2dpbiB0ZW1wbGF0ZSBuYW1lLCAlMiRzIC0gbG9naW4gdGVtcGxhdGUgZmlsZW5hbWUKCQkJJ3ZhbHVlJyA9PiBzcHJpbnRmKCBfXyggJyUxJHMgKGZpbGVuYW1lOiAlMiRzLnBocCknLCAndWx0aW1hdGUtbWVtYmVyJyApLCAkbG9naW5fdGVtcGxhdGVfdGl0bGUsICRsb2dpbl90ZW1wbGF0ZV9rZXkgKSwKCQkpOwoJCSRhcHBlYXJhbmNlX3NldHRpbmdzWyd1bS1sb2dpbl9tYXhfd2lkdGgnXSAgICAgICAgPSBhcnJheSgKCQkJJ2xhYmVsJyA9PiBfXyggJ0xvZ2luIE1heGltdW0gV2lkdGgnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkndmFsdWUnID0+IFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAnbG9naW5fbWF4X3dpZHRoJyApLAoJCSk7CgkJJGFwcGVhcmFuY2Vfc2V0dGluZ3NbJ3VtLWxvZ2luX2FsaWduJ10gICAgICAgICAgICA9IGFycmF5KAoJCQknbGFiZWwnID0+IF9fKCAnTG9naW4gU2hvcnRjb2RlIEFsaWdubWVudCcsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCSd2YWx1ZScgPT4gJGZvcm1fYWxpZ25fb3B0aW9uc1sgVU0oKS0+b3B0aW9ucygpLT5nZXQoICdsb2dpbl9hbGlnbicgKSBdLAoJCSk7CgkJJGFwcGVhcmFuY2Vfc2V0dGluZ3NbJ3VtLWxvZ2luX2ljb25zJ10gICAgICAgICAgICA9IGFycmF5KAoJCQknbGFiZWwnID0+IF9fKCAnTG9naW4gRmllbGQgSWNvbnMnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkndmFsdWUnID0+ICRpY29uc19kaXNwbGF5X29wdGlvbnNbIFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAnbG9naW5faWNvbnMnICkgXSwKCQkpOwoJCSRhcHBlYXJhbmNlX3NldHRpbmdzWyd1bS1sb2dpbl9wcmltYXJ5X2J0bl93b3JkJ10gPSBhcnJheSgKCQkJJ2xhYmVsJyA9PiBfXyggJ0xvZ2luIFByaW1hcnkgQnV0dG9uIFRleHQnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkndmFsdWUnID0+IFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAnbG9naW5fcHJpbWFyeV9idG5fd29yZCcgKSwKCQkpOwoJCSRhcHBlYXJhbmNlX3NldHRpbmdzWyd1bS1sb2dpbl9zZWNvbmRhcnlfYnRuJ10gICAgPSBhcnJheSgKCQkJJ2xhYmVsJyA9PiBfXyggJ0xvZ2luIFNlY29uZGFyeSBCdXR0b24nLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkndmFsdWUnID0+ICRsb2dpbl9zZWNvbmRhcnlfYnRuID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCSk7CgkJaWYgKCAhIGVtcHR5KCAkbG9naW5fc2Vjb25kYXJ5X2J0biApICkgewoJCQkkYXBwZWFyYW5jZV9zZXR0aW5nc1sndW0tbG9naW5fc2Vjb25kYXJ5X2J0bl93b3JkJ10gPSBhcnJheSgKCQkJCSdsYWJlbCcgPT4gX18oICdMb2dpbiBTZWNvbmRhcnkgQnV0dG9uIFRleHQnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJJ3ZhbHVlJyA9PiBVTSgpLT5vcHRpb25zKCktPmdldCggJ2xvZ2luX3NlY29uZGFyeV9idG5fd29yZCcgKSwKCQkJKTsKCQkJJGFwcGVhcmFuY2Vfc2V0dGluZ3NbJ3VtLWxvZ2luX3NlY29uZGFyeV9idG5fdXJsJ10gID0gYXJyYXkoCgkJCQknbGFiZWwnID0+IF9fKCAnTG9naW4gU2Vjb25kYXJ5IEJ1dHRvbiBVUkwnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJJ3ZhbHVlJyA9PiBVTSgpLT5vcHRpb25zKCktPmdldCggJ2xvZ2luX3NlY29uZGFyeV9idG5fdXJsJyApLAoJCQkpOwoJCX0KCQkkYXBwZWFyYW5jZV9zZXR0aW5nc1sndW0tbG9naW5fZm9yZ290X3Bhc3NfbGluayddID0gYXJyYXkoCgkJCSdsYWJlbCcgPT4gX18oICdMb2dpbiBGb3Jnb3QgUGFzc3dvcmQgTGluaycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCSd2YWx1ZScgPT4gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdsb2dpbl9mb3Jnb3RfcGFzc19saW5rJyApID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCSk7CgkJJGFwcGVhcmFuY2Vfc2V0dGluZ3NbJ3VtLWxvZ2luX3Nob3dfcmVtZW1iZXJtZSddICA9IGFycmF5KAoJCQknbGFiZWwnID0+IF9fKCAnU2hvdyAiUmVtZW1iZXIgTWUiJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJJ3ZhbHVlJyA9PiBVTSgpLT5vcHRpb25zKCktPmdldCggJ2xvZ2luX3Nob3dfcmVtZW1iZXJtZScgKSA/ICRsYWJlbHNbJ3llcyddIDogJGxhYmVsc1snbm8nXSwKCQkpOwoKCQkvLyBNaXNjIHNldHRpbmdzLgoJCSRtaXNjX3NldHRpbmdzID0gYXJyYXkoCgkJCSd1bS1mb3JtX2FzdGVyaXNrJyAgICAgICAgICAgICAgICAgICA9PiBhcnJheSgKCQkJCSdsYWJlbCcgPT4gX18oICdTaG93IGFuIGFzdGVyaXNrIGZvciByZXF1aXJlZCBmaWVsZHMnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJJ3ZhbHVlJyA9PiBVTSgpLT5vcHRpb25zKCktPmdldCggJ2Zvcm1fYXN0ZXJpc2snICkgPyAkbGFiZWxzWyd5ZXMnXSA6ICRsYWJlbHNbJ25vJ10sCgkJCSksCgkJCSd1bS1wcm9maWxlX3RpdGxlJyAgICAgICAgICAgICAgICAgICA9PiBhcnJheSgKCQkJCSdsYWJlbCcgPT4gX18oICdVc2VyIFByb2ZpbGUgVGl0bGUnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJJ3ZhbHVlJyA9PiBzdHJpcHNsYXNoZXMoIFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAncHJvZmlsZV90aXRsZScgKSApLAoJCQkpLAoJCQkndW0tcHJvZmlsZV9kZXNjJyAgICAgICAgICAgICAgICAgICAgPT4gYXJyYXkoCgkJCQknbGFiZWwnID0+IF9fKCAnVXNlciBQcm9maWxlIER5bmFtaWMgTWV0YSBEZXNjcmlwdGlvbicsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkndmFsdWUnID0+IHN0cmlwc2xhc2hlcyggVU0oKS0+b3B0aW9ucygpLT5nZXQoICdwcm9maWxlX2Rlc2MnICkgKSwKCQkJKSwKCQkJJ3VtLXVtX3Byb2ZpbGVfb2JqZWN0X2NhY2hlX3N0b3AnICAgID0+IGFycmF5KAoJCQkJJ2xhYmVsJyA9PiBfXyggJ0Rpc2FibGUgQ2FjaGUgVXNlciBQcm9maWxlJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCSd2YWx1ZScgPT4gVU0oKS0+b3B0aW9ucygpLT5nZXQoICd1bV9wcm9maWxlX29iamVjdF9jYWNoZV9zdG9wJyApID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCQkpLAoJCQkndW0tZW5hYmxlX2Jsb2NrcycgICAgICAgICAgICAgICAgICAgPT4gYXJyYXkoCgkJCQknbGFiZWwnID0+IF9fKCAnRW5hYmxlIEd1dGVuYmVyZyBCbG9ja3MnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJJ3ZhbHVlJyA9PiBVTSgpLT5vcHRpb25zKCktPmdldCggJ2VuYWJsZV9ibG9ja3MnICkgPyAkbGFiZWxzWyd5ZXMnXSA6ICRsYWJlbHNbJ25vJ10sCgkJCSksCgkJCSd1bS1yZXN0X2FwaV92ZXJzaW9uJyAgICAgICAgICAgICAgICA9PiBhcnJheSgKCQkJCSdsYWJlbCcgPT4gX18oICdSRVNUIEFQSSB2ZXJzaW9uJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCSd2YWx1ZScgPT4gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdyZXN0X2FwaV92ZXJzaW9uJyApLAoJCQkpLAoJCQkndW0tZGlzYWJsZV9yZXN0cmljdGlvbl9wcmVfcXVlcmllcycgPT4gYXJyYXkoCgkJCQknbGFiZWwnID0+IF9fKCAnRGlzYWJsZSBwcmUtcXVlcmllcyBmb3IgcmVzdHJpY3Rpb24gY29udGVudCBsb2dpYyAoYWR2YW5jZWQpJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCSd2YWx1ZScgPT4gVU0oKS0+b3B0aW9ucygpLT5nZXQoICdkaXNhYmxlX3Jlc3RyaWN0aW9uX3ByZV9xdWVyaWVzJyApID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCQkpLAoJCQkndW0tbWVtYmVyX2RpcmVjdG9yeV9vd25fdGFibGUnICAgICAgPT4gYXJyYXkoCgkJCQknbGFiZWwnID0+IF9fKCAnRW5hYmxlIGN1c3RvbSB0YWJsZSBmb3IgdXNlcm1ldGEnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJJ3ZhbHVlJyA9PiBVTSgpLT5vcHRpb25zKCktPmdldCggJ21lbWJlcl9kaXJlY3Rvcnlfb3duX3RhYmxlJyApID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCQkpLAoJCQkndW0tdW5pbnN0YWxsX29uX2RlbGV0ZScgICAgICAgICAgICAgPT4gYXJyYXkoCgkJCQknbGFiZWwnID0+IF9fKCAnUmVtb3ZlIERhdGEgb24gVW5pbnN0YWxsPycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkndmFsdWUnID0+IFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAndW5pbnN0YWxsX29uX2RlbGV0ZScgKSA/ICRsYWJlbHNbJ3llcyddIDogJGxhYmVsc1snbm8nXSwKCQkJKSwKCQkpOwoKCQkvLyBTZWN1cmUgc2V0dGluZ3MKCQkkc2VjdXJlX2Jhbl9hZG1pbnNfYWNjb3VudHMgPSBVTSgpLT5vcHRpb25zKCktPmdldCggJ3NlY3VyZV9iYW5fYWRtaW5zX2FjY291bnRzJyApOwoKCQkkYmFubmVkX2NhcGFiaWxpdGllc19vcHQgPSBVTSgpLT5vcHRpb25zKCktPmdldCggJ2Jhbm5lZF9jYXBhYmlsaXRpZXMnICk7CgkJJGJhbm5lZF9jYXBhYmlsaXRpZXMgICAgID0gYXJyYXkoKTsKCQlpZiAoICEgZW1wdHkoICRiYW5uZWRfY2FwYWJpbGl0aWVzX29wdCApICkgewoJCQlpZiAoIGlzX3N0cmluZyggJGJhbm5lZF9jYXBhYmlsaXRpZXNfb3B0ICkgKSB7CgkJCQkkYmFubmVkX2NhcGFiaWxpdGllcyA9IGFycmF5KCAkYmFubmVkX2NhcGFiaWxpdGllc19vcHQgKTsKCQkJfSBlbHNlIHsKCQkJCSRiYW5uZWRfY2FwYWJpbGl0aWVzID0gJGJhbm5lZF9jYXBhYmlsaXRpZXNfb3B0OwoJCQl9CgkJfQoKCQkkc2VjdXJlX3NldHRpbmdzID0gYXJyYXkoCgkJCSd1bS1iYW5uZWRfY2FwYWJpbGl0aWVzJyAgICAgICAgPT4gYXJyYXkoCgkJCQknbGFiZWwnID0+IF9fKCAnQmFubmVkIEFkbWluaXN0cmF0aXZlIENhcGFiaWxpdGllcycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkndmFsdWUnID0+ICEgZW1wdHkoICRiYW5uZWRfY2FwYWJpbGl0aWVzICkgPyBpbXBsb2RlKCAnLCAnLCAkYmFubmVkX2NhcGFiaWxpdGllcyApIDogJycsCgkJCSksCgkJCSd1bS1sb2NrX3JlZ2lzdGVyX2Zvcm1zJyAgICAgICAgPT4gYXJyYXkoCgkJCQknbGFiZWwnID0+IF9fKCAnTG9jayBBbGwgUmVnaXN0ZXIgRm9ybXMnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJJ3ZhbHVlJyA9PiBVTSgpLT5vcHRpb25zKCktPmdldCggJ2xvY2tfcmVnaXN0ZXJfZm9ybXMnICkgPyAkbGFiZWxzWyd5ZXMnXSA6ICRsYWJlbHNbJ25vJ10sCgkJCSksCgkJCSd1bS1kaXNwbGF5X2xvZ2luX2Zvcm1fbm90aWNlJyAgPT4gYXJyYXkoCgkJCQknbGFiZWwnID0+IF9fKCAnRGlzcGxheSBMb2dpbiBmb3JtIG5vdGljZSB0byByZXNldCBwYXNzd29yZHMnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJJ3ZhbHVlJyA9PiBVTSgpLT5vcHRpb25zKCktPmdldCggJ2Rpc3BsYXlfbG9naW5fZm9ybV9ub3RpY2UnICkgPyAkbGFiZWxzWyd5ZXMnXSA6ICRsYWJlbHNbJ25vJ10sCgkJCSksCgkJCSd1bS1zZWN1cmVfYmFuX2FkbWluc19hY2NvdW50cycgPT4gYXJyYXkoCgkJCQknbGFiZWwnID0+IF9fKCAnRW5hYmxlIGJhbiBmb3IgYWRtaW5pc3RyYXRpdmUgY2FwYWJpbGl0aWVzJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCSd2YWx1ZScgPT4gJHNlY3VyZV9iYW5fYWRtaW5zX2FjY291bnRzID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCQkpLAoJCSk7CgkJaWYgKCAhIGVtcHR5KCAkc2VjdXJlX2Jhbl9hZG1pbnNfYWNjb3VudHMgKSApIHsKCQkJJHNlY3VyZV9ub3RpZnlfYWRtaW5zX2Jhbm5lZF9hY2NvdW50cyA9IFVNKCktPm9wdGlvbnMoKS0+Z2V0KCAnc2VjdXJlX25vdGlmeV9hZG1pbnNfYmFubmVkX2FjY291bnRzJyApOwoKCQkJJHNlY3VyZV9zZXR0aW5nc1sndW0tc2VjdXJlX25vdGlmeV9hZG1pbnNfYmFubmVkX2FjY291bnRzJ10gPSBhcnJheSgKCQkJCSdsYWJlbCcgPT4gX18oICdOb3RpZnkgQWRtaW5pc3RyYXRvcnMnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJJ3ZhbHVlJyA9PiAkc2VjdXJlX25vdGlmeV9hZG1pbnNfYmFubmVkX2FjY291bnRzID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCQkpOwoJCQlpZiAoICEgZW1wdHkoICRzZWN1cmVfbm90aWZ5X2FkbWluc19iYW5uZWRfYWNjb3VudHMgKSApIHsKCQkJCSRzZWN1cmVfbm90aWZ5X2FkbWluc19iYW5uZWRfYWNjb3VudHNfb3B0aW9ucyA9IGFycmF5KAoJCQkJCSdpbnN0YW50JyA9PiBfXyggJ1NlbmQgSW1tZWRpYXRlbHknLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCSdob3VybHknICA9PiBfXyggJ0hvdXJseScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJJ2RhaWx5JyAgID0+IF9fKCAnRGFpbHknLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJKTsKCgkJCQkkc2VjdXJlX3NldHRpbmdzWyd1bS1zZWN1cmVfbm90aWZ5X2FkbWluc19iYW5uZWRfYWNjb3VudHNfX2ludGVydmFsJ10gPSBhcnJheSgKCQkJCQknbGFiZWwnID0+IF9fKCAnTm90aWZpY2F0aW9uIFNjaGVkdWxlJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCQkndmFsdWUnID0+ICRzZWN1cmVfbm90aWZ5X2FkbWluc19iYW5uZWRfYWNjb3VudHNfb3B0aW9uc1sgVU0oKS0+b3B0aW9ucygpLT5nZXQoICdzZWN1cmVfbm90aWZ5X2FkbWluc19iYW5uZWRfYWNjb3VudHNfX2ludGVydmFsJyApIF0sCgkJCQkpOwoJCQl9CgkJfQoKCQkkc2VjdXJlX2FsbG93ZWRfcmVkaXJlY3RfaG9zdHMgPSBVTSgpLT5vcHRpb25zKCktPmdldCggJ3NlY3VyZV9hbGxvd2VkX3JlZGlyZWN0X2hvc3RzJyApOwoJCSRzZWN1cmVfYWxsb3dlZF9yZWRpcmVjdF9ob3N0cyA9IGV4cGxvZGUoIFBIUF9FT0wsICRzZWN1cmVfYWxsb3dlZF9yZWRpcmVjdF9ob3N0cyApOwoKCQkkc2VjdXJlX3NldHRpbmdzWyd1bS1zZWN1cmVfYWxsb3dlZF9yZWRpcmVjdF9ob3N0cyddID0gYXJyYXkoCgkJCSdsYWJlbCcgPT4gX18oICdBbGxvd2VkIGhvc3RzIGZvciBzYWZlIHJlZGlyZWN0JywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJJ3ZhbHVlJyA9PiAkc2VjdXJlX2FsbG93ZWRfcmVkaXJlY3RfaG9zdHMsCgkJKTsKCgkJLy8gTGljZW5zZXMgc2V0dGluZ3MuCgkJJGxpY2Vuc2Vfc2V0dGluZ3MgPSBhcnJheSgKCQkJJ3VtLWxpY2Vuc2VzJyA9PiBhcnJheSgKCQkJCSdsYWJlbCcgPT4gX18oICdMaWNlbnNlcycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkndmFsdWUnID0+IGFycmF5KCksCgkJCSksCgkJKTsKCgkJLyoqCgkJICogRmlsdGVycyBsaWNlbnNlcyBzZXR0aW5ncyBmb3IgU2l0ZSBIZWFsdGguCgkJICoKCQkgKiBAc2luY2UgMi43LjAKCQkgKiBAaG9vayB1bV9saWNlbnNlc19zaXRlX2hlYWx0aAoJCSAqCgkJICogQHBhcmFtIHthcnJheX0gJGxpY2Vuc2Vfc2V0dGluZ3MgbGljZW5zZXMgc2V0dGluZ3MgZm9yIFNpdGUgSGVhbHRoLgoJCSAqCgkJICogQHJldHVybiB7YXJyYXl9IGxpY2Vuc2VzIHNldHRpbmdzIGZvciBTaXRlIEhlYWx0aC4KCQkgKgoJCSAqIEBleGFtcGxlIDxjYXB0aW9uPkV4dGVuZCBsaWNlbnNlcyBzZXR0aW5ncyBmb3IgU2l0ZSBIZWFsdGguPC9jYXB0aW9uPgoJCSAqIGZ1bmN0aW9uIHVtX2xpY2Vuc2VzX3NpdGVfaGVhbHRoKCAkbGljZW5zZV9zZXR0aW5ncyApIHsKCQkgKiAgICAgLy8geW91ciBjb2RlIGhlcmUKCQkgKiAgICAgcmV0dXJuICRsaWNlbnNlX3NldHRpbmdzOwoJCSAqIH0KCQkgKiBhZGRfZmlsdGVyKCAndW1fbGljZW5zZXNfc2l0ZV9oZWFsdGgnLCAndW1fbGljZW5zZXNfc2l0ZV9oZWFsdGgnLCAxMCwgMSApOwoJCSAqLwoJCSRsaWNlbnNlX3NldHRpbmdzID0gYXBwbHlfZmlsdGVycyggJ3VtX2xpY2Vuc2VzX3NpdGVfaGVhbHRoJywgJGxpY2Vuc2Vfc2V0dGluZ3MgKTsKCgkJJGluZm9bJ3VsdGltYXRlLW1lbWJlciddWydmaWVsZHMnXSA9IGFycmF5X21lcmdlKCAkaW5mb1sndWx0aW1hdGUtbWVtYmVyJ11bJ2ZpZWxkcyddLCAkcGFnZXNfc2V0dGluZ3MsICR1c2VyX3NldHRpbmdzLCAkYWNjb3VudF9zZXR0aW5ncywgJHVwbG9hZHNfc2V0dGluZ3MsICRyZXN0cmljdF9zZXR0aW5ncywgJGFjY2Vzc19vdGhlcl9zZXR0aW5ncywgJGVtYWlsX3NldHRpbmdzLCAkYXBwZWFyYW5jZV9zZXR0aW5ncywgJG1pc2Nfc2V0dGluZ3MsICRzZWN1cmVfc2V0dGluZ3MsICRsaWNlbnNlX3NldHRpbmdzICk7CgoJCS8vIFVzZXIgcm9sZXMgc2V0dGluZ3MKCQkkcm9sZXNfYXJyYXkgPSBhcnJheSgpOwoJCWZvcmVhY2ggKCAkdGhpcy0+Z2V0X3JvbGVzKCkgYXMgJGtleSA9PiAkcm9sZSApIHsKCQkJaWYgKCBzdHJwb3MoICRrZXksICd1bV8nICkgPT09IDAgKSB7CgkJCQkka2V5ID0gc3Vic3RyKCAka2V5LCAzICk7CgkJCX0KCQkJJHJvbGVtZXRhID0gJHRoaXMtPmdldF9yb2xlX21ldGEoICRrZXkgKTsKCQkJaWYgKCBmYWxzZSA9PT0gJHJvbGVtZXRhICkgewoJCQkJY29udGludWU7CgkJCX0KCQkJJHByaW9yaXR5ID0gISBlbXB0eSggJHJvbGVtZXRhWydfdW1fcHJpb3JpdHknXSApID8gJHJvbGVtZXRhWydfdW1fcHJpb3JpdHknXSA6IDA7CgoJCQkkayAgICAgICAgICAgICAgICAgPSAkcHJpb3JpdHkgLiAnLScgLiAkcm9sZTsKCQkJJHJvbGVzX2FycmF5WyAkayBdID0gJHJvbGUgLiAnKCcgLiAkcHJpb3JpdHkgLiAnKSc7CgoJCQlrcnNvcnQoICRyb2xlc19hcnJheSwgU09SVF9OVU1FUklDICk7CgkJfQoKCQkkaW5mb1sndWx0aW1hdGUtbWVtYmVyLXVzZXItcm9sZXMnXSA9IGFycmF5KAoJCQknbGFiZWwnICAgICAgID0+IF9fKCAnVXNlciByb2xlcycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCSdkZXNjcmlwdGlvbicgPT4gX18oICdUaGlzIGRlYnVnIGluZm9ybWF0aW9uIGFib3V0IHVzZXIgcm9sZXMuJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJJ2ZpZWxkcycgICAgICA9PiBhcnJheSgKCQkJCSd1bS1yb2xlcycgICAgICAgICA9PiBhcnJheSgKCQkJCQknbGFiZWwnID0+IF9fKCAnVXNlciBSb2xlcyAocHJpb3JpdHkpJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCQkndmFsdWUnID0+IGltcGxvZGUoICcsICcsICRyb2xlc19hcnJheSApLAoJCQkJKSwKCQkJCSd1bS1yZWdpc3Rlcl9yb2xlJyA9PiBhcnJheSgKCQkJCQknbGFiZWwnID0+IF9fKCAnV29yZFByZXNzIERlZmF1bHQgTmV3IFVzZXIgUm9sZScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJJ3ZhbHVlJyA9PiBnZXRfb3B0aW9uKCAnZGVmYXVsdF9yb2xlJyApLAoJCQkJKSwKCQkJKSwKCQkpOwoKCQlmb3JlYWNoICggJHRoaXMtPmdldF9yb2xlcygpIGFzICRrZXkgPT4gJHJvbGUgKSB7CgkJCWlmICggc3RycG9zKCAka2V5LCAndW1fJyApID09PSAwICkgewoJCQkJJGtleSA9IHN1YnN0ciggJGtleSwgMyApOwoJCQl9CgoJCQkkcm9sZW1ldGEgPSAkdGhpcy0+Z2V0X3JvbGVfbWV0YSggJGtleSApOwoJCQlpZiAoIGZhbHNlID09PSAkcm9sZW1ldGEgKSB7CgkJCQljb250aW51ZTsKCQkJfQoKCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItJyAuICRrZXkgXSA9IGFycmF5KAoJCQkJJ2xhYmVsJyAgICAgICA9PiAnIC0gJyAuICRyb2xlIC4gX18oICcgcm9sZSBzZXR0aW5ncycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQknZGVzY3JpcHRpb24nID0+IF9fKCAnVGhpcyBkZWJ1ZyBpbmZvcm1hdGlvbiBhYm91dCB1c2VyIHJvbGUuJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCSdmaWVsZHMnICAgICAgPT4gYXJyYXkoKSwKCQkJKTsKCgkJCWlmICggYXJyYXlfa2V5X2V4aXN0cyggJ191bV9jYW5fYWNjZXNzX3dwYWRtaW4nLCAkcm9sZW1ldGEgKSApIHsKCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLScgLiAka2V5IF1bJ2ZpZWxkcyddID0gYXJyYXlfbWVyZ2UoCgkJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItJyAuICRrZXkgXVsnZmllbGRzJ10sCgkJCQkJYXJyYXkoCgkJCQkJCSd1bS1jYW5fYWNjZXNzX3dwYWRtaW4nID0+IGFycmF5KAoJCQkJCQkJJ2xhYmVsJyA9PiBfXyggJ0NhbiBhY2Nlc3Mgd3AtYWRtaW4/JywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCQkJCSd2YWx1ZScgPT4gJHJvbGVtZXRhWydfdW1fY2FuX2FjY2Vzc193cGFkbWluJ10gPyAkbGFiZWxzWyd5ZXMnXSA6ICRsYWJlbHNbJ25vJ10sCgkJCQkJCSksCgkJCQkJKQoJCQkJKTsKCQkJfQoKCQkJaWYgKCBhcnJheV9rZXlfZXhpc3RzKCAnX3VtX2Nhbl9ub3Rfc2VlX2FkbWluYmFyJywgJHJvbGVtZXRhICkgKSB7CgkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci0nIC4gJGtleSBdWydmaWVsZHMnXSA9IGFycmF5X21lcmdlKAoJCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLScgLiAka2V5IF1bJ2ZpZWxkcyddLAoJCQkJCWFycmF5KAoJCQkJCQkndW0tY2FuX25vdF9zZWVfYWRtaW5iYXInID0+IGFycmF5KAoJCQkJCQkJJ2xhYmVsJyA9PiBfXyggJ0ZvcmNlIGhpZGluZyBhZG1pbmJhciBpbiBmcm9udGVuZD8nLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJJ3ZhbHVlJyA9PiAkcm9sZW1ldGFbJ191bV9jYW5fbm90X3NlZV9hZG1pbmJhciddID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCQkJCQkpLAoJCQkJCSkKCQkJCSk7CgkJCX0KCgkJCWlmICggYXJyYXlfa2V5X2V4aXN0cyggJ191bV9jYW5fZWRpdF9ldmVyeW9uZScsICRyb2xlbWV0YSApICkgewoJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItJyAuICRrZXkgXVsnZmllbGRzJ10gPSBhcnJheV9tZXJnZSgKCQkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci0nIC4gJGtleSBdWydmaWVsZHMnXSwKCQkJCQlhcnJheSgKCQkJCQkJJ3VtLWNhbl9lZGl0X2V2ZXJ5b25lJyA9PiBhcnJheSgKCQkJCQkJCSdsYWJlbCcgPT4gX18oICdDYW4gZWRpdCBvdGhlciBtZW1iZXIgYWNjb3VudHM/JywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCQkJCSd2YWx1ZScgPT4gJHJvbGVtZXRhWydfdW1fY2FuX2VkaXRfZXZlcnlvbmUnXSA/ICRsYWJlbHNbJ3llcyddIDogJGxhYmVsc1snbm8nXSwKCQkJCQkJKSwKCQkJCQkpCgkJCQkpOwoJCQl9CgoJCQlpZiAoIGFycmF5X2tleV9leGlzdHMoICdfdW1fY2FuX2VkaXRfZXZlcnlvbmUnLCAkcm9sZW1ldGEgKSAmJiAxID09PSBhYnNpbnQoICRyb2xlbWV0YVsnX3VtX2Nhbl9lZGl0X2V2ZXJ5b25lJ10gKSApIHsKCQkJCSRjYW5fZWRpdF9yb2xlc19tZXRhID0gISBlbXB0eSggJHJvbGVtZXRhWydfdW1fY2FuX2VkaXRfcm9sZXMnXSApID8gJHJvbGVtZXRhWydfdW1fY2FuX2VkaXRfcm9sZXMnXSA6IGFycmF5KCk7CgkJCQkkY2FuX2VkaXRfcm9sZXMgICAgICA9IGFycmF5KCk7CgkJCQlpZiAoICEgZW1wdHkoICRjYW5fZWRpdF9yb2xlc19tZXRhICkgKSB7CgkJCQkJaWYgKCBpc19zdHJpbmcoICRjYW5fZWRpdF9yb2xlc19tZXRhICkgKSB7CgkJCQkJCSRjYW5fZWRpdF9yb2xlcyA9IGFycmF5KCAkY2FuX2VkaXRfcm9sZXNfbWV0YSApOwoJCQkJCX0gZWxzZSB7CgkJCQkJCSRjYW5fZWRpdF9yb2xlcyA9ICRjYW5fZWRpdF9yb2xlc19tZXRhOwoJCQkJCX0KCQkJCX0KCgkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci0nIC4gJGtleSBdWydmaWVsZHMnXSA9IGFycmF5X21lcmdlKAoJCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLScgLiAka2V5IF1bJ2ZpZWxkcyddLAoJCQkJCWFycmF5KAoJCQkJCQkndW0tY2FuX2VkaXRfcm9sZXMnID0+IGFycmF5KAoJCQkJCQkJJ2xhYmVsJyA9PiBfXyggJ0NhbiBlZGl0IHRoZXNlIHVzZXIgcm9sZXMgb25seScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkndmFsdWUnID0+ICEgZW1wdHkoICRjYW5fZWRpdF9yb2xlcyApID8gaW1wbG9kZSggJywgJywgJGNhbl9lZGl0X3JvbGVzICkgOiAkbGFiZWxzWydhbGwnXSwKCQkJCQkJKSwKCQkJCQkpCgkJCQkpOwoJCQl9CgoJCQlpZiAoIGFycmF5X2tleV9leGlzdHMoICdfdW1fY2FuX2RlbGV0ZV9ldmVyeW9uZScsICRyb2xlbWV0YSApICkgewoJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItJyAuICRrZXkgXVsnZmllbGRzJ10gPSBhcnJheV9tZXJnZSgKCQkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci0nIC4gJGtleSBdWydmaWVsZHMnXSwKCQkJCQlhcnJheSgKCQkJCQkJJ3VtLWNhbl9kZWxldGVfZXZlcnlvbmUnID0+IGFycmF5KAoJCQkJCQkJJ2xhYmVsJyA9PiBfXyggJ0NhbiBkZWxldGUgb3RoZXIgbWVtYmVyIGFjY291bnRzPycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkndmFsdWUnID0+ICRyb2xlbWV0YVsnX3VtX2Nhbl9kZWxldGVfZXZlcnlvbmUnXSA/ICRsYWJlbHNbJ3llcyddIDogJGxhYmVsc1snbm8nXSwKCQkJCQkJKSwKCQkJCQkpCgkJCQkpOwoJCQl9CgoJCQlpZiAoIGFycmF5X2tleV9leGlzdHMoICdfdW1fY2FuX2RlbGV0ZV9ldmVyeW9uZScsICRyb2xlbWV0YSApICYmIDEgPT09IGFic2ludCggJHJvbGVtZXRhWydfdW1fY2FuX2RlbGV0ZV9ldmVyeW9uZSddICkgKSB7CgkJCQkkY2FuX2RlbGV0ZV9yb2xlc19tZXRhID0gISBlbXB0eSggJHJvbGVtZXRhWydfdW1fY2FuX2RlbGV0ZV9yb2xlcyddICkgPyAkcm9sZW1ldGFbJ191bV9jYW5fZGVsZXRlX3JvbGVzJ10gOiBhcnJheSgpOwoJCQkJJGNhbl9kZWxldGVfcm9sZXMgICAgICA9IGFycmF5KCk7CgkJCQlpZiAoICEgZW1wdHkoICRjYW5fZGVsZXRlX3JvbGVzX21ldGEgKSApIHsKCQkJCQlpZiAoIGlzX3N0cmluZyggJGNhbl9kZWxldGVfcm9sZXNfbWV0YSApICkgewoJCQkJCQkkY2FuX2RlbGV0ZV9yb2xlcyA9IGFycmF5KCAkY2FuX2RlbGV0ZV9yb2xlc19tZXRhICk7CgkJCQkJfSBlbHNlIHsKCQkJCQkJJGNhbl9kZWxldGVfcm9sZXMgPSAkY2FuX2RlbGV0ZV9yb2xlc19tZXRhOwoJCQkJCX0KCQkJCX0KCgkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci0nIC4gJGtleSBdWydmaWVsZHMnXSA9IGFycmF5X21lcmdlKAoJCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLScgLiAka2V5IF1bJ2ZpZWxkcyddLAoJCQkJCWFycmF5KAoJCQkJCQkndW0tY2FuX2RlbGV0ZV9yb2xlcycgPT4gYXJyYXkoCgkJCQkJCQknbGFiZWwnID0+IF9fKCAnQ2FuIGRlbGV0ZSB0aGVzZSB1c2VyIHJvbGVzIG9ubHknLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJJ3ZhbHVlJyA9PiAhIGVtcHR5KCAkY2FuX2RlbGV0ZV9yb2xlcyApID8gaW1wbG9kZSggJywgJywgJGNhbl9kZWxldGVfcm9sZXMgKSA6ICRsYWJlbHNbJ2FsbCddLAoJCQkJCQkpLAoJCQkJCSkKCQkJCSk7CgkJCX0KCgkJCWlmICggYXJyYXlfa2V5X2V4aXN0cyggJ191bV9jYW5fZWRpdF9wcm9maWxlJywgJHJvbGVtZXRhICkgKSB7CgkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci0nIC4gJGtleSBdWydmaWVsZHMnXSA9IGFycmF5X21lcmdlKAoJCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLScgLiAka2V5IF1bJ2ZpZWxkcyddLAoJCQkJCWFycmF5KAoJCQkJCQkndW0tY2FuX2VkaXRfcHJvZmlsZScgPT4gYXJyYXkoCgkJCQkJCQknbGFiZWwnID0+IF9fKCAnQ2FuIGVkaXQgdGhlaXIgcHJvZmlsZT8nLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJJ3ZhbHVlJyA9PiAkcm9sZW1ldGFbJ191bV9jYW5fZWRpdF9wcm9maWxlJ10gPyAkbGFiZWxzWyd5ZXMnXSA6ICRsYWJlbHNbJ25vJ10sCgkJCQkJCSksCgkJCQkJKQoJCQkJKTsKCQkJfQoKCQkJaWYgKCBhcnJheV9rZXlfZXhpc3RzKCAnX3VtX2Nhbl9kZWxldGVfcHJvZmlsZScsICRyb2xlbWV0YSApICkgewoJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItJyAuICRrZXkgXVsnZmllbGRzJ10gPSBhcnJheV9tZXJnZSgKCQkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci0nIC4gJGtleSBdWydmaWVsZHMnXSwKCQkJCQlhcnJheSgKCQkJCQkJJ3VtLWNhbl9kZWxldGVfcHJvZmlsZScgPT4gYXJyYXkoCgkJCQkJCQknbGFiZWwnID0+IF9fKCAnQ2FuIGRlbGV0ZSB0aGVpciBhY2NvdW50PycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkndmFsdWUnID0+ICRyb2xlbWV0YVsnX3VtX2Nhbl9kZWxldGVfcHJvZmlsZSddID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCQkJCQkpLAoJCQkJCSkKCQkJCSk7CgkJCX0KCgkJCWlmICggYXJyYXlfa2V5X2V4aXN0cyggJ191bV9jYW5fdmlld19hbGwnLCAkcm9sZW1ldGEgKSApIHsKCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLScgLiAka2V5IF1bJ2ZpZWxkcyddID0gYXJyYXlfbWVyZ2UoCgkJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItJyAuICRrZXkgXVsnZmllbGRzJ10sCgkJCQkJYXJyYXkoCgkJCQkJCSd1bS1jYW5fdmlld19hbGwnID0+IGFycmF5KAoJCQkJCQkJJ2xhYmVsJyA9PiBfXyggJ0NhbiB2aWV3IG90aGVyIG1lbWJlciBwcm9maWxlcz8nLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJJ3ZhbHVlJyA9PiAkcm9sZW1ldGFbJ191bV9jYW5fdmlld19hbGwnXSA/ICRsYWJlbHNbJ3llcyddIDogJGxhYmVsc1snbm8nXSwKCQkJCQkJKSwKCQkJCQkpCgkJCQkpOwoJCQl9CgoJCQlpZiAoIGFycmF5X2tleV9leGlzdHMoICdfdW1fY2FuX3ZpZXdfYWxsJywgJHJvbGVtZXRhICkgJiYgMSA9PT0gYWJzaW50KCAkcm9sZW1ldGFbJ191bV9jYW5fdmlld19hbGwnXSApICkgewoJCQkJJGNhbl92aWV3X3JvbGVzX21ldGEgPSAhIGVtcHR5KCAkcm9sZW1ldGFbJ191bV9jYW5fdmlld19yb2xlcyddICkgPyAkcm9sZW1ldGFbJ191bV9jYW5fdmlld19yb2xlcyddIDogYXJyYXkoKTsKCQkJCSRjYW5fdmlld19yb2xlcyAgICAgID0gYXJyYXkoKTsKCQkJCWlmICggISBlbXB0eSggJGNhbl92aWV3X3JvbGVzX21ldGEgKSApIHsKCQkJCQlpZiAoIGlzX3N0cmluZyggJGNhbl92aWV3X3JvbGVzX21ldGEgKSApIHsKCQkJCQkJJGNhbl92aWV3X3JvbGVzID0gYXJyYXkoICRjYW5fdmlld19yb2xlc19tZXRhICk7CgkJCQkJfSBlbHNlIHsKCQkJCQkJJGNhbl92aWV3X3JvbGVzID0gJGNhbl92aWV3X3JvbGVzX21ldGE7CgkJCQkJfQoJCQkJfQoKCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLScgLiAka2V5IF1bJ2ZpZWxkcyddID0gYXJyYXlfbWVyZ2UoCgkJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItJyAuICRrZXkgXVsnZmllbGRzJ10sCgkJCQkJYXJyYXkoCgkJCQkJCSd1bS1jYW5fdmlld19yb2xlcycgPT4gYXJyYXkoCgkJCQkJCQknbGFiZWwnID0+IF9fKCAnQ2FuIHZpZXcgdGhlc2UgdXNlciByb2xlcyBvbmx5JywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCQkJCSd2YWx1ZScgPT4gISBlbXB0eSggJGNhbl92aWV3X3JvbGVzICkgPyBpbXBsb2RlKCAnLCAnLCAkY2FuX3ZpZXdfcm9sZXMgKSA6ICRsYWJlbHNbJ2FsbCddLAoJCQkJCQkpLAoJCQkJCSkKCQkJCSk7CgkJCX0KCgkJCWlmICggaXNzZXQoICRyb2xlbWV0YVsnX3VtX3Byb2ZpbGVfbm9pbmRleCddICkgJiYgJycgIT09ICRyb2xlbWV0YVsnX3VtX3Byb2ZpbGVfbm9pbmRleCddICkgewoJCQkJJHByb2ZpbGVfbm9pbmRleCA9ICRyb2xlbWV0YVsnX3VtX3Byb2ZpbGVfbm9pbmRleCddID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddOwoJCQl9IGVsc2UgewoJCQkJJHByb2ZpbGVfbm9pbmRleCA9IF9fKCAnRGVmYXVsdCcsICd1bHRpbWF0ZS1tZW1iZXInICk7CgkJCX0KCQkJaWYgKCBpc3NldCggJHJvbGVtZXRhWydfdW1fZGVmYXVsdF9ob21lcGFnZSddICkgJiYgJycgIT09ICRyb2xlbWV0YVsnX3VtX2RlZmF1bHRfaG9tZXBhZ2UnXSApIHsKCQkJCSRkZWZhdWx0X2hvbWVwYWdlID0gJHJvbGVtZXRhWydfdW1fZGVmYXVsdF9ob21lcGFnZSddID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddOwoJCQl9IGVsc2UgewoJCQkJJGRlZmF1bHRfaG9tZXBhZ2UgPSBfXyggJ05vIHN1Y2ggb3B0aW9uJywgJ3VsdGltYXRlLW1lbWJlcicgKTsKCQkJfQoKCQkJaWYgKCBhcnJheV9rZXlfZXhpc3RzKCAnX3VtX2Nhbl9tYWtlX3ByaXZhdGVfcHJvZmlsZScsICRyb2xlbWV0YSApICkgewoJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItJyAuICRrZXkgXVsnZmllbGRzJ10gPSBhcnJheV9tZXJnZSgKCQkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci0nIC4gJGtleSBdWydmaWVsZHMnXSwKCQkJCQlhcnJheSgKCQkJCQkJJ3VtLWNhbl9tYWtlX3ByaXZhdGVfcHJvZmlsZScgPT4gYXJyYXkoCgkJCQkJCQknbGFiZWwnID0+IF9fKCAnQ2FuIG1ha2UgdGhlaXIgcHJvZmlsZSBwcml2YXRlPycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkndmFsdWUnID0+ICRyb2xlbWV0YVsnX3VtX2Nhbl9tYWtlX3ByaXZhdGVfcHJvZmlsZSddID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCQkJCQkpLAoJCQkJCSkKCQkJCSk7CgkJCX0KCgkJCWlmICggYXJyYXlfa2V5X2V4aXN0cyggJ191bV9jYW5fYWNjZXNzX3ByaXZhdGVfcHJvZmlsZScsICRyb2xlbWV0YSApICkgewoJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItJyAuICRrZXkgXVsnZmllbGRzJ10gPSBhcnJheV9tZXJnZSgKCQkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci0nIC4gJGtleSBdWydmaWVsZHMnXSwKCQkJCQlhcnJheSgKCQkJCQkJJ3VtLWNhbl9hY2Nlc3NfcHJpdmF0ZV9wcm9maWxlJyA9PiBhcnJheSgKCQkJCQkJCSdsYWJlbCcgPT4gX18oICdDYW4gdmlldy9hY2Nlc3MgcHJpdmF0ZSBwcm9maWxlcz8nLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJJ3ZhbHVlJyA9PiAkcm9sZW1ldGFbJ191bV9jYW5fYWNjZXNzX3ByaXZhdGVfcHJvZmlsZSddID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCQkJCQkpLAoJCQkJCSkKCQkJCSk7CgkJCX0KCgkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLScgLiAka2V5IF1bJ2ZpZWxkcyddID0gYXJyYXlfbWVyZ2UoCgkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci0nIC4gJGtleSBdWydmaWVsZHMnXSwKCQkJCWFycmF5KAoJCQkJCSd1bS1wcm9maWxlX25vaW5kZXgnICA9PiBhcnJheSgKCQkJCQkJJ2xhYmVsJyA9PiBfXyggJ0F2b2lkIGluZGV4aW5nIHByb2ZpbGUgYnkgc2VhcmNoIGVuZ2luZXMnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkndmFsdWUnID0+ICRwcm9maWxlX25vaW5kZXgsCgkJCQkJKSwKCQkJCQkndW0tZGVmYXVsdF9ob21lcGFnZScgPT4gYXJyYXkoCgkJCQkJCSdsYWJlbCcgPT4gX18oICdDYW4gdmlldyBkZWZhdWx0IGhvbWVwYWdlPycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCSd2YWx1ZScgPT4gJGRlZmF1bHRfaG9tZXBhZ2UsCgkJCQkJKSwKCQkJCSkKCQkJKTsKCgkJCWlmICggaXNzZXQoICRyb2xlbWV0YVsnX3VtX2RlZmF1bHRfaG9tZXBhZ2UnXSApICYmIDAgPT09IGFic2ludCggJHJvbGVtZXRhWydfdW1fZGVmYXVsdF9ob21lcGFnZSddICkgKSB7CgkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci0nIC4gJGtleSBdWydmaWVsZHMnXSA9IGFycmF5X21lcmdlKAoJCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLScgLiAka2V5IF1bJ2ZpZWxkcyddLAoJCQkJCWFycmF5KAoJCQkJCQkndW0tcmVkaXJlY3RfaG9tZXBhZ2UnID0+IGFycmF5KAoJCQkJCQkJJ2xhYmVsJyA9PiBfXyggJ0N1c3RvbSBIb21lcGFnZSBSZWRpcmVjdCcsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkndmFsdWUnID0+ICRyb2xlbWV0YVsnX3VtX3JlZGlyZWN0X2hvbWVwYWdlJ10sCgkJCQkJCSksCgkJCQkJKQoJCQkJKTsKCQkJfQoKCQkJJHN0YXR1c19vcHRpb25zID0gYXJyYXkoCgkJCQknYXBwcm92ZWQnICA9PiBfXyggJ0F1dG8gQXBwcm92ZScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQknY2hlY2ttYWlsJyA9PiBfXyggJ1JlcXVpcmUgRW1haWwgQWN0aXZhdGlvbicsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkncGVuZGluZycgICA9PiBfXyggJ1JlcXVpcmUgQWRtaW4gUmV2aWV3JywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJKTsKCgkJCWlmICggYXJyYXlfa2V5X2V4aXN0cyggJ191bV9zdGF0dXMnLCAkcm9sZW1ldGEgKSAmJiBpc3NldCggJHN0YXR1c19vcHRpb25zWyAkcm9sZW1ldGFbJ191bV9zdGF0dXMnXSBdICkgKSB7CgkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci0nIC4gJGtleSBdWydmaWVsZHMnXSA9IGFycmF5X21lcmdlKAoJCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLScgLiAka2V5IF1bJ2ZpZWxkcyddLAoJCQkJCWFycmF5KAoJCQkJCQkndW0tc3RhdHVzJyA9PiBhcnJheSgKCQkJCQkJCSdsYWJlbCcgPT4gX18oICdSZWdpc3RyYXRpb24gU3RhdHVzJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCQkJCSd2YWx1ZScgPT4gJHN0YXR1c19vcHRpb25zWyAkcm9sZW1ldGFbJ191bV9zdGF0dXMnXSBdLAoJCQkJCQkpLAoJCQkJCSkKCQkJCSk7CgkJCX0KCgkJCWlmICggYXJyYXlfa2V5X2V4aXN0cyggJ191bV9zdGF0dXMnLCAkcm9sZW1ldGEgKSAmJiAnYXBwcm92ZWQnID09PSAkcm9sZW1ldGFbJ191bV9zdGF0dXMnXSApIHsKCQkJCSRhdXRvX2FwcHJvdmVfYWN0ID0gYXJyYXkoCgkJCQkJJ3JlZGlyZWN0X3Byb2ZpbGUnID0+IF9fKCAnUmVkaXJlY3QgdG8gcHJvZmlsZScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJJ3JlZGlyZWN0X3VybCcgICAgID0+IF9fKCAnUmVkaXJlY3QgdG8gVVJMJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCSk7CgoJCQkJaWYgKCBpc3NldCggJGF1dG9fYXBwcm92ZV9hY3RbICRyb2xlbWV0YVsnX3VtX2F1dG9fYXBwcm92ZV9hY3QnXSBdICkgKSB7CgkJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItJyAuICRrZXkgXVsnZmllbGRzJ10gPSBhcnJheV9tZXJnZSgKCQkJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItJyAuICRrZXkgXVsnZmllbGRzJ10sCgkJCQkJCWFycmF5KAoJCQkJCQkJJ3VtLWF1dG9fYXBwcm92ZV9hY3QnID0+IGFycmF5KAoJCQkJCQkJCSdsYWJlbCcgPT4gX18oICdDdXN0b20gSG9tZXBhZ2UgUmVkaXJlY3QnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJCSd2YWx1ZScgPT4gJGF1dG9fYXBwcm92ZV9hY3RbICRyb2xlbWV0YVsnX3VtX2F1dG9fYXBwcm92ZV9hY3QnXSBdLAoJCQkJCQkJKSwKCQkJCQkJKQoJCQkJCSk7CgkJCQl9CgoJCQkJaWYgKCAncmVkaXJlY3RfdXJsJyA9PT0gJHJvbGVtZXRhWydfdW1fYXV0b19hcHByb3ZlX2FjdCddICYmIGFycmF5X2tleV9leGlzdHMoICdfdW1fYXV0b19hcHByb3ZlX3VybCcsICRyb2xlbWV0YSApICkgewoJCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLScgLiAka2V5IF1bJ2ZpZWxkcyddID0gYXJyYXlfbWVyZ2UoCgkJCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLScgLiAka2V5IF1bJ2ZpZWxkcyddLAoJCQkJCQlhcnJheSgKCQkJCQkJCSd1bS1hdXRvX2FwcHJvdmVfdXJsJyA9PiBhcnJheSgKCQkJCQkJCQknbGFiZWwnID0+IF9fKCAnU2V0IEN1c3RvbSBSZWRpcmVjdCBVUkwnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJCSd2YWx1ZScgPT4gJHJvbGVtZXRhWydfdW1fYXV0b19hcHByb3ZlX3VybCddLAoJCQkJCQkJKSwKCQkJCQkJKQoJCQkJCSk7CgkJCQl9CgkJCX0KCgkJCWlmICggYXJyYXlfa2V5X2V4aXN0cyggJ191bV9zdGF0dXMnLCAkcm9sZW1ldGEgKSAmJiAnY2hlY2ttYWlsJyA9PT0gJHJvbGVtZXRhWydfdW1fc3RhdHVzJ10gKSB7CgkJCQkkY2hlY2ttYWlsX2FjdGlvbiA9IGFycmF5KAoJCQkJCSdzaG93X21lc3NhZ2UnID0+IF9fKCAnU2hvdyBjdXN0b20gbWVzc2FnZScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJJ3JlZGlyZWN0X3VybCcgPT4gX18oICdSZWRpcmVjdCB0byBVUkwnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJKTsKCgkJCQlpZiAoIGFycmF5X2tleV9leGlzdHMoICdfdW1fbG9naW5fZW1haWxfYWN0aXZhdGUnLCAkcm9sZW1ldGEgKSApIHsKCQkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci0nIC4gJGtleSBdWydmaWVsZHMnXSA9IGFycmF5X21lcmdlKAoJCQkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci0nIC4gJGtleSBdWydmaWVsZHMnXSwKCQkJCQkJYXJyYXkoCgkJCQkJCQkndW0tbG9naW5fZW1haWxfYWN0aXZhdGUnID0+IGFycmF5KAoJCQkJCQkJCSdsYWJlbCcgPT4gX18oICdMb2dpbiB1c2VyIGFmdGVyIHZhbGlkYXRpbmcgdGhlIGFjdGl2YXRpb24gbGluaz8nLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJCSd2YWx1ZScgPT4gJHJvbGVtZXRhWydfdW1fbG9naW5fZW1haWxfYWN0aXZhdGUnXSA/ICRsYWJlbHNbJ3llcyddIDogJGxhYmVsc1snbm8nXSwKCQkJCQkJCSksCgkJCQkJCSkKCQkJCQkpOwoJCQkJfQoKCQkJCWlmICggaXNzZXQoICRjaGVja21haWxfYWN0aW9uWyAkcm9sZW1ldGFbJ191bV9jaGVja21haWxfYWN0aW9uJ10gXSApICkgewoJCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLScgLiAka2V5IF1bJ2ZpZWxkcyddID0gYXJyYXlfbWVyZ2UoCgkJCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLScgLiAka2V5IF1bJ2ZpZWxkcyddLAoJCQkJCQlhcnJheSgKCQkJCQkJCSd1bS1jaGVja21haWxfYWN0aW9uJyA9PiBhcnJheSgKCQkJCQkJCQknbGFiZWwnID0+IF9fKCAnQWN0aW9uIHRvIGJlIHRha2VuIGFmdGVyIHJlZ2lzdHJhdGlvbicsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkJJ3ZhbHVlJyA9PiAkY2hlY2ttYWlsX2FjdGlvblsgJHJvbGVtZXRhWydfdW1fY2hlY2ttYWlsX2FjdGlvbiddIF0sCgkJCQkJCQkpLAoJCQkJCQkpCgkJCQkJKTsKCQkJCX0KCgkJCQlpZiAoICdzaG93X21lc3NhZ2UnID09PSAkcm9sZW1ldGFbJ191bV9jaGVja21haWxfYWN0aW9uJ10gKSB7CgkJCQkJaWYgKCBhcnJheV9rZXlfZXhpc3RzKCAnX3VtX2NoZWNrbWFpbF9tZXNzYWdlJywgJHJvbGVtZXRhICkgKSB7CgkJCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLScgLiAka2V5IF1bJ2ZpZWxkcyddID0gYXJyYXlfbWVyZ2UoCgkJCQkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci0nIC4gJGtleSBdWydmaWVsZHMnXSwKCQkJCQkJCWFycmF5KAoJCQkJCQkJCSd1bS1jaGVja21haWxfbWVzc2FnZScgPT4gYXJyYXkoCgkJCQkJCQkJCSdsYWJlbCcgPT4gX18oICdQZXJzb25hbGl6ZSB0aGUgY3VzdG9tIG1lc3NhZ2UnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJCQkndmFsdWUnID0+IHN0cmlwc2xhc2hlcyggJHJvbGVtZXRhWydfdW1fY2hlY2ttYWlsX21lc3NhZ2UnXSApLAoJCQkJCQkJCSksCgkJCQkJCQkpCgkJCQkJCSk7CgkJCQkJfQoJCQkJfSBlbHNlIHsKCQkJCQlpZiAoIGFycmF5X2tleV9leGlzdHMoICdfdW1fY2hlY2ttYWlsX3VybCcsICRyb2xlbWV0YSApICkgewoJCQkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci0nIC4gJGtleSBdWydmaWVsZHMnXSA9IGFycmF5X21lcmdlKAoJCQkJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItJyAuICRrZXkgXVsnZmllbGRzJ10sCgkJCQkJCQlhcnJheSgKCQkJCQkJCQkndW0tY2hlY2ttYWlsX3VybCcgPT4gYXJyYXkoCgkJCQkJCQkJCSdsYWJlbCcgPT4gX18oICdTZXQgQ3VzdG9tIFJlZGlyZWN0IFVSTCcsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkJCSd2YWx1ZScgPT4gJHJvbGVtZXRhWydfdW1fY2hlY2ttYWlsX3VybCddLAoJCQkJCQkJCSksCgkJCQkJCQkpCgkJCQkJCSk7CgkJCQkJfQoJCQkJfQoKCQkJCWlmICggYXJyYXlfa2V5X2V4aXN0cyggJ191bV91cmxfZW1haWxfYWN0aXZhdGUnLCAkcm9sZW1ldGEgKSApIHsKCQkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci0nIC4gJGtleSBdWydmaWVsZHMnXSA9IGFycmF5X21lcmdlKAoJCQkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci0nIC4gJGtleSBdWydmaWVsZHMnXSwKCQkJCQkJYXJyYXkoCgkJCQkJCQkndW0tdXJsX2VtYWlsX2FjdGl2YXRlJyA9PiBhcnJheSgKCQkJCQkJCQknbGFiZWwnID0+IF9fKCAnVVJMIHJlZGlyZWN0IGFmdGVyIGVtYWlsIGFjdGl2YXRpb24nLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJCSd2YWx1ZScgPT4gJHJvbGVtZXRhWydfdW1fdXJsX2VtYWlsX2FjdGl2YXRlJ10sCgkJCQkJCQkpLAoJCQkJCQkpCgkJCQkJKTsKCQkJCX0KCQkJfQoKCQkJaWYgKCBhcnJheV9rZXlfZXhpc3RzKCAnX3VtX3N0YXR1cycsICRyb2xlbWV0YSApICYmICdwZW5kaW5nJyA9PT0gJHJvbGVtZXRhWydfdW1fc3RhdHVzJ10gKSB7CgkJCQkkcGVuZGluZ19hY3Rpb24gPSBhcnJheSgKCQkJCQknc2hvd19tZXNzYWdlJyA9PiBfXyggJ1Nob3cgY3VzdG9tIG1lc3NhZ2UnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCSdyZWRpcmVjdF91cmwnID0+IF9fKCAnUmVkaXJlY3QgdG8gVVJMJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCSk7CgoJCQkJaWYgKCBhcnJheV9rZXlfZXhpc3RzKCAnX3VtX3BlbmRpbmdfYWN0aW9uJywgJHJvbGVtZXRhICkgKSB7CgkJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItJyAuICRrZXkgXVsnZmllbGRzJ10gPSBhcnJheV9tZXJnZSgKCQkJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItJyAuICRrZXkgXVsnZmllbGRzJ10sCgkJCQkJCWFycmF5KAoJCQkJCQkJJ3VtLXBlbmRpbmdfYWN0aW9uJyA9PiBhcnJheSgKCQkJCQkJCQknbGFiZWwnID0+IF9fKCAnQWN0aW9uIHRvIGJlIHRha2VuIGFmdGVyIHJlZ2lzdHJhdGlvbicsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkJJ3ZhbHVlJyA9PiAkcGVuZGluZ19hY3Rpb25bICRyb2xlbWV0YVsnX3VtX3BlbmRpbmdfYWN0aW9uJ10gXSwKCQkJCQkJCSksCgkJCQkJCSkKCQkJCQkpOwoJCQkJfQoKCQkJCWlmICggJ3Nob3dfbWVzc2FnZScgPT09ICRyb2xlbWV0YVsnX3VtX3BlbmRpbmdfYWN0aW9uJ10gKSB7CgkJCQkJaWYgKCBhcnJheV9rZXlfZXhpc3RzKCAnX3VtX3BlbmRpbmdfbWVzc2FnZScsICRyb2xlbWV0YSApICkgewoJCQkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci0nIC4gJGtleSBdWydmaWVsZHMnXSA9IGFycmF5X21lcmdlKAoJCQkJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItJyAuICRrZXkgXVsnZmllbGRzJ10sCgkJCQkJCQlhcnJheSgKCQkJCQkJCQkndW0tcGVuZGluZ19tZXNzYWdlJyA9PiBhcnJheSgKCQkJCQkJCQkJJ2xhYmVsJyA9PiBfXyggJ1BlcnNvbmFsaXplIHRoZSBjdXN0b20gbWVzc2FnZScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkJCSd2YWx1ZScgPT4gc3RyaXBzbGFzaGVzKCAkcm9sZW1ldGFbJ191bV9wZW5kaW5nX21lc3NhZ2UnXSApLAoJCQkJCQkJCSksCgkJCQkJCQkpCgkJCQkJCSk7CgkJCQkJfQoJCQkJfSBlbHNlIHsKCQkJCQlpZiAoIGFycmF5X2tleV9leGlzdHMoICdfdW1fcGVuZGluZ191cmwnLCAkcm9sZW1ldGEgKSApIHsKCQkJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItJyAuICRrZXkgXVsnZmllbGRzJ10gPSBhcnJheV9tZXJnZSgKCQkJCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLScgLiAka2V5IF1bJ2ZpZWxkcyddLAoJCQkJCQkJYXJyYXkoCgkJCQkJCQkJJ3VtLXBlbmRpbmdfdXJsJyA9PiBhcnJheSgKCQkJCQkJCQkJJ2xhYmVsJyA9PiBfXyggJ1NldCBDdXN0b20gUmVkaXJlY3QgVVJMJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCQkJCQkJJ3ZhbHVlJyA9PiAkcm9sZW1ldGFbJ191bV9wZW5kaW5nX3VybCddLAoJCQkJCQkJCSksCgkJCQkJCQkpCgkJCQkJCSk7CgkJCQkJfQoJCQkJfQoJCQl9CgoJCQkkYWZ0ZXJfbG9naW5fb3B0aW9ucyA9IGFycmF5KAoJCQkJJ3JlZGlyZWN0X3Byb2ZpbGUnID0+IF9fKCAnUmVkaXJlY3QgdG8gcHJvZmlsZScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkncmVkaXJlY3RfdXJsJyAgICAgPT4gX18oICdSZWRpcmVjdCB0byBVUkwnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJJ3JlZnJlc2gnICAgICAgICAgID0+IF9fKCAnUmVmcmVzaCBhY3RpdmUgcGFnZScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkncmVkaXJlY3RfYWRtaW4nICAgPT4gX18oICdSZWRpcmVjdCB0byBXb3JkUHJlc3MgQWRtaW4nLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkpOwoKCQkJaWYgKCBhcnJheV9rZXlfZXhpc3RzKCAnX3VtX2FmdGVyX2xvZ2luJywgJHJvbGVtZXRhICkgJiYgaXNzZXQoICRhZnRlcl9sb2dpbl9vcHRpb25zWyAkcm9sZW1ldGFbJ191bV9hZnRlcl9sb2dpbiddIF0gKSApIHsKCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLScgLiAka2V5IF1bJ2ZpZWxkcyddID0gYXJyYXlfbWVyZ2UoCgkJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItJyAuICRrZXkgXVsnZmllbGRzJ10sCgkJCQkJYXJyYXkoCgkJCQkJCSd1bS1hZnRlcl9sb2dpbicgPT4gYXJyYXkoCgkJCQkJCQknbGFiZWwnID0+IF9fKCAnQWN0aW9uIHRvIGJlIHRha2VuIGFmdGVyIGxvZ2luJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCQkJCSd2YWx1ZScgPT4gJGFmdGVyX2xvZ2luX29wdGlvbnNbICRyb2xlbWV0YVsnX3VtX2FmdGVyX2xvZ2luJ10gXSwKCQkJCQkJKSwKCQkJCQkpCgkJCQkpOwoJCQl9CgoJCQlpZiAoIGFycmF5X2tleV9leGlzdHMoICdfdW1fbG9naW5fcmVkaXJlY3RfdXJsJywgJHJvbGVtZXRhICkgJiYgJ3JlZGlyZWN0X3VybCcgPT09ICRyb2xlbWV0YVsnX3VtX2xvZ2luX3JlZGlyZWN0X3VybCddICkgewoJCQkJaWYgKCBhcnJheV9rZXlfZXhpc3RzKCAnX3VtX3BlbmRpbmdfdXJsJywgJHJvbGVtZXRhICkgKSB7CgkJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItJyAuICRrZXkgXVsnZmllbGRzJ10gPSBhcnJheV9tZXJnZSgKCQkJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItJyAuICRrZXkgXVsnZmllbGRzJ10sCgkJCQkJCWFycmF5KAoJCQkJCQkJJ3VtLWxvZ2luX3JlZGlyZWN0X3VybCcgPT4gYXJyYXkoCgkJCQkJCQkJJ2xhYmVsJyA9PiBfXyggJ1NldCBDdXN0b20gUmVkaXJlY3QgVVJMJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCQkJCQkndmFsdWUnID0+ICRyb2xlbWV0YVsnX3VtX2xvZ2luX3JlZGlyZWN0X3VybCddLAoJCQkJCQkJKSwKCQkJCQkJKQoJCQkJCSk7CgkJCQl9CgkJCX0KCgkJCSRyZWRpcmVjdF9vcHRpb25zID0gYXJyYXkoCgkJCQkncmVkaXJlY3RfaG9tZScgPT4gX18oICdHbyB0byBIb21lcGFnZScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkncmVkaXJlY3RfdXJsJyAgPT4gX18oICdHbyB0byBDdXN0b20gVVJMJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJKTsKCQkJaWYgKCAhIGlzc2V0KCAkcm9sZW1ldGFbJ191bV9hZnRlcl9sb2dvdXQnXSApICkgewoJCQkJJHJvbGVtZXRhWydfdW1fYWZ0ZXJfbG9nb3V0J10gPSAncmVkaXJlY3RfaG9tZSc7CgkJCX0KCQkJaWYgKCBhcnJheV9rZXlfZXhpc3RzKCAnX3VtX2FmdGVyX2xvZ291dCcsICRyb2xlbWV0YSApICYmIGlzc2V0KCAkcmVkaXJlY3Rfb3B0aW9uc1sgJHJvbGVtZXRhWydfdW1fYWZ0ZXJfbG9nb3V0J10gXSApICkgewoJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItJyAuICRrZXkgXVsnZmllbGRzJ10gPSBhcnJheV9tZXJnZSgKCQkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci0nIC4gJGtleSBdWydmaWVsZHMnXSwKCQkJCQlhcnJheSgKCQkJCQkJJ3VtLWFmdGVyX2xvZ291dCcgPT4gYXJyYXkoCgkJCQkJCQknbGFiZWwnID0+IF9fKCAnQWN0aW9uIHRvIGJlIHRha2VuIGFmdGVyIGxvZ291dCcsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkndmFsdWUnID0+ICRyZWRpcmVjdF9vcHRpb25zWyAkcm9sZW1ldGFbJ191bV9hZnRlcl9sb2dvdXQnXSBdLAoJCQkJCQkpLAoJCQkJCSkKCQkJCSk7CgkJCX0KCgkJCWlmICggJ3JlZGlyZWN0X3VybCcgPT09ICRyb2xlbWV0YVsnX3VtX2FmdGVyX2xvZ291dCddICkgewoJCQkJaWYgKCBhcnJheV9rZXlfZXhpc3RzKCAnX3VtX2xvZ291dF9yZWRpcmVjdF91cmwnLCAkcm9sZW1ldGEgKSApIHsKCQkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci0nIC4gJGtleSBdWydmaWVsZHMnXSA9IGFycmF5X21lcmdlKAoJCQkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci0nIC4gJGtleSBdWydmaWVsZHMnXSwKCQkJCQkJYXJyYXkoCgkJCQkJCQkndW0tbG9nb3V0X3JlZGlyZWN0X3VybCcgPT4gYXJyYXkoCgkJCQkJCQkJJ2xhYmVsJyA9PiBfXyggJ1NldCBDdXN0b20gUmVkaXJlY3QgVVJMJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCQkJCQkndmFsdWUnID0+ICRyb2xlbWV0YVsnX3VtX2xvZ291dF9yZWRpcmVjdF91cmwnXSwKCQkJCQkJCSksCgkJCQkJCSkKCQkJCQkpOwoJCQkJfQoJCQl9CgoJCQlpZiAoICEgaXNzZXQoICRyb2xlbWV0YVsnX3VtX2FmdGVyX2RlbGV0ZSddICkgKSB7CgkJCQkkcm9sZW1ldGFbJ191bV9hZnRlcl9kZWxldGUnXSA9ICdyZWRpcmVjdF9ob21lJzsKCQkJfQoJCQlpZiAoIGFycmF5X2tleV9leGlzdHMoICdfdW1fYWZ0ZXJfZGVsZXRlJywgJHJvbGVtZXRhICkgJiYgaXNzZXQoICRyZWRpcmVjdF9vcHRpb25zWyAkcm9sZW1ldGFbJ191bV9hZnRlcl9kZWxldGUnXSBdICkgKSB7CgkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci0nIC4gJGtleSBdWydmaWVsZHMnXSA9IGFycmF5X21lcmdlKAoJCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLScgLiAka2V5IF1bJ2ZpZWxkcyddLAoJCQkJCWFycmF5KAoJCQkJCQkndW0tYWZ0ZXJfZGVsZXRlJyA9PiBhcnJheSgKCQkJCQkJCSdsYWJlbCcgPT4gX18oICdBY3Rpb24gdG8gYmUgdGFrZW4gYWZ0ZXIgYWNjb3VudCBpcyBkZWxldGVkJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCQkJCSd2YWx1ZScgPT4gJHJlZGlyZWN0X29wdGlvbnNbICRyb2xlbWV0YVsnX3VtX2FmdGVyX2RlbGV0ZSddIF0sCgkJCQkJCSksCgkJCQkJKQoJCQkJKTsKCQkJfQoKCQkJaWYgKCAncmVkaXJlY3RfdXJsJyA9PT0gJHJvbGVtZXRhWydfdW1fYWZ0ZXJfZGVsZXRlJ10gKSB7CgkJCQlpZiAoIGFycmF5X2tleV9leGlzdHMoICdfdW1fZGVsZXRlX3JlZGlyZWN0X3VybCcsICRyb2xlbWV0YSApICkgewoJCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLScgLiAka2V5IF1bJ2ZpZWxkcyddID0gYXJyYXlfbWVyZ2UoCgkJCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLScgLiAka2V5IF1bJ2ZpZWxkcyddLAoJCQkJCQlhcnJheSgKCQkJCQkJCSd1bS1kZWxldGVfcmVkaXJlY3RfdXJsJyA9PiBhcnJheSgKCQkJCQkJCQknbGFiZWwnID0+IF9fKCAnU2V0IEN1c3RvbSBSZWRpcmVjdCBVUkwnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJCSd2YWx1ZScgPT4gJHJvbGVtZXRhWydfdW1fZGVsZXRlX3JlZGlyZWN0X3VybCddLAoJCQkJCQkJKSwKCQkJCQkJKQoJCQkJCSk7CgkJCQl9CgkJCX0KCgkJCWlmICggISBlbXB0eSggJHJvbGVtZXRhWyd3cF9jYXBhYmlsaXRpZXMnXSApICkgewoJCQkJaWYgKCBhcnJheV9rZXlfZXhpc3RzKCAnd3BfY2FwYWJpbGl0aWVzJywgJHJvbGVtZXRhICkgKSB7CgkJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItJyAuICRrZXkgXVsnZmllbGRzJ10gPSBhcnJheV9tZXJnZSgKCQkJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItJyAuICRrZXkgXVsnZmllbGRzJ10sCgkJCQkJCWFycmF5KAoJCQkJCQkJJ3VtLXdwX2NhcGFiaWxpdGllcycgPT4gYXJyYXkoCgkJCQkJCQkJJ2xhYmVsJyA9PiBfXyggJ1dQIENhcGFiaWxpdGllcycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkJJ3ZhbHVlJyA9PiAkcm9sZW1ldGFbJ3dwX2NhcGFiaWxpdGllcyddLAoJCQkJCQkJKSwKCQkJCQkJKQoJCQkJCSk7CgkJCQl9CgkJCX0KCgkJCSRpbmZvID0gYXBwbHlfZmlsdGVycyggJ3VtX2RlYnVnX2luZm9ybWF0aW9uX3VzZXJfcm9sZScsICRpbmZvLCAka2V5ICk7CgkJfQoKCQkvLyBGb3JtcyBzZXR0aW5ncwoJCWlmICggISBlbXB0eSggJHRoaXMtPmdldF9mb3JtcygpICkgKSB7CgkJCSRpbmZvWyd1bHRpbWF0ZS1tZW1iZXItZm9ybXMnXSA9IGFycmF5KAoJCQkJJ2xhYmVsJyAgICAgICA9PiBfXyggJ1VsdGltYXRlIE1lbWJlciBGb3JtcycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQknZGVzY3JpcHRpb24nID0+IF9fKCAnVGhpcyBkZWJ1ZyBpbmZvcm1hdGlvbiBmb3IgeW91ciBVbHRpbWF0ZSBNZW1iZXIgZm9ybXMuJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCSdmaWVsZHMnICAgICAgPT4gYXJyYXkoCgkJCQkJJ3VtLWZvcm1zJyA9PiBhcnJheSgKCQkJCQkJJ2xhYmVsJyA9PiBfXyggJ1VNIEZvcm1zJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCQkJJ3ZhbHVlJyA9PiAkdGhpcy0+Z2V0X2Zvcm1zKCksCgkJCQkJKSwKCQkJCSksCgkJCSk7CgoJCQlmb3JlYWNoICggJHRoaXMtPmdldF9mb3JtcygpIGFzICRrZXkgPT4gJGZvcm0gKSB7CgkJCQlpZiAoIHN0cnBvcyggJGtleSwgJ0lEIycgKSA9PT0gMCApIHsKCQkJCQkka2V5ID0gc3Vic3RyKCAka2V5LCAzICk7CgkJCQl9CgoJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItJyAuICRrZXkgXSA9IGFycmF5KAoJCQkJCSdsYWJlbCcgICAgICAgPT4gJyAtICcgLiAkZm9ybSAuIF9fKCAnIGZvcm0gc2V0dGluZ3MnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCSdkZXNjcmlwdGlvbicgPT4gX18oICdUaGlzIGRlYnVnIGluZm9ybWF0aW9uIGZvciB5b3VyIFVsdGltYXRlIE1lbWJlciBmb3JtLicsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJJ2ZpZWxkcycgICAgICA9PiBhcnJheSgKCQkJCQkJJ3VtLWZvcm0tc2hvcnRjb2RlJyA9PiBhcnJheSgKCQkJCQkJCSdsYWJlbCcgPT4gX18oICdTaG9ydGNvZGUnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJJ3ZhbHVlJyA9PiAnW3VsdGltYXRlbWVtYmVyIGZvcm1faWQ9IicgLiAka2V5IC4gJyJdJywKCQkJCQkJKSwKCQkJCQkJJ3VtLW1vZGUnICAgICAgICAgICA9PiBhcnJheSgKCQkJCQkJCSdsYWJlbCcgPT4gX18oICdUeXBlJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCQkJCSd2YWx1ZScgPT4gZ2V0X3Bvc3RfbWV0YSggJGtleSwgJ191bV9tb2RlJywgdHJ1ZSApLAoJCQkJCQkpLAoJCQkJCSksCgkJCQkpOwoKCQkJCWlmICggJ3JlZ2lzdGVyJyA9PT0gZ2V0X3Bvc3RfbWV0YSggJGtleSwgJ191bV9tb2RlJywgdHJ1ZSApICkgewoJCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLScgLiAka2V5IF1bJ2ZpZWxkcyddID0gYXJyYXlfbWVyZ2UoCgkJCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLScgLiAka2V5IF1bJ2ZpZWxkcyddLAoJCQkJCQlhcnJheSgKCQkJCQkJCSd1bS1yZWdpc3Rlcl9yb2xlJyAgICAgICAgICAgICA9PiBhcnJheSgKCQkJCQkJCQknbGFiZWwnID0+IF9fKCAnVXNlciByZWdpc3RyYXRpb24gcm9sZScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkJJ3ZhbHVlJyA9PiAwID09PSBhYnNpbnQoIGdldF9wb3N0X21ldGEoICRrZXksICdfdW1fcmVnaXN0ZXJfcm9sZScsIHRydWUgKSApID8gJGxhYmVsc1snZGVmYXVsdCddIDogZ2V0X3Bvc3RfbWV0YSggJGtleSwgJ191bV9yZWdpc3Rlcl9yb2xlJywgdHJ1ZSApLAoJCQkJCQkJKSwKCQkJCQkJCSd1bS1yZWdpc3Rlcl90ZW1wbGF0ZScgICAgICAgICA9PiBhcnJheSgKCQkJCQkJCQknbGFiZWwnID0+IF9fKCAnVGVtcGxhdGUnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJCSd2YWx1ZScgPT4gMCA9PT0gYWJzaW50KCBnZXRfcG9zdF9tZXRhKCAka2V5LCAnX3VtX3JlZ2lzdGVyX3RlbXBsYXRlJywgdHJ1ZSApICkgPyAkbGFiZWxzWydkZWZhdWx0J10gOiBnZXRfcG9zdF9tZXRhKCAka2V5LCAnX3VtX3JlZ2lzdGVyX3RlbXBsYXRlJywgdHJ1ZSApLAoJCQkJCQkJKSwKCQkJCQkJCSd1bS1yZWdpc3Rlcl9wcmltYXJ5X2J0bl93b3JkJyA9PiBhcnJheSgKCQkJCQkJCQknbGFiZWwnID0+IF9fKCAnUHJpbWFyeSBCdXR0b24gVGV4dCcsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkJJ3ZhbHVlJyA9PiAhIGdldF9wb3N0X21ldGEoICRrZXksICdfdW1fcmVnaXN0ZXJfcHJpbWFyeV9idG5fd29yZCcsIHRydWUgKSA/ICRsYWJlbHNbJ2RlZmF1bHQnXSA6IGdldF9wb3N0X21ldGEoICRrZXksICdfdW1fcmVnaXN0ZXJfcHJpbWFyeV9idG5fd29yZCcsIHRydWUgKSwKCQkJCQkJCSksCgkJCQkJCQkndW0tcmVnaXN0ZXJfdXNlX2dkcHInICAgICAgICAgPT4gYXJyYXkoCgkJCQkJCQkJJ2xhYmVsJyA9PiBfXyggJ0VuYWJsZSBwcml2YWN5IHBvbGljeSBhZ3JlZW1lbnQnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJCSd2YWx1ZScgPT4gZ2V0X3Bvc3RfbWV0YSggJGtleSwgJ191bV9yZWdpc3Rlcl91c2VfZ2RwcicsIHRydWUgKSA/ICRsYWJlbHNbJ3llcyddIDogJGxhYmVsc1snbm8nXSwKCQkJCQkJCSksCgkJCQkJCSkKCQkJCQkpOwoKCQkJCQlpZiAoIDEgPT09IGFic2ludCggZ2V0X3Bvc3RfbWV0YSggJGtleSwgJ191bV9yZWdpc3Rlcl91c2VfZ2RwcicsIHRydWUgKSApICkgewoJCQkJCQkkZ2Rwcl9jb250ZW50X2lkID0gZ2V0X3Bvc3RfbWV0YSggJGtleSwgJ191bV9yZWdpc3Rlcl91c2VfZ2Rwcl9jb250ZW50X2lkJywgdHJ1ZSApOwoKCQkJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItJyAuICRrZXkgXVsnZmllbGRzJ10gPSBhcnJheV9tZXJnZSgKCQkJCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLScgLiAka2V5IF1bJ2ZpZWxkcyddLAoJCQkJCQkJYXJyYXkoCgkJCQkJCQkJJ3VtLXJlZ2lzdGVyX3VzZV9nZHByX2NvbnRlbnRfaWQnID0+IGFycmF5KAoJCQkJCQkJCQknbGFiZWwnID0+IF9fKCAnUHJpdmFjeSBwb2xpY3kgY29udGVudCcsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkJCSd2YWx1ZScgPT4gJGdkcHJfY29udGVudF9pZCA/IGdldF90aGVfdGl0bGUoICRnZHByX2NvbnRlbnRfaWQgKSAuICcoJyAuICRnZHByX2NvbnRlbnRfaWQgLiAnKScgLiBnZXRfdGhlX3Blcm1hbGluayggJGdkcHJfY29udGVudF9pZCApIDogJycsCgkJCQkJCQkJKSwKCQkJCQkJCQkndW0tcmVnaXN0ZXJfdXNlX2dkcHJfdG9nZ2xlX3Nob3cnID0+IGFycmF5KAoJCQkJCQkJCQknbGFiZWwnID0+IF9fKCAnVG9nZ2xlIFNob3cgdGV4dCcsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkJCSd2YWx1ZScgPT4gZ2V0X3Bvc3RfbWV0YSggJGtleSwgJ191bV9yZWdpc3Rlcl91c2VfZ2Rwcl90b2dnbGVfc2hvdycsIHRydWUgKSwKCQkJCQkJCQkpLAoJCQkJCQkJCSd1bS1yZWdpc3Rlcl91c2VfZ2Rwcl90b2dnbGVfaGlkZScgPT4gYXJyYXkoCgkJCQkJCQkJCSdsYWJlbCcgPT4gX18oICdUb2dnbGUgSGlkZSB0ZXh0JywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCQkJCQkJJ3ZhbHVlJyA9PiBnZXRfcG9zdF9tZXRhKCAka2V5LCAnX3VtX3JlZ2lzdGVyX3VzZV9nZHByX3RvZ2dsZV9oaWRlJywgdHJ1ZSApLAoJCQkJCQkJCSksCgkJCQkJCQkJJ3VtLXJlZ2lzdGVyX3VzZV9nZHByX2FncmVlbWVudCcgPT4gYXJyYXkoCgkJCQkJCQkJCSdsYWJlbCcgPT4gX18oICdDaGVja2JveCBhZ3JlZW1lbnQgZGVzY3JpcHRpb24nLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJCQkndmFsdWUnID0+IGdldF9wb3N0X21ldGEoICRrZXksICdfdW1fcmVnaXN0ZXJfdXNlX2dkcHJfYWdyZWVtZW50JywgdHJ1ZSApLAoJCQkJCQkJCSksCgkJCQkJCQkJJ3VtLXJlZ2lzdGVyX3VzZV9nZHByX2Vycm9yX3RleHQnID0+IGFycmF5KAoJCQkJCQkJCQknbGFiZWwnID0+IF9fKCAnRXJyb3IgVGV4dCcsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkJCSd2YWx1ZScgPT4gZ2V0X3Bvc3RfbWV0YSggJGtleSwgJ191bV9yZWdpc3Rlcl91c2VfZ2Rwcl9lcnJvcl90ZXh0JywgdHJ1ZSApLAoJCQkJCQkJCSksCgkJCQkJCQkpCgkJCQkJCSk7CgkJCQkJfQoKCQkJCQkkaW5mbyA9IGFwcGx5X2ZpbHRlcnMoICd1bV9kZWJ1Z19pbmZvcm1hdGlvbl9yZWdpc3Rlcl9mb3JtJywgJGluZm8sICRrZXkgKTsKCgkJCQkJJGZpZWxkcyA9IGdldF9wb3N0X21ldGEoICRrZXksICdfdW1fY3VzdG9tX2ZpZWxkcycsIHRydWUgKTsKCQkJCQlpZiAoICEgZW1wdHkoICRmaWVsZHMgKSAmJiBpc19hcnJheSggJGZpZWxkcyApICkgewoJCQkJCQlmb3JlYWNoICggJGZpZWxkcyBhcyAkZmllbGRfa2V5ID0+ICRmaWVsZCApIHsKCQkJCQkJCSRmaWVsZF9pbmZvID0gJHRoaXMtPmdldF9maWVsZF9kYXRhKCAkaW5mbywgJGtleSwgJGZpZWxkX2tleSwgJGZpZWxkICk7CgoJCQkJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItJyAuICRrZXkgXVsnZmllbGRzJ10gPSBhcnJheV9tZXJnZSgKCQkJCQkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci0nIC4gJGtleSBdWydmaWVsZHMnXSwKCQkJCQkJCQkkZmllbGRfaW5mbwoJCQkJCQkJKTsKCQkJCQkJfQoJCQkJCX0KCQkJCX0gZWxzZWlmICggJ2xvZ2luJyA9PT0gZ2V0X3Bvc3RfbWV0YSggJGtleSwgJ191bV9tb2RlJywgdHJ1ZSApICkgewoJCQkJCSRsb2dpbl9yZWRpcmVjdF9vcHRpb25zID0gYXJyYXkoCgkJCQkJCScwJyAgICAgICAgICAgICAgICA9PiBfXyggJ0RlZmF1bHQnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkncmVkaXJlY3RfcHJvZmlsZScgPT4gX18oICdSZWRpcmVjdCB0byBwcm9maWxlJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCQkJJ3JlZGlyZWN0X3VybCcgICAgID0+IF9fKCAnUmVkaXJlY3QgdG8gVVJMJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCQkJJ3JlZnJlc2gnICAgICAgICAgID0+IF9fKCAnUmVmcmVzaCBhY3RpdmUgcGFnZScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCSdyZWRpcmVjdF9hZG1pbicgICA9PiBfXyggJ1JlZGlyZWN0IHRvIFdvcmRQcmVzcyBBZG1pbicsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJKTsKCgkJCQkJJGxvZ2luX2FmdGVyX2xvZ2luID0gZ2V0X3Bvc3RfbWV0YSggJGtleSwgJ191bV9sb2dpbl9hZnRlcl9sb2dpbicsIHRydWUgKTsKCQkJCQkkbG9naW5fYWZ0ZXJfbG9naW4gPSAnJyA9PT0gJGxvZ2luX2FmdGVyX2xvZ2luID8gJzAnIDogJGxvZ2luX2FmdGVyX2xvZ2luOwoKCQkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci0nIC4gJGtleSBdWydmaWVsZHMnXSA9IGFycmF5X21lcmdlKAoJCQkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci0nIC4gJGtleSBdWydmaWVsZHMnXSwKCQkJCQkJYXJyYXkoCgkJCQkJCQkndW0tbG9naW5fdGVtcGxhdGUnICAgICAgICAgPT4gYXJyYXkoCgkJCQkJCQkJJ2xhYmVsJyA9PiBfXyggJ1RlbXBsYXRlJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCQkJCQkndmFsdWUnID0+IDAgPT09IGFic2ludCggZ2V0X3Bvc3RfbWV0YSggJGtleSwgJ191bV9sb2dpbl90ZW1wbGF0ZScsIHRydWUgKSApID8gJGxhYmVsc1snZGVmYXVsdCddIDogZ2V0X3Bvc3RfbWV0YSggJGtleSwgJ191bV9sb2dpbl90ZW1wbGF0ZScsIHRydWUgKSwKCQkJCQkJCSksCgkJCQkJCQkndW0tbG9naW5fcHJpbWFyeV9idG5fd29yZCcgPT4gYXJyYXkoCgkJCQkJCQkJJ2xhYmVsJyA9PiBfXyggJ1ByaW1hcnkgQnV0dG9uIFRleHQnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJCSd2YWx1ZScgPT4gISBnZXRfcG9zdF9tZXRhKCAka2V5LCAnX3VtX2xvZ2luX3ByaW1hcnlfYnRuX3dvcmQnLCB0cnVlICkgPyAkbGFiZWxzWydkZWZhdWx0J10gOiBnZXRfcG9zdF9tZXRhKCAka2V5LCAnX3VtX2xvZ2luX3ByaW1hcnlfYnRuX3dvcmQnLCB0cnVlICksCgkJCQkJCQkpLAoJCQkJCQkJJ3VtLWxvZ2luX2ZvcmdvdF9wYXNzX2xpbmsnID0+IGFycmF5KAoJCQkJCQkJCSdsYWJlbCcgPT4gX18oICdTaG93IEZvcmdvdCBQYXNzd29yZCBMaW5rPycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkJJ3ZhbHVlJyA9PiBnZXRfcG9zdF9tZXRhKCAka2V5LCAnX3VtX2xvZ2luX2ZvcmdvdF9wYXNzX2xpbmsnLCB0cnVlICkgPyAkbGFiZWxzWyd5ZXMnXSA6ICRsYWJlbHNbJ25vJ10sCgkJCQkJCQkpLAoJCQkJCQkJJ3VtLWxvZ2luX3Nob3dfcmVtZW1iZXJtZScgID0+IGFycmF5KAoJCQkJCQkJCSdsYWJlbCcgPT4gX18oICdTaG93ICJSZW1lbWJlciBNZSI/JywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCQkJCQkndmFsdWUnID0+IGdldF9wb3N0X21ldGEoICRrZXksICdfdW1fbG9naW5fc2hvd19yZW1lbWJlcm1lJywgdHJ1ZSApID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCQkJCQkJKSwKCQkJCQkJCSd1bS1sb2dpbl9hZnRlcl9sb2dpbicgICAgICA9PiBhcnJheSgKCQkJCQkJCQknbGFiZWwnID0+IF9fKCAnUmVkaXJlY3Rpb24gYWZ0ZXIgTG9naW4nLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJCSd2YWx1ZScgPT4gJGxvZ2luX3JlZGlyZWN0X29wdGlvbnNbICRsb2dpbl9hZnRlcl9sb2dpbiBdLAoJCQkJCQkJKSwKCQkJCQkJKQoJCQkJCSk7CgoJCQkJCWlmICggJ3JlZGlyZWN0X3VybCcgPT09IGdldF9wb3N0X21ldGEoICRrZXksICdfdW1fbG9naW5fYWZ0ZXJfbG9naW4nLCB0cnVlICkgKSB7CgkJCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLScgLiAka2V5IF1bJ2ZpZWxkcyddID0gYXJyYXlfbWVyZ2UoCgkJCQkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci0nIC4gJGtleSBdWydmaWVsZHMnXSwKCQkJCQkJCWFycmF5KAoJCQkJCQkJCSd1bS1sb2dpbl9yZWRpcmVjdF91cmwnID0+IGFycmF5KAoJCQkJCQkJCQknbGFiZWwnID0+IF9fKCAnU2V0IEN1c3RvbSBSZWRpcmVjdCBVUkwnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJCQkndmFsdWUnID0+IGdldF9wb3N0X21ldGEoICRrZXksICdfdW1fbG9naW5fcmVkaXJlY3RfdXJsJywgdHJ1ZSApLAoJCQkJCQkJCSksCgkJCQkJCQkpCgkJCQkJCSk7CgkJCQkJfQoKCQkJCQkkaW5mbyA9IGFwcGx5X2ZpbHRlcnMoICd1bV9kZWJ1Z19pbmZvcm1hdGlvbl9sb2dpbl9mb3JtJywgJGluZm8sICRrZXkgKTsKCgkJCQkJJGZpZWxkcyA9IGdldF9wb3N0X21ldGEoICRrZXksICdfdW1fY3VzdG9tX2ZpZWxkcycsIHRydWUgKTsKCQkJCQlpZiAoICEgZW1wdHkoICRmaWVsZHMgKSAmJiBpc19hcnJheSggJGZpZWxkcyApICkgewoJCQkJCQlmb3JlYWNoICggJGZpZWxkcyBhcyAkZmllbGRfa2V5ID0+ICRmaWVsZCApIHsKCQkJCQkJCSRmaWVsZF9pbmZvID0gJHRoaXMtPmdldF9maWVsZF9kYXRhKCAkaW5mbywgJGtleSwgJGZpZWxkX2tleSwgJGZpZWxkICk7CgoJCQkJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItJyAuICRrZXkgXVsnZmllbGRzJ10gPSBhcnJheV9tZXJnZSgKCQkJCQkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci0nIC4gJGtleSBdWydmaWVsZHMnXSwKCQkJCQkJCQkkZmllbGRfaW5mbwoJCQkJCQkJKTsKCQkJCQkJfQoJCQkJCX0KCQkJCX0gZWxzZWlmICggJ3Byb2ZpbGUnID09PSBnZXRfcG9zdF9tZXRhKCAka2V5LCAnX3VtX21vZGUnLCB0cnVlICkgKSB7CgkJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItJyAuICRrZXkgXVsnZmllbGRzJ10gPSBhcnJheV9tZXJnZSgKCQkJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItJyAuICRrZXkgXVsnZmllbGRzJ10sCgkJCQkJCWFycmF5KAoJCQkJCQkJJ3VtLXByb2ZpbGVfcm9sZScgICAgICAgICAgICAgPT4gYXJyYXkoCgkJCQkJCQkJJ2xhYmVsJyA9PiBfXyggJ01ha2UgdGhpcyBwcm9maWxlIGZvcm0gcm9sZS1zcGVjaWZpYycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkJJ3ZhbHVlJyA9PiAhIGVtcHR5KCBnZXRfcG9zdF9tZXRhKCAka2V5LCAnX3VtX3Byb2ZpbGVfcm9sZScsIHRydWUgKSApID8gZ2V0X3Bvc3RfbWV0YSggJGtleSwgJ191bV9wcm9maWxlX3JvbGUnLCB0cnVlICkgOiAkbGFiZWxzWydhbGwnXSwKCQkJCQkJCSksCgkJCQkJCQkndW0tcHJvZmlsZV90ZW1wbGF0ZScgICAgICAgICA9PiBhcnJheSgKCQkJCQkJCQknbGFiZWwnID0+IF9fKCAnVGVtcGxhdGUnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJCSd2YWx1ZScgPT4gMCA9PT0gYWJzaW50KCBnZXRfcG9zdF9tZXRhKCAka2V5LCAnX3VtX3Byb2ZpbGVfdGVtcGxhdGUnLCB0cnVlICkgKSA/ICRsYWJlbHNbJ2RlZmF1bHQnXSA6IGdldF9wb3N0X21ldGEoICRrZXksICdfdW1fcHJvZmlsZV90ZW1wbGF0ZScsIHRydWUgKSwKCQkJCQkJCSksCgkJCQkJCQkndW0tcHJvZmlsZV9wcmltYXJ5X2J0bl93b3JkJyA9PiBhcnJheSgKCQkJCQkJCQknbGFiZWwnID0+IF9fKCAnUHJpbWFyeSBCdXR0b24gVGV4dCcsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkJJ3ZhbHVlJyA9PiAhIGdldF9wb3N0X21ldGEoICRrZXksICdfdW1fcHJvZmlsZV9wcmltYXJ5X2J0bl93b3JkJywgdHJ1ZSApID8gJGxhYmVsc1snZGVmYXVsdCddIDogZ2V0X3Bvc3RfbWV0YSggJGtleSwgJ191bV9wcm9maWxlX3ByaW1hcnlfYnRuX3dvcmQnLCB0cnVlICksCgkJCQkJCQkpLAoJCQkJCQkJJ3VtLXByb2ZpbGVfY292ZXJfZW5hYmxlZCcgICAgPT4gYXJyYXkoCgkJCQkJCQkJJ2xhYmVsJyA9PiBfXyggJ0VuYWJsZSBDb3ZlciBQaG90b3MnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJCSd2YWx1ZScgPT4gZ2V0X3Bvc3RfbWV0YSggJGtleSwgJ191bV9wcm9maWxlX2NvdmVyX2VuYWJsZWQnLCB0cnVlICkgPyAkbGFiZWxzWyd5ZXMnXSA6ICRsYWJlbHNbJ25vJ10sCgkJCQkJCQkpLAoJCQkJCQkJJ3VtLXByb2ZpbGVfZGlzYWJsZV9waG90b191cGxvYWQnID0+IGFycmF5KAoJCQkJCQkJCSdsYWJlbCcgPT4gX18oICdEaXNhYmxlIFByb2ZpbGUgUGhvdG8gVXBsb2FkJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCQkJCQkndmFsdWUnID0+IGdldF9wb3N0X21ldGEoICRrZXksICdfdW1fcHJvZmlsZV9kaXNhYmxlX3Bob3RvX3VwbG9hZCcsIHRydWUgKSA/ICRsYWJlbHNbJ3llcyddIDogJGxhYmVsc1snbm8nXSwKCQkJCQkJCSksCgkJCQkJCSkKCQkJCQkpOwoKCQkJCQlpZiAoIDAgPT09IGFic2ludCggZ2V0X3Bvc3RfbWV0YSggJGtleSwgJ191bV9wcm9maWxlX2Rpc2FibGVfcGhvdG9fdXBsb2FkJywgdHJ1ZSApICkgKSB7CgkJCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLScgLiAka2V5IF1bJ2ZpZWxkcyddID0gYXJyYXlfbWVyZ2UoCgkJCQkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci0nIC4gJGtleSBdWydmaWVsZHMnXSwKCQkJCQkJCWFycmF5KAoJCQkJCQkJCSd1bS1wcm9maWxlX3Bob3RvX3JlcXVpcmVkJyA9PiBhcnJheSgKCQkJCQkJCQkJJ2xhYmVsJyA9PiBfXyggJ01ha2UgUHJvZmlsZSBQaG90byBSZXF1aXJlZCcsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkJCSd2YWx1ZScgPT4gZ2V0X3Bvc3RfbWV0YSggJGtleSwgJ191bV9wcm9maWxlX3Bob3RvX3JlcXVpcmVkJywgdHJ1ZSApID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCQkJCQkJCSksCgkJCQkJCQkpCgkJCQkJCSk7CgkJCQkJfQoKCQkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci0nIC4gJGtleSBdWydmaWVsZHMnXSA9IGFycmF5X21lcmdlKAoJCQkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci0nIC4gJGtleSBdWydmaWVsZHMnXSwKCQkJCQkJYXJyYXkoCgkJCQkJCQkndW0tcHJvZmlsZV9zaG93X25hbWUnICAgICAgICAgPT4gYXJyYXkoCgkJCQkJCQkJJ2xhYmVsJyA9PiBfXyggJ1Nob3cgZGlzcGxheSBuYW1lIGluIHByb2ZpbGUgaGVhZGVyPycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkJJ3ZhbHVlJyA9PiBnZXRfcG9zdF9tZXRhKCAka2V5LCAnX3VtX3Byb2ZpbGVfc2hvd19uYW1lJywgdHJ1ZSApID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCQkJCQkJKSwKCQkJCQkJCSd1bS1wcm9maWxlX3Nob3dfc29jaWFsX2xpbmtzJyA9PiBhcnJheSgKCQkJCQkJCQknbGFiZWwnID0+IF9fKCAnU2hvdyBzb2NpYWwgbGlua3MgaW4gcHJvZmlsZSBoZWFkZXI/JywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCQkJCQkndmFsdWUnID0+IGdldF9wb3N0X21ldGEoICRrZXksICdfdW1fcHJvZmlsZV9zaG93X3NvY2lhbF9saW5rcycsIHRydWUgKSA/ICRsYWJlbHNbJ3llcyddIDogJGxhYmVsc1snbm8nXSwKCQkJCQkJCSksCgkJCQkJCQkndW0tcHJvZmlsZV9zaG93X2JpbycgICAgICAgICAgPT4gYXJyYXkoCgkJCQkJCQkJJ2xhYmVsJyA9PiBfXyggJ1Nob3cgdXNlciBkZXNjcmlwdGlvbiBpbiBwcm9maWxlIGhlYWRlcj8nLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJCSd2YWx1ZScgPT4gZ2V0X3Bvc3RfbWV0YSggJGtleSwgJ191bV9wcm9maWxlX3Nob3dfYmlvJywgdHJ1ZSApID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCQkJCQkJKSwKCQkJCQkJKQoJCQkJCSk7CgoJCQkJCSRmaWVsZHMgPSBnZXRfcG9zdF9tZXRhKCAka2V5LCAnX3VtX2N1c3RvbV9maWVsZHMnLCB0cnVlICk7CgkJCQkJaWYgKCAhIGVtcHR5KCAkZmllbGRzICkgJiYgaXNfYXJyYXkoICRmaWVsZHMgKSApIHsKCQkJCQkJZm9yZWFjaCAoICRmaWVsZHMgYXMgJGZpZWxkX2tleSA9PiAkZmllbGQgKSB7CgkJCQkJCQkkZmllbGRfaW5mbyA9ICR0aGlzLT5nZXRfZmllbGRfZGF0YSggJGluZm8sICRrZXksICRmaWVsZF9rZXksICRmaWVsZCApOwoKCQkJCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLScgLiAka2V5IF1bJ2ZpZWxkcyddID0gYXJyYXlfbWVyZ2UoCgkJCQkJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItJyAuICRrZXkgXVsnZmllbGRzJ10sCgkJCQkJCQkJJGZpZWxkX2luZm8KCQkJCQkJCSk7CgkJCQkJCX0KCQkJCQl9CgoJCQkJCSRwcm9maWxlX21ldGFmaWVsZHMgPSBnZXRfcG9zdF9tZXRhKCAka2V5LCAnX3VtX3Byb2ZpbGVfbWV0YWZpZWxkcycsIHRydWUgKTsKCQkJCQlpZiAoICEgZW1wdHkoICRwcm9maWxlX21ldGFmaWVsZHMgKSAmJiBpc19hcnJheSggJHByb2ZpbGVfbWV0YWZpZWxkcyApICkgewoJCQkJCQlmb3JlYWNoICggJHByb2ZpbGVfbWV0YWZpZWxkcyBhcyAkayA9PiAkZmllbGQgKSB7CgkJCQkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci0nIC4gJGtleSBdWydmaWVsZHMnXSA9IGFycmF5X21lcmdlKAoJCQkJCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLScgLiAka2V5IF1bJ2ZpZWxkcyddLAoJCQkJCQkJCWFycmF5KAoJCQkJCQkJCQkndW0tcHJvZmlsZV9tZXRhZmllbGRzLScgLiAkayA9PiBhcnJheSgKCQkJCQkJCQkJCSdsYWJlbCcgPT4gX18oICdGaWVsZCB0byBzaG93IGluIHVzZXIgbWV0YScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkJCQkndmFsdWUnID0+ICRmaWVsZCwKCQkJCQkJCQkJKSwKCQkJCQkJCQkpCgkJCQkJCQkpOwoJCQkJCQl9CgkJCQkJfQoJCQkJfQoJCQl9CgkJfQoKCQkvLyBNZW1iZXJzIGRpcmVjdG9yeQoJCSRvcHRpb25zID0gYXJyYXkoCgkJCSdjb3VudHJ5JyAgICAgICAgICAgICAgPT4gX18oICdDb3VudHJ5JywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJJ2dlbmRlcicgICAgICAgICAgICAgICA9PiBfXyggJ0dlbmRlcicsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCSdsYW5ndWFnZXMnICAgICAgICAgICAgPT4gX18oICdMYW5ndWFnZXMnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkncm9sZScgICAgICAgICAgICAgICAgID0+IF9fKCAnUm9sZXMnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQknYmlydGhfZGF0ZScgICAgICAgICAgID0+IF9fKCAnQWdlJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJJ2xhc3RfbG9naW4nICAgICAgICAgICA9PiBfXyggJ0xhc3QgTG9naW4nLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkndXNlcl9yZWdpc3RlcmVkJyAgICAgID0+IF9fKCAnVXNlciBSZWdpc3RlcmVkJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJJ2ZpcnN0X25hbWUnICAgICAgICAgICA9PiBfXyggJ0ZpcnN0IE5hbWUnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQknbGFzdF9uYW1lJyAgICAgICAgICAgID0+IF9fKCAnTGFzdCBOYW1lJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJJ25pY2tuYW1lJyAgICAgICAgICAgICA9PiBfXyggJ05pY2tuYW1lJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJJ3NlY29uZGFyeV91c2VyX2VtYWlsJyA9PiBfXyggJ1NlY29uZGFyeSBFbWFpbCBBZGRyZXNzJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJJ2Rlc2NyaXB0aW9uJyAgICAgICAgICA9PiBfXyggJ0Jpb2dyYXBoeScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCSdwaG9uZV9udW1iZXInICAgICAgICAgPT4gX18oICdQaG9uZSBOdW1iZXInLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQknbW9iaWxlX251bWJlcicgICAgICAgID0+IF9fKCAnTW9iaWxlIE51bWJlcicsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCSdyb2xlX3NlbGVjdCcgICAgICAgICAgPT4gX18oICdSb2xlcyAoRHJvcGRvd24pJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJJ3JvbGVfcmFkaW8nICAgICAgICAgICA9PiBfXyggJ1JvbGVzIChSYWRpbyknLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQknd2hhdHNhcHAnICAgICAgICAgICAgID0+IF9fKCAnV2hhdHNBcHAgbnVtYmVyJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJJ2ZhY2Vib29rJyAgICAgICAgICAgICA9PiBfXyggJ0ZhY2Vib29rJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJJ3R3aXR0ZXInICAgICAgICAgICAgICA9PiBfXyggJ1ggKGZvcm1lcmx5IFR3aXR0ZXIpJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJJ3ZpYmVyJyAgICAgICAgICAgICAgICA9PiBfXyggJ1ZpYmVyIG51bWJlcicsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCSdza3lwZScgICAgICAgICAgICAgICAgPT4gX18oICdTa3lwZSBJRCcsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCSd0ZWxlZ3JhbScgICAgICAgICAgICAgPT4gX18oICdUZWxlZ3JhbScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCSdkaXNjb3JkJyAgICAgICAgICAgICAgPT4gX18oICdEaXNjb3JkJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJJ3lvdXR1YmUnICAgICAgICAgICAgICA9PiBfXyggJ1lvdXR1YmUnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQknc291bmRjbG91ZCcgICAgICAgICAgID0+IF9fKCAnU291bmRDbG91ZCcsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCSd1c2VyX3JlZ2lzdGVyZWRfZGVzYycgPT4gX18oICdOZXcgdXNlcnMgZmlyc3QnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkndXNlcl9yZWdpc3RlcmVkX2FzYycgID0+IF9fKCAnT2xkIHVzZXJzIGZpcnN0JywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJJ3VzZXJuYW1lJyAgICAgICAgICAgICA9PiBfXyggJ1VzZXJuYW1lJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJJ2Rpc3BsYXlfbmFtZScgICAgICAgICA9PiBfXyggJ0Rpc3BsYXkgbmFtZScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCSdsYXN0X2ZpcnN0X25hbWUnICAgICAgPT4gX18oICdMYXN0ICYgRmlyc3QgbmFtZScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCSdyYW5kb20nICAgICAgICAgICAgICAgPT4gX18oICdSYW5kb20nLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQknb3RoZXInICAgICAgICAgICAgICAgID0+IF9fKCAnT3RoZXIgKEN1c3RvbSBGaWVsZCknLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCSk7CgoJCSRpbmZvWyd1bHRpbWF0ZS1tZW1iZXItZGlyZWN0b3JpZXMnXSA9IGFycmF5KAoJCQknbGFiZWwnICAgICAgID0+IF9fKCAnVWx0aW1hdGUgTWVtYmVyIERpcmVjdG9yaWVzJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJJ2Rlc2NyaXB0aW9uJyA9PiBfXyggJ1RoaXMgZGVidWcgaW5mb3JtYXRpb24gYWJvdXQgVWx0aW1hdGUgTWVtYmVyIGRpcmVjdG9yaWVzLicsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCSdmaWVsZHMnICAgICAgPT4gYXJyYXkoCgkJCQkndW0tZGlyZWN0b3J5JyA9PiBhcnJheSgKCQkJCQknbGFiZWwnID0+IF9fKCAnTWVtYmVyIGRpcmVjdG9yaWVzJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCQkndmFsdWUnID0+ICEgZW1wdHkoICR0aGlzLT5nZXRfbWVtYmVyX2RpcmVjdG9yaWVzKCkgKSA/ICR0aGlzLT5nZXRfbWVtYmVyX2RpcmVjdG9yaWVzKCkgOiAkbGFiZWxzWyduby1kaXInXSwKCQkJCSksCgkJCSksCgkJKTsKCgkJaWYgKCAhIGVtcHR5KCAkdGhpcy0+Z2V0X21lbWJlcl9kaXJlY3RvcmllcygpICkgKSB7CgkJCWZvcmVhY2ggKCAkdGhpcy0+Z2V0X21lbWJlcl9kaXJlY3RvcmllcygpIGFzICRrZXkgPT4gJGRpcmVjdG9yeSApIHsKCQkJCWlmICggMCA9PT0gc3RycG9zKCAka2V5LCAnSUQjJyApICkgewoJCQkJCSRrZXkgPSBzdWJzdHIoICRrZXksIDMgKTsKCQkJCX0KCgkJCQkkX3VtX3ZpZXdfdHlwZXNfdmFsdWUgPSBnZXRfcG9zdF9tZXRhKCAka2V5LCAnX3VtX3ZpZXdfdHlwZXMnLCB0cnVlICk7CgkJCQkkX3VtX3ZpZXdfdHlwZXNfdmFsdWUgPSBlbXB0eSggJF91bV92aWV3X3R5cGVzX3ZhbHVlICkgPyBhcnJheSggJ2dyaWQnLCAnbGlzdCcgKSA6ICRfdW1fdmlld190eXBlc192YWx1ZTsKCQkJCSRfdW1fdmlld190eXBlc192YWx1ZSA9IGlzX3N0cmluZyggJF91bV92aWV3X3R5cGVzX3ZhbHVlICkgPyBhcnJheSggJF91bV92aWV3X3R5cGVzX3ZhbHVlICkgOiAkX3VtX3ZpZXdfdHlwZXNfdmFsdWU7CgoJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItZGlyZWN0b3J5LScgLiAka2V5IF0gPSBhcnJheSgKCQkJCQknbGFiZWwnICAgICAgID0+ICcgLSAnIC4gJGRpcmVjdG9yeSAuIF9fKCAnIGRpcmVjdG9yeSBzZXR0aW5ncycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJJ2Rlc2NyaXB0aW9uJyA9PiBfXyggJ1RoaXMgZGVidWcgaW5mb3JtYXRpb24gZm9yIHlvdXIgVWx0aW1hdGUgTWVtYmVyIGRpcmVjdG9yeS4nLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCSdmaWVsZHMnICAgICAgPT4gYXJyYXkoCgkJCQkJCSd1bS1kaXJlY3Rvcnktc2hvcnRjb2RlJyAgICA9PiBhcnJheSgKCQkJCQkJCSdsYWJlbCcgPT4gX18oICdTaG9ydGNvZGUnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJJ3ZhbHVlJyA9PiAnW3VsdGltYXRlbWVtYmVyX2RpcmVjdG9yeSBpZD0iJyAuICRrZXkgLiAnIl0nLAoJCQkJCQkpLAoJCQkJCQkndW0tZGlyZWN0b3J5X3RlbXBsYXRlJyAgICAgPT4gYXJyYXkoCgkJCQkJCQknbGFiZWwnID0+IF9fKCAnVGVtcGxhdGUnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJJ3ZhbHVlJyA9PiBnZXRfcG9zdF9tZXRhKCAka2V5LCAnX3VtX2RpcmVjdG9yeV90ZW1wbGF0ZScsIHRydWUgKSA/IGdldF9wb3N0X21ldGEoICRrZXksICdfdW1fZGlyZWN0b3J5X3RlbXBsYXRlJywgdHJ1ZSApIDogJGxhYmVsc1snZGVmYXVsdCddLAoJCQkJCQkpLAoJCQkJCQkndW0tZGlyZWN0b3J5LXZpZXdfdHlwZXMnICAgPT4gYXJyYXkoCgkJCQkJCQknbGFiZWwnID0+IF9fKCAnVmlldyB0eXBlcycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkndmFsdWUnID0+IGltcGxvZGUoICcsICcsICRfdW1fdmlld190eXBlc192YWx1ZSApLAoJCQkJCQkpLAoJCQkJCQkndW0tZGlyZWN0b3J5LWRlZmF1bHRfdmlldycgPT4gYXJyYXkoCgkJCQkJCQknbGFiZWwnID0+IF9fKCAnRGVmYXVsdCB2aWV3IHR5cGUnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJJ3ZhbHVlJyA9PiBnZXRfcG9zdF9tZXRhKCAka2V5LCAnX3VtX2RlZmF1bHRfdmlldycsIHRydWUgKSwKCQkJCQkJKSwKCQkJCQkpLAoJCQkJKTsKCgkJCQlpZiAoIGlzc2V0KCAkb3B0aW9uc1sgZ2V0X3Bvc3RfbWV0YSggJGtleSwgJ191bV9zb3J0YnknLCB0cnVlICkgXSApICkgewoJCQkJCSRzb3J0YnlfbGFiZWwgPSAkb3B0aW9uc1sgZ2V0X3Bvc3RfbWV0YSggJGtleSwgJ191bV9zb3J0YnknLCB0cnVlICkgXTsKCQkJCX0gZWxzZSB7CgkJCQkJJHNvcnRieV9sYWJlbCA9IGdldF9wb3N0X21ldGEoICRrZXksICdfdW1fc29ydGJ5JywgdHJ1ZSApOwoJCQkJfQoKCQkJCSRkaXJlY3Rvcnlfcm9sZXNfbWV0YSA9IGdldF9wb3N0X21ldGEoICRrZXksICdfdW1fcm9sZXMnLCB0cnVlICk7CgkJCQkkZGlyZWN0b3J5X3JvbGVzICAgICAgPSBhcnJheSgpOwoJCQkJaWYgKCAhIGVtcHR5KCAkZGlyZWN0b3J5X3JvbGVzX21ldGEgKSApIHsKCQkJCQlpZiAoIGlzX3N0cmluZyggJGRpcmVjdG9yeV9yb2xlc19tZXRhICkgKSB7CgkJCQkJCSRkaXJlY3Rvcnlfcm9sZXMgPSBhcnJheSggJGRpcmVjdG9yeV9yb2xlc19tZXRhICk7CgkJCQkJfSBlbHNlIHsKCQkJCQkJJGRpcmVjdG9yeV9yb2xlcyA9ICRkaXJlY3Rvcnlfcm9sZXNfbWV0YTsKCQkJCQl9CgkJCQl9CgoJCQkJJGRpcmVjdG9yeV9zaG93X3RoZXNlX3VzZXJzX21ldGEgPSBnZXRfcG9zdF9tZXRhKCAka2V5LCAnX3VtX3Nob3dfdGhlc2VfdXNlcnMnLCB0cnVlICk7CgkJCQkkc2hvd190aGVzZV91c2VycyAgICAgICAgICAgICAgICA9IGFycmF5KCk7CgkJCQlpZiAoICEgZW1wdHkoICRkaXJlY3Rvcnlfc2hvd190aGVzZV91c2Vyc19tZXRhICkgKSB7CgkJCQkJaWYgKCBpc19zdHJpbmcoICRkaXJlY3Rvcnlfc2hvd190aGVzZV91c2Vyc19tZXRhICkgKSB7CgkJCQkJCSRzaG93X3RoZXNlX3VzZXJzID0gYXJyYXkoICRkaXJlY3Rvcnlfc2hvd190aGVzZV91c2Vyc19tZXRhICk7CgkJCQkJfSBlbHNlIHsKCQkJCQkJJHNob3dfdGhlc2VfdXNlcnMgPSAkZGlyZWN0b3J5X3Nob3dfdGhlc2VfdXNlcnNfbWV0YTsKCQkJCQl9CgkJCQl9CgoJCQkJJGRpcmVjdG9yeV9leGNsdWRlX3RoZXNlX3VzZXJzX21ldGEgPSBnZXRfcG9zdF9tZXRhKCAka2V5LCAnX3VtX2V4Y2x1ZGVfdGhlc2VfdXNlcnMnLCB0cnVlICk7CgkJCQkkZXhjbHVkZV90aGVzZV91c2VycyAgICAgICAgICAgICAgICA9IGFycmF5KCk7CgkJCQlpZiAoICEgZW1wdHkoICRkaXJlY3RvcnlfZXhjbHVkZV90aGVzZV91c2Vyc19tZXRhICkgKSB7CgkJCQkJaWYgKCBpc19zdHJpbmcoICRkaXJlY3RvcnlfZXhjbHVkZV90aGVzZV91c2Vyc19tZXRhICkgKSB7CgkJCQkJCSRleGNsdWRlX3RoZXNlX3VzZXJzID0gYXJyYXkoICRkaXJlY3RvcnlfZXhjbHVkZV90aGVzZV91c2Vyc19tZXRhICk7CgkJCQkJfSBlbHNlIHsKCQkJCQkJJGV4Y2x1ZGVfdGhlc2VfdXNlcnMgPSAkZGlyZWN0b3J5X2V4Y2x1ZGVfdGhlc2VfdXNlcnNfbWV0YTsKCQkJCQl9CgkJCQl9CgoJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItZGlyZWN0b3J5LScgLiAka2V5IF1bJ2ZpZWxkcyddID0gYXJyYXlfbWVyZ2UoCgkJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItZGlyZWN0b3J5LScgLiAka2V5IF1bJ2ZpZWxkcyddLAoJCQkJCWFycmF5KAoJCQkJCQkndW0tZGlyZWN0b3J5LXJvbGVzJyAgICAgICAgICAgICAgID0+IGFycmF5KAoJCQkJCQkJJ2xhYmVsJyA9PiBfXyggJ1VzZXIgUm9sZXMgdG8gZGlzcGxheScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkndmFsdWUnID0+ICEgZW1wdHkoICRkaXJlY3Rvcnlfcm9sZXMgKSA/IGltcGxvZGUoICcsICcsICRkaXJlY3Rvcnlfcm9sZXMgKSA6ICRsYWJlbHNbJ2FsbCddLAoJCQkJCQkpLAoJCQkJCQkndW0tZGlyZWN0b3J5LWhhc19wcm9maWxlX3Bob3RvJyAgID0+IGFycmF5KAoJCQkJCQkJJ2xhYmVsJyA9PiBfXyggJ09ubHkgc2hvdyBtZW1iZXJzIHdobyBoYXZlIHVwbG9hZGVkIGEgcHJvZmlsZSBwaG90bycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkndmFsdWUnID0+IGdldF9wb3N0X21ldGEoICRrZXksICdfdW1faGFzX3Byb2ZpbGVfcGhvdG8nLCB0cnVlICkgPyAkbGFiZWxzWyd5ZXMnXSA6ICRsYWJlbHNbJ25vJ10sCgkJCQkJCSksCgkJCQkJCSd1bS1kaXJlY3RvcnktaGFzX2NvdmVyX3Bob3RvJyAgICAgPT4gYXJyYXkoCgkJCQkJCQknbGFiZWwnID0+IF9fKCAnT25seSBzaG93IG1lbWJlcnMgd2hvIGhhdmUgdXBsb2FkZWQgYSBwcm9maWxlIHBob3RvJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCQkJCSd2YWx1ZScgPT4gZ2V0X3Bvc3RfbWV0YSggJGtleSwgJ191bV9oYXNfY292ZXJfcGhvdG8nLCB0cnVlICkgPyAkbGFiZWxzWyd5ZXMnXSA6ICRsYWJlbHNbJ25vJ10sCgkJCQkJCSksCgkJCQkJCSd1bS1kaXJlY3Rvcnktc2hvd190aGVzZV91c2VycycgICAgPT4gYXJyYXkoCgkJCQkJCQknbGFiZWwnID0+IF9fKCAnT25seSBzaG93IHNwZWNpZmljIHVzZXJzIChFbnRlciBvbmUgdXNlcm5hbWUgcGVyIGxpbmUpJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCQkJCSd2YWx1ZScgPT4gISBlbXB0eSggJHNob3dfdGhlc2VfdXNlcnMgKSA/IGltcGxvZGUoICcsICcsICRzaG93X3RoZXNlX3VzZXJzICkgOiAnJywKCQkJCQkJKSwKCQkJCQkJJ3VtLWRpcmVjdG9yeS1leGNsdWRlX3RoZXNlX3VzZXJzJyA9PiBhcnJheSgKCQkJCQkJCSdsYWJlbCcgPT4gX18oICdFeGNsdWRlIHNwZWNpZmljIHVzZXJzIChFbnRlciBvbmUgdXNlcm5hbWUgcGVyIGxpbmUpJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCQkJCSd2YWx1ZScgPT4gISBlbXB0eSggJGV4Y2x1ZGVfdGhlc2VfdXNlcnMgKSA/IGltcGxvZGUoICcsICcsICRleGNsdWRlX3RoZXNlX3VzZXJzICkgOiAnJywKCQkJCQkJKSwKCQkJCQkpCgkJCQkpOwoKCQkJCSRpbmZvID0gYXBwbHlfZmlsdGVycyggJ3VtX2RlYnVnX21lbWJlcl9kaXJlY3RvcnlfZ2VuZXJhbF9leHRlbmQnLCAkaW5mbywgJGtleSApOwoKCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLWRpcmVjdG9yeS0nIC4gJGtleSBdWydmaWVsZHMnXSA9IGFycmF5X21lcmdlKAoJCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLWRpcmVjdG9yeS0nIC4gJGtleSBdWydmaWVsZHMnXSwKCQkJCQlhcnJheSgKCQkJCQkJJ3VtLWRpcmVjdG9yeS1zb3J0YnknID0+IGFycmF5KAoJCQkJCQkJJ2xhYmVsJyA9PiBfXyggJ0RlZmF1bHQgc29ydCB1c2VycyBieScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkndmFsdWUnID0+ICRzb3J0YnlfbGFiZWwsCgkJCQkJCSksCgkJCQkJKQoJCQkJKTsKCgkJCQlpZiAoICdvdGhlcicgPT09IGdldF9wb3N0X21ldGEoICRrZXksICdfdW1fc29ydGJ5JywgdHJ1ZSApICkgewoJCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLWRpcmVjdG9yeS0nIC4gJGtleSBdWydmaWVsZHMnXSA9IGFycmF5X21lcmdlKAoJCQkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci1kaXJlY3RvcnktJyAuICRrZXkgXVsnZmllbGRzJ10sCgkJCQkJCWFycmF5KAoJCQkJCQkJJ3VtLWRpcmVjdG9yeS1lbmFibGVfc29ydGluZycgPT4gYXJyYXkoCgkJCQkJCQkJJ2xhYmVsJyA9PiBfXyggJ0VuYWJsZSBjdXN0b20gc29ydGluZycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkJJ3ZhbHVlJyA9PiBnZXRfcG9zdF9tZXRhKCAka2V5LCAnX3VtX2VuYWJsZV9zb3J0aW5nJywgdHJ1ZSApID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCQkJCQkJKSwKCQkJCQkJCSd1bS1kaXJlY3Rvcnktc29ydGJ5X2N1c3RvbScgID0+IGFycmF5KAoJCQkJCQkJCSdsYWJlbCcgPT4gX18oICdDdXN0b20gc29ydGluZyBtZXRhIGtleScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkJJ3ZhbHVlJyA9PiBnZXRfcG9zdF9tZXRhKCAka2V5LCAnX3VtX3NvcnRieV9jdXN0b20nLCB0cnVlICksCgkJCQkJCQkpLAoJCQkJCQkJJ3VtLWRpcmVjdG9yeS1zb3J0YnlfY3VzdG9tX2xhYmVsJyA9PiBhcnJheSgKCQkJCQkJCQknbGFiZWwnID0+IF9fKCAnTGFiZWwgb2YgY3VzdG9tIHNvcnQnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJCSd2YWx1ZScgPT4gZ2V0X3Bvc3RfbWV0YSggJGtleSwgJ191bV9zb3J0YnlfY3VzdG9tX2xhYmVsJywgdHJ1ZSApLAoJCQkJCQkJKSwKCQkJCQkJKQoJCQkJCSk7CgkJCQl9CgoJCQkJaWYgKCAxID09PSBhYnNpbnQoIGdldF9wb3N0X21ldGEoICRrZXksICdfdW1fZW5hYmxlX3NvcnRpbmcnLCB0cnVlICkgKSApIHsKCQkJCQkkc29ydGluZ19maWVsZHMgPSBnZXRfcG9zdF9tZXRhKCAka2V5LCAnX3VtX3NvcnRpbmdfZmllbGRzJywgdHJ1ZSApOwoJCQkJCWlmICggISBlbXB0eSggJHNvcnRpbmdfZmllbGRzICkgKSB7CgkJCQkJCWZvcmVhY2ggKCAkc29ydGluZ19maWVsZHMgYXMgJGsgPT4gJGZpZWxkICkgewoJCQkJCQkJaWYgKCBpc19hcnJheSggJGZpZWxkICkgKSB7CgkJCQkJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItZGlyZWN0b3J5LScgLiAka2V5IF1bJ2ZpZWxkcyddID0gYXJyYXlfbWVyZ2UoCgkJCQkJCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLWRpcmVjdG9yeS0nIC4gJGtleSBdWydmaWVsZHMnXSwKCQkJCQkJCQkJYXJyYXkoCgkJCQkJCQkJCQkndW0tZGlyZWN0b3J5LXNvcnRpbmdfZmllbGRzLScgLiAkayA9PiBhcnJheSgKCQkJCQkJCQkJCQknbGFiZWwnID0+IF9fKCAnRmllbGQocykgdG8gZW5hYmxlIGluIHNvcnRpbmcnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJCQkJCSd2YWx1ZScgPT4gX18oICdMYWJlbDogJywgJ3VsdGltYXRlLW1lbWJlcicgKSAuIGFycmF5X3ZhbHVlcyggJGZpZWxkIClbMF0gLiAnIHwgJyAuIF9fKCAnTWV0YSBrZXk6ICcsICd1bHRpbWF0ZS1tZW1iZXInICkgLiBzdHJpcHNsYXNoZXMoIGFycmF5X2tleXMoICRmaWVsZCApWzBdICksCgkJCQkJCQkJCQkpLAoJCQkJCQkJCQkpCgkJCQkJCQkJKTsKCQkJCQkJCX0gZWxzZSB7CgkJCQkJCQkJaWYgKCBpc3NldCggJG9wdGlvbnNbICRmaWVsZCBdICkgKSB7CgkJCQkJCQkJCSRzb3J0YnlfbGFiZWwgPSAkb3B0aW9uc1sgJGZpZWxkIF07CgkJCQkJCQkJfSBlbHNlIHsKCQkJCQkJCQkJJHNvcnRieV9sYWJlbCA9ICRmaWVsZDsKCQkJCQkJCQl9CgkJCQkJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItZGlyZWN0b3J5LScgLiAka2V5IF1bJ2ZpZWxkcyddID0gYXJyYXlfbWVyZ2UoCgkJCQkJCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLWRpcmVjdG9yeS0nIC4gJGtleSBdWydmaWVsZHMnXSwKCQkJCQkJCQkJYXJyYXkoCgkJCQkJCQkJCQkndW0tZGlyZWN0b3J5LXNvcnRpbmdfZmllbGRzLScgLiAkayA9PiBhcnJheSgKCQkJCQkJCQkJCQknbGFiZWwnID0+IF9fKCAnRmllbGQgdG8gZW5hYmxlIGluIHNvcnRpbmcnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJCQkJCSd2YWx1ZScgPT4gJHNvcnRieV9sYWJlbCwKCQkJCQkJCQkJCSksCgkJCQkJCQkJCSkKCQkJCQkJCQkpOwoJCQkJCQkJfQoJCQkJCQl9CgkJCQkJfQoJCQkJfQoKCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLWRpcmVjdG9yeS0nIC4gJGtleSBdWydmaWVsZHMnXSA9IGFycmF5X21lcmdlKAoJCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLWRpcmVjdG9yeS0nIC4gJGtleSBdWydmaWVsZHMnXSwKCQkJCQlhcnJheSgKCQkJCQkJJ3VtLWRpcmVjdG9yeS1wcm9maWxlX3Bob3RvJyA9PiBhcnJheSgKCQkJCQkJCSdsYWJlbCcgPT4gX18oICdFbmFibGUgUHJvZmlsZSBQaG90bycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkndmFsdWUnID0+IGdldF9wb3N0X21ldGEoICRrZXksICdfdW1fcHJvZmlsZV9waG90bycsIHRydWUgKSA/ICRsYWJlbHNbJ3llcyddIDogJGxhYmVsc1snbm8nXSwKCQkJCQkJKSwKCQkJCQkJJ3VtLWRpcmVjdG9yeS1jb3Zlcl9waG90b3MnICA9PiBhcnJheSgKCQkJCQkJCSdsYWJlbCcgPT4gX18oICdFbmFibGUgQ292ZXIgUGhvdG8nLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJJ3ZhbHVlJyA9PiBnZXRfcG9zdF9tZXRhKCAka2V5LCAnX3VtX2NvdmVyX3Bob3RvcycsIHRydWUgKSA/ICRsYWJlbHNbJ3llcyddIDogJGxhYmVsc1snbm8nXSwKCQkJCQkJKSwKCQkJCQkJJ3VtLWRpcmVjdG9yeS1zaG93X25hbWUnICAgICA9PiBhcnJheSgKCQkJCQkJCSdsYWJlbCcgPT4gX18oICdTaG93IGRpc3BsYXkgbmFtZScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkndmFsdWUnID0+IGdldF9wb3N0X21ldGEoICRrZXksICdfdW1fc2hvd19uYW1lJywgdHJ1ZSApID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCQkJCQkpLAoJCQkJCSkKCQkJCSk7CgoJCQkJJGluZm8gPSBhcHBseV9maWx0ZXJzKCAndW1fZGVidWdfbWVtYmVyX2RpcmVjdG9yeV9wcm9maWxlX2V4dGVuZCcsICRpbmZvLCAka2V5ICk7CgoJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItZGlyZWN0b3J5LScgLiAka2V5IF1bJ2ZpZWxkcyddID0gYXJyYXlfbWVyZ2UoCgkJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItZGlyZWN0b3J5LScgLiAka2V5IF1bJ2ZpZWxkcyddLAoJCQkJCWFycmF5KAoJCQkJCQkndW0tZGlyZWN0b3J5LXNob3dfdGFnbGluZScgPT4gYXJyYXkoCgkJCQkJCQknbGFiZWwnID0+IF9fKCAnU2hvdyB0YWdsaW5lIGJlbG93IHByb2ZpbGUgbmFtZScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkndmFsdWUnID0+IGdldF9wb3N0X21ldGEoICRrZXksICdfdW1fc2hvd190YWdsaW5lJywgdHJ1ZSApID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCQkJCQkpLAoJCQkJCSkKCQkJCSk7CgoJCQkJaWYgKCAxID09PSBhYnNpbnQoIGdldF9wb3N0X21ldGEoICRrZXksICdfdW1fc2hvd190YWdsaW5lJywgdHJ1ZSApICkgKSB7CgkJCQkJJHRhZ2xpbmVfZmllbGRzID0gZ2V0X3Bvc3RfbWV0YSggJGtleSwgJ191bV90YWdsaW5lX2ZpZWxkcycsIHRydWUgKTsKCQkJCQlpZiAoICEgZW1wdHkoICR0YWdsaW5lX2ZpZWxkcyApICYmIGlzX2FycmF5KCAkdGFnbGluZV9maWVsZHMgKSApIHsKCQkJCQkJZm9yZWFjaCAoICR0YWdsaW5lX2ZpZWxkcyBhcyAkayA9PiAkZmllbGQgKSB7CgkJCQkJCQkkbGFiZWwgPSBpc3NldCggJG9wdGlvbnNbICRmaWVsZCBdICkgPyAkb3B0aW9uc1sgJGZpZWxkIF0gOiAkZmllbGQ7CgkJCQkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci1kaXJlY3RvcnktJyAuICRrZXkgXVsnZmllbGRzJ10gPSBhcnJheV9tZXJnZSgKCQkJCQkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci1kaXJlY3RvcnktJyAuICRrZXkgXVsnZmllbGRzJ10sCgkJCQkJCQkJYXJyYXkoCgkJCQkJCQkJCSd1bS1kaXJlY3RvcnktdGFnbGluZV9maWVsZHMtJyAuICRrID0+IGFycmF5KAoJCQkJCQkJCQkJJ2xhYmVsJyA9PiBfXyggJ0ZpZWxkIHRvIGRpc3BsYXkgaW4gdGFnbGluZScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkJCQkndmFsdWUnID0+ICRsYWJlbCwKCQkJCQkJCQkJKSwKCQkJCQkJCQkpCgkJCQkJCQkpOwoJCQkJCQl9CgkJCQkJfQoJCQkJfQoKCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLWRpcmVjdG9yeS0nIC4gJGtleSBdWydmaWVsZHMnXSA9IGFycmF5X21lcmdlKAoJCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLWRpcmVjdG9yeS0nIC4gJGtleSBdWydmaWVsZHMnXSwKCQkJCQlhcnJheSgKCQkJCQkJJ3VtLWRpcmVjdG9yeS1zaG93X3VzZXJpbmZvJyA9PiBhcnJheSgKCQkJCQkJCSdsYWJlbCcgPT4gX18oICdTaG93IGV4dHJhIHVzZXIgaW5mb3JtYXRpb24gYmVsb3cgdGFnbGluZT8nLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJJ3ZhbHVlJyA9PiBnZXRfcG9zdF9tZXRhKCAka2V5LCAnX3VtX3Nob3dfdXNlcmluZm8nLCB0cnVlICkgPyAkbGFiZWxzWyd5ZXMnXSA6ICRsYWJlbHNbJ25vJ10sCgkJCQkJCSksCgkJCQkJKQoJCQkJKTsKCgkJCQlpZiAoIDEgPT09IGFic2ludCggZ2V0X3Bvc3RfbWV0YSggJGtleSwgJ191bV9zaG93X3VzZXJpbmZvJywgdHJ1ZSApICkgKSB7CgkJCQkJJHJldmVhbF9maWVsZHMgPSBnZXRfcG9zdF9tZXRhKCAka2V5LCAnX3VtX3JldmVhbF9maWVsZHMnLCB0cnVlICk7CgkJCQkJaWYgKCAhIGVtcHR5KCAkcmV2ZWFsX2ZpZWxkcyApICYmIGlzX2FycmF5KCAkcmV2ZWFsX2ZpZWxkcyApICkgewoJCQkJCQlmb3JlYWNoICggJHJldmVhbF9maWVsZHMgYXMgJGsgPT4gJGZpZWxkICkgewoJCQkJCQkJJGxhYmVsID0gaXNzZXQoICRvcHRpb25zWyAkZmllbGQgXSApID8gJG9wdGlvbnNbICRmaWVsZCBdIDogJGZpZWxkOwoJCQkJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItZGlyZWN0b3J5LScgLiAka2V5IF1bJ2ZpZWxkcyddID0gYXJyYXlfbWVyZ2UoCgkJCQkJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItZGlyZWN0b3J5LScgLiAka2V5IF1bJ2ZpZWxkcyddLAoJCQkJCQkJCWFycmF5KAoJCQkJCQkJCQkndW0tZGlyZWN0b3J5LXJldmVhbF9maWVsZHMtJyAuICRrID0+IGFycmF5KAoJCQkJCQkJCQkJJ2xhYmVsJyA9PiBfXyggJ0ZpZWxkIHRvIGRpc3BsYXkgaW4gZXh0cmEgdXNlciBpbmZvcm1hdGlvbiBzZWN0aW9uJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCQkJCQkJCSd2YWx1ZScgPT4gJGxhYmVsLAoJCQkJCQkJCQkpLAoJCQkJCQkJCSkKCQkJCQkJCSk7CgkJCQkJCX0KCQkJCQl9CgkJCQl9CgoJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItZGlyZWN0b3J5LScgLiAka2V5IF1bJ2ZpZWxkcyddID0gYXJyYXlfbWVyZ2UoCgkJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItZGlyZWN0b3J5LScgLiAka2V5IF1bJ2ZpZWxkcyddLAoJCQkJCWFycmF5KAoJCQkJCQkndW0tZGlyZWN0b3J5LXNob3dfc29jaWFsJyA9PiBhcnJheSgKCQkJCQkJCSdsYWJlbCcgPT4gX18oICdTaG93IHNvY2lhbCBjb25uZWN0IGljb25zIGluIGV4dHJhIHVzZXIgaW5mb3JtYXRpb24gc2VjdGlvbicsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkndmFsdWUnID0+IGdldF9wb3N0X21ldGEoICRrZXksICdfdW1fc2hvd19zb2NpYWwnLCB0cnVlICkgPyAkbGFiZWxzWyd5ZXMnXSA6ICRsYWJlbHNbJ25vJ10sCgkJCQkJCSksCgkJCQkJCSd1bS1kaXJlY3Rvcnktc2VhcmNoJyAgICAgID0+IGFycmF5KAoJCQkJCQkJJ2xhYmVsJyA9PiBfXyggJ0VuYWJsZSBTZWFyY2ggZmVhdHVyZScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkndmFsdWUnID0+IGdldF9wb3N0X21ldGEoICRrZXksICdfdW1fc2VhcmNoJywgdHJ1ZSApID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCQkJCQkpLAoJCQkJCSkKCQkJCSk7CgoJCQkJaWYgKCAxID09PSBhYnNpbnQoIGdldF9wb3N0X21ldGEoICRrZXksICdfdW1fc2VhcmNoJywgdHJ1ZSApICkgKSB7CgkJCQkJJGRpcmVjdG9yeV9yb2xlc19jYW5fc2VhcmNoX21ldGEgPSBnZXRfcG9zdF9tZXRhKCAka2V5LCAnX3VtX3JvbGVzX2Nhbl9zZWFyY2gnLCB0cnVlICk7CgkJCQkJJHJvbGVzX2Nhbl9zZWFyY2ggICAgICAgICAgICAgICAgPSBhcnJheSgpOwoJCQkJCWlmICggISBlbXB0eSggJGRpcmVjdG9yeV9yb2xlc19jYW5fc2VhcmNoX21ldGEgKSApIHsKCQkJCQkJaWYgKCBpc19zdHJpbmcoICRkaXJlY3Rvcnlfcm9sZXNfY2FuX3NlYXJjaF9tZXRhICkgKSB7CgkJCQkJCQkkcm9sZXNfY2FuX3NlYXJjaCA9IGFycmF5KCAkZGlyZWN0b3J5X3JvbGVzX2Nhbl9zZWFyY2hfbWV0YSApOwoJCQkJCQl9IGVsc2UgewoJCQkJCQkJJHJvbGVzX2Nhbl9zZWFyY2ggPSAkZGlyZWN0b3J5X3JvbGVzX2Nhbl9zZWFyY2hfbWV0YTsKCQkJCQkJfQoJCQkJCX0KCgkJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItZGlyZWN0b3J5LScgLiAka2V5IF1bJ2ZpZWxkcyddID0gYXJyYXlfbWVyZ2UoCgkJCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLWRpcmVjdG9yeS0nIC4gJGtleSBdWydmaWVsZHMnXSwKCQkJCQkJYXJyYXkoCgkJCQkJCQkndW0tZGlyZWN0b3J5LXJvbGVzX2Nhbl9zZWFyY2gnID0+IGFycmF5KAoJCQkJCQkJCSdsYWJlbCcgPT4gX18oICdVc2VyIFJvbGVzIHRoYXQgY2FuIHVzZSBzZWFyY2gnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJCSd2YWx1ZScgPT4gISBlbXB0eSggJHJvbGVzX2Nhbl9zZWFyY2ggKSA/IGltcGxvZGUoICcsICcsICRyb2xlc19jYW5fc2VhcmNoICkgOiAkbGFiZWxzWydhbGwnXSwKCQkJCQkJCSksCgkJCQkJCSkKCQkJCQkpOwoJCQkJfQoKCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLWRpcmVjdG9yeS0nIC4gJGtleSBdWydmaWVsZHMnXSA9IGFycmF5X21lcmdlKAoJCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLWRpcmVjdG9yeS0nIC4gJGtleSBdWydmaWVsZHMnXSwKCQkJCQlhcnJheSgKCQkJCQkJJ3VtLWRpcmVjdG9yeS1maWx0ZXJzJyA9PiBhcnJheSgKCQkJCQkJCSdsYWJlbCcgPT4gX18oICdFbmFibGUgRmlsdGVycyBmZWF0dXJlJywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCQkJCSd2YWx1ZScgPT4gZ2V0X3Bvc3RfbWV0YSggJGtleSwgJ191bV9maWx0ZXJzJywgdHJ1ZSApID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCQkJCQkpLAoJCQkJCSkKCQkJCSk7CgoJCQkJaWYgKCAxID09PSBhYnNpbnQoIGdldF9wb3N0X21ldGEoICRrZXksICdfdW1fZmlsdGVycycsIHRydWUgKSApICkgewoJCQkJCSRkaXJlY3Rvcnlfcm9sZXNfY2FuX2ZpbHRlcl9tZXRhID0gZ2V0X3Bvc3RfbWV0YSggJGtleSwgJ191bV9yb2xlc19jYW5fZmlsdGVyJywgdHJ1ZSApOwoJCQkJCSRyb2xlc19jYW5fZmlsdGVyICAgICAgICAgICAgICAgID0gYXJyYXkoKTsKCQkJCQlpZiAoICEgZW1wdHkoICRkaXJlY3Rvcnlfcm9sZXNfY2FuX2ZpbHRlcl9tZXRhICkgKSB7CgkJCQkJCWlmICggaXNfc3RyaW5nKCAkZGlyZWN0b3J5X3JvbGVzX2Nhbl9maWx0ZXJfbWV0YSApICkgewoJCQkJCQkJJHJvbGVzX2Nhbl9maWx0ZXIgPSBhcnJheSggJGRpcmVjdG9yeV9yb2xlc19jYW5fZmlsdGVyX21ldGEgKTsKCQkJCQkJfSBlbHNlIHsKCQkJCQkJCSRyb2xlc19jYW5fZmlsdGVyID0gJGRpcmVjdG9yeV9yb2xlc19jYW5fZmlsdGVyX21ldGE7CgkJCQkJCX0KCQkJCQl9CgoJCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLWRpcmVjdG9yeS0nIC4gJGtleSBdWydmaWVsZHMnXSA9IGFycmF5X21lcmdlKAoJCQkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci1kaXJlY3RvcnktJyAuICRrZXkgXVsnZmllbGRzJ10sCgkJCQkJCWFycmF5KAoJCQkJCQkJJ3VtLWRpcmVjdG9yeS1yb2xlc19jYW5fZmlsdGVyJyA9PiBhcnJheSgKCQkJCQkJCQknbGFiZWwnID0+IF9fKCAnVXNlciBSb2xlcyB0aGF0IGNhbiB1c2UgZmlsdGVycycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkJJ3ZhbHVlJyA9PiAhIGVtcHR5KCAkcm9sZXNfY2FuX2ZpbHRlciApID8gaW1wbG9kZSggJywgJywgJHJvbGVzX2Nhbl9maWx0ZXIgKSA6ICRsYWJlbHNbJ2FsbCddLAoJCQkJCQkJKSwKCQkJCQkJKQoJCQkJCSk7CgoJCQkJCSRzZWFyY2hfZmllbGRzID0gZ2V0X3Bvc3RfbWV0YSggJGtleSwgJ191bV9zZWFyY2hfZmllbGRzJywgdHJ1ZSApOwoJCQkJCWlmICggISBlbXB0eSggJHNlYXJjaF9maWVsZHMgKSAmJiBpc19hcnJheSggJHNlYXJjaF9maWVsZHMgKSApIHsKCQkJCQkJZm9yZWFjaCAoICRzZWFyY2hfZmllbGRzIGFzICRrID0+ICRmaWVsZCApIHsKCQkJCQkJCSRsYWJlbCA9IGlzc2V0KCAkb3B0aW9uc1sgJGZpZWxkIF0gKSA/ICRvcHRpb25zWyAkZmllbGQgXSA6ICRmaWVsZDsKCQkJCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLWRpcmVjdG9yeS0nIC4gJGtleSBdWydmaWVsZHMnXSA9IGFycmF5X21lcmdlKAoJCQkJCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLWRpcmVjdG9yeS0nIC4gJGtleSBdWydmaWVsZHMnXSwKCQkJCQkJCQlhcnJheSgKCQkJCQkJCQkJJ3VtLWRpcmVjdG9yeS1zZWFyY2hfZmllbGRzLScgLiAkayA9PiBhcnJheSgKCQkJCQkJCQkJCSdsYWJlbCcgPT4gX18oICdGaWx0ZXIgbWV0YSB0byBlbmFibGUnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJCQkJJ3ZhbHVlJyA9PiAkbGFiZWwsCgkJCQkJCQkJCSksCgkJCQkJCQkJKQoJCQkJCQkJKTsKCQkJCQkJfQoJCQkJCX0KCQkJCX0KCgkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci1kaXJlY3RvcnktJyAuICRrZXkgXVsnZmllbGRzJ10gPSBhcnJheV9tZXJnZSgKCQkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci1kaXJlY3RvcnktJyAuICRrZXkgXVsnZmllbGRzJ10sCgkJCQkJYXJyYXkoCgkJCQkJCSd1bS1kaXJlY3RvcnktZmlsdGVyc19leHBhbmRlZCcgPT4gYXJyYXkoCgkJCQkJCQknbGFiZWwnID0+IF9fKCAnRXhwYW5kIHRoZSBmaWx0ZXIgYmFyIGJ5IGRlZmF1bHQnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJJ3ZhbHVlJyA9PiBnZXRfcG9zdF9tZXRhKCAka2V5LCAnX3VtX2ZpbHRlcnNfZXhwYW5kZWQnLCB0cnVlICkgPyAkbGFiZWxzWyd5ZXMnXSA6ICRsYWJlbHNbJ25vJ10sCgkJCQkJCSksCgkJCQkJKQoJCQkJKTsKCgkJCQlpZiAoIDEgPT09IGFic2ludCggZ2V0X3Bvc3RfbWV0YSggJGtleSwgJ191bV9maWx0ZXJzX2V4cGFuZGVkJywgdHJ1ZSApICkgKSB7CgkJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItZGlyZWN0b3J5LScgLiAka2V5IF1bJ2ZpZWxkcyddID0gYXJyYXlfbWVyZ2UoCgkJCQkJCSRpbmZvWyAndWx0aW1hdGUtbWVtYmVyLWRpcmVjdG9yeS0nIC4gJGtleSBdWydmaWVsZHMnXSwKCQkJCQkJYXJyYXkoCgkJCQkJCQkndW0tZGlyZWN0b3J5LWZpbHRlcnNfaXNfY29sbGFwc2libGUnID0+IGFycmF5KAoJCQkJCQkJCSdsYWJlbCcgPT4gX18oICdDYW4gZmlsdGVyIGJhciBiZSBjb2xsYXBzZWQnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJCSd2YWx1ZScgPT4gZ2V0X3Bvc3RfbWV0YSggJGtleSwgJ191bV9maWx0ZXJzX2lzX2NvbGxhcHNpYmxlJywgdHJ1ZSApID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCQkJCQkJKSwKCQkJCQkJKQoJCQkJCSk7CgkJCQl9CgoJCQkJJHNlYXJjaF9maWx0ZXJzID0gZ2V0X3Bvc3RfbWV0YSggJGtleSwgJ191bV9zZWFyY2hfZmlsdGVycycsIHRydWUgKTsKCQkJCWlmICggISBlbXB0eSggJHNlYXJjaF9maWx0ZXJzICkgJiYgaXNfYXJyYXkoICRzZWFyY2hfZmlsdGVycyApICkgewoJCQkJCWZvcmVhY2ggKCAkc2VhcmNoX2ZpbHRlcnMgYXMgJGsgPT4gJGZpZWxkICkgewoJCQkJCQkkbGFiZWwgPSBpc3NldCggJG9wdGlvbnNbICRrIF0gKSA/ICRvcHRpb25zWyAkayBdIDogJGs7CgkJCQkJCSR2YWx1ZSA9ICRmaWVsZDsKCQkJCQkJaWYgKCBpc19hcnJheSggJGZpZWxkICkgKSB7CgkJCQkJCQkkdmFsdWUgPSBfXyggJ0Zyb20gJywgJ3VsdGltYXRlLW1lbWJlcicgKSAuICRmaWVsZFswXSAuIF9fKCAnIHRvICcsICd1bHRpbWF0ZS1tZW1iZXInICkgLiAkZmllbGRbMV07CgkJCQkJCX0KCQkJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItZGlyZWN0b3J5LScgLiAka2V5IF1bJ2ZpZWxkcyddID0gYXJyYXlfbWVyZ2UoCgkJCQkJCQkkaW5mb1sgJ3VsdGltYXRlLW1lbWJlci1kaXJlY3RvcnktJyAuICRrZXkgXVsnZmllbGRzJ10sCgkJCQkJCQlhcnJheSgKCQkJCQkJCQkndW0tZGlyZWN0b3J5LXNlYXJjaF9maWx0ZXJzLScgLiAkayA9PiBhcnJheSgKCQkJCQkJCQkJJ2xhYmVsJyA9PiBfXyggJ0FkbWluIGZpbHRlcmluZycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkJCSd2YWx1ZScgPT4gJGxhYmVsIC4gJyAtICcgLiAkdmFsdWUsCgkJCQkJCQkJKSwKCQkJCQkJCSkKCQkJCQkJKTsKCQkJCQl9CgkJCQl9CgoJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItZGlyZWN0b3J5LScgLiAka2V5IF1bJ2ZpZWxkcyddID0gYXJyYXlfbWVyZ2UoCgkJCQkJJGluZm9bICd1bHRpbWF0ZS1tZW1iZXItZGlyZWN0b3J5LScgLiAka2V5IF1bJ2ZpZWxkcyddLAoJCQkJCWFycmF5KAoJCQkJCQkndW0tZGlyZWN0b3J5LW11c3Rfc2VhcmNoJyAgICAgICAgPT4gYXJyYXkoCgkJCQkJCQknbGFiZWwnID0+IF9fKCAnU2hvdyByZXN1bHRzIG9ubHkgYWZ0ZXIgc2VhcmNoL2ZpbHRyYXRpb24nLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJJ3ZhbHVlJyA9PiBnZXRfcG9zdF9tZXRhKCAka2V5LCAnX3VtX211c3Rfc2VhcmNoJywgdHJ1ZSApID8gJGxhYmVsc1sneWVzJ10gOiAkbGFiZWxzWydubyddLAoJCQkJCQkpLAoJCQkJCQkndW0tZGlyZWN0b3J5LW1heF91c2VycycgICAgICAgICAgPT4gYXJyYXkoCgkJCQkJCQknbGFiZWwnID0+IF9fKCAnTWF4aW11bSBudW1iZXIgb2YgcHJvZmlsZXMnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJJ3ZhbHVlJyA9PiBnZXRfcG9zdF9tZXRhKCAka2V5LCAnX3VtX21heF91c2VycycsIHRydWUgKSwKCQkJCQkJKSwKCQkJCQkJJ3VtLWRpcmVjdG9yeS1wcm9maWxlc19wZXJfcGFnZScgID0+IGFycmF5KAoJCQkJCQkJJ2xhYmVsJyA9PiBfXyggJ051bWJlciBvZiBwcm9maWxlcyBwZXIgcGFnZScsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkndmFsdWUnID0+IGdldF9wb3N0X21ldGEoICRrZXksICdfdW1fcHJvZmlsZXNfcGVyX3BhZ2UnLCB0cnVlICksCgkJCQkJCSksCgkJCQkJCSd1bS1kaXJlY3RvcnktcHJvZmlsZXNfcGVyX3BhZ2VfbW9iaWxlJyA9PiBhcnJheSgKCQkJCQkJCSdsYWJlbCcgPT4gX18oICdNYXhpbXVtIG51bWJlciBvZiBwcm9maWxlcycsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkndmFsdWUnID0+IGdldF9wb3N0X21ldGEoICRrZXksICdfdW1fcHJvZmlsZXNfcGVyX3BhZ2VfbW9iaWxlJywgdHJ1ZSApLAoJCQkJCQkpLAoJCQkJCQkndW0tZGlyZWN0b3J5LWRpcmVjdG9yeV9oZWFkZXInICAgPT4gYXJyYXkoCgkJCQkJCQknbGFiZWwnID0+IF9fKCAnUmVzdWx0cyBUZXh0JywgJ3VsdGltYXRlLW1lbWJlcicgKSwKCQkJCQkJCSd2YWx1ZScgPT4gZ2V0X3Bvc3RfbWV0YSggJGtleSwgJ191bV9kaXJlY3RvcnlfaGVhZGVyJywgdHJ1ZSApLAoJCQkJCQkpLAoJCQkJCQkndW0tZGlyZWN0b3J5LWRpcmVjdG9yeV9oZWFkZXJfc2luZ2xlJyA9PiBhcnJheSgKCQkJCQkJCSdsYWJlbCcgPT4gX18oICdTaW5nbGUgUmVzdWx0IFRleHQnLCAndWx0aW1hdGUtbWVtYmVyJyApLAoJCQkJCQkJJ3ZhbHVlJyA9PiBnZXRfcG9zdF9tZXRhKCAka2V5LCAnX3VtX2RpcmVjdG9yeV9oZWFkZXJfc2luZ2xlJywgdHJ1ZSApLAoJCQkJCQkpLAoJCQkJCQkndW0tZGlyZWN0b3J5LWRpcmVjdG9yeV9ub191c2VycycgPT4gYXJyYXkoCgkJCQkJCQknbGFiZWwnID0+IF9fKCAnQ3VzdG9tIHRleHQgaWYgbm8gdXNlcnMgd2VyZSBmb3VuZCcsICd1bHRpbWF0ZS1tZW1iZXInICksCgkJCQkJCQkndmFsdWUnID0+IGdldF9wb3N0X21ldGEoICRrZXksICdfdW1fZGlyZWN0b3J5X25vX3VzZXJzJywgdHJ1ZSApLAoJCQkJCQkpLAoJCQkJCSkKCQkJCSk7CgoJCQkJJGluZm8gPSBhcHBseV9maWx0ZXJzKCAndW1fZGVidWdfbWVtYmVyX2RpcmVjdG9yeV9leHRlbmQnLCAkaW5mbywgJGtleSApOwoJCQl9CgkJfQoKCQlyZXR1cm4gJGluZm87Cgl9Cn0KIjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWVzcGFjZXMiO2E6MTp7czo5OiJcdW1cYWRtaW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo5OiJcdW1cYWRtaW4iO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czo1OiJhZG1pbiI7fX1zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGluY2x1ZGVzIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGZ1bmN0aW9ucyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjb25zdGFudHMiO2E6MDp7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY2xhc3NlcyI7YToxOntzOjIxOiJcdW1cYWRtaW5cU2l0ZV9IZWFsdGgiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfIjoxMTp7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6MjE6Ilx1bVxhZG1pblxTaXRlX0hlYWx0aCI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjExOiJTaXRlX0hlYWx0aCI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6MTc6IkNsYXNzIFNpdGVfSGVhbHRoIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjA6IiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawB0YWdzIjthOjE6e2k6MDtPOjQ2OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xHZW5lcmljIjoyOntzOjc6IgAqAG5hbWUiO3M6NzoicGFja2FnZSI7czoxNDoiACoAZGVzY3JpcHRpb24iO086NDU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbiI6Mjp7czo1OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgBib2R5VGVtcGxhdGUiO3M6ODoidW1cYWRtaW4iO3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AdGFncyI7YTowOnt9fX19czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBjb250ZXh0IjtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29udGV4dCI6Mjp7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0AG5hbWVzcGFjZSI7czo4OiJ1bVxhZG1pbiI7czo1NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0AG5hbWVzcGFjZUFsaWFzZXMiO2E6MDp7fX1zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo4O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZVN0YXJ0IjtiOjA7czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBpc1RlbXBsYXRlRW5kIjtiOjA7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBwYXJlbnQiO047czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGltcGxlbWVudHMiO2E6MDp7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBjb25zdGFudHMiO2E6MTp7czozNDoiXHVtXGFkbWluXFNpdGVfSGVhbHRoOjpCQURHRV9DT0xPUiI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDb25zdGFudCI6NTp7czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ29uc3RhbnQAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czozNDoiXHVtXGFkbWluXFNpdGVfSGVhbHRoOjpCQURHRV9DT0xPUiI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjExOiJCQURHRV9DT0xPUiI7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENvbnN0YW50AGRvY0Jsb2NrIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2siOjc6e3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAc3VtbWFyeSI7czoyNDoiU3RyaW5nIG9mIGEgYmFkZ2UgY29sb3IuIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjUxOiJPcHRpb25zOiBibHVlLCBncmVlbiwgcmVkLCBvcmFuZ2UsIHB1cnBsZSBhbmQgZ3JheS4iO3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AdGFncyI7YTowOnt9fXM6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAdGFncyI7YToyOntpOjA7Tzo0MjoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcU2VlIjozOntzOjc6IgAqAG5hbWUiO3M6Mzoic2VlIjtzOjk6IgAqAHJlZmVycyI7Tzo1MjoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcUmVmZXJlbmNlXFVybCI6MTp7czo1NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXFJlZmVyZW5jZVxVcmwAdXJpIjtzOjY4OiJodHRwczovL21ha2Uud29yZHByZXNzLm9yZy9jb3JlLzIwMTkvMDQvMjUvc2l0ZS1oZWFsdGgtY2hlY2staW4tNS0yLyI7fXM6MTQ6IgAqAGRlc2NyaXB0aW9uIjtOO31pOjE7Tzo0NDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcU2luY2UiOjM6e3M6NzoiACoAbmFtZSI7czo1OiJzaW5jZSI7czo1MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXFNpbmNlAHZlcnNpb24iO3M6NToiMi44LjMiO3M6MTQ6IgAqAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjA6IiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319fX1zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGNvbnRleHQiO3I6MzA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MTU7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBpc1RlbXBsYXRlU3RhcnQiO2I6MDtzOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVFbmQiO2I6MDt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ29uc3RhbnQAdmFsdWUiO3M6NjoiJ2JsdWUnIjtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDb25zdGFudABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MjM7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ29uc3RhbnQAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NjoicHVibGljIjt9fX1zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AcHJvcGVydGllcyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAG1ldGhvZHMiO2E6MTI6e3M6MzY6Ilx1bVxhZG1pblxTaXRlX0hlYWx0aDo6X19jb25zdHJ1Y3QoKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjk6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6MjQ6IlNpdGVfSGVhbHRoIGNvbnN0cnVjdG9yLiI7czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBkZXNjcmlwdGlvbiI7Tzo0NToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uIjoyOntzOjU5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAGJvZHlUZW1wbGF0ZSI7czowOiIiO3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AdGFncyI7YTowOnt9fXM6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAdGFncyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBjb250ZXh0IjtyOjMwO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjI1O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZVN0YXJ0IjtiOjA7czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBpc1RlbXBsYXRlRW5kIjtiOjA7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjM2OiJcdW1cYWRtaW5cU2l0ZV9IZWFsdGg6Ol9fY29uc3RydWN0KCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxMToiX19jb25zdHJ1Y3QiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjY6InB1YmxpYyI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6Mjg7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e319czo1MToiXHVtXGFkbWluXFNpdGVfSGVhbHRoOjpyZWdpc3Rlcl9zaXRlX3N0YXR1c190ZXN0cygpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6OTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjUxOiJcdW1cYWRtaW5cU2l0ZV9IZWFsdGg6OnJlZ2lzdGVyX3NpdGVfc3RhdHVzX3Rlc3RzKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoyNjoicmVnaXN0ZXJfc2l0ZV9zdGF0dXNfdGVzdHMiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjY6InB1YmxpYyI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6MTp7aTowO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6NToidGVzdHMiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO319czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTozMztzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fX1zOjQ4OiJcdW1cYWRtaW5cU2l0ZV9IZWFsdGg6Om92ZXJyaWRlX3RlbXBsYXRlc190ZXN0KCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjo5OntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO047czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6NDg6Ilx1bVxhZG1pblxTaXRlX0hlYWx0aDo6b3ZlcnJpZGVfdGVtcGxhdGVzX3Rlc3QoKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjIzOiJvdmVycmlkZV90ZW1wbGF0ZXNfdGVzdCI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NjoicHVibGljIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo1NDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fX1zOjQzOiJcdW1cYWRtaW5cU2l0ZV9IZWFsdGg6OmdldF9vdXRkYXRlZF9pY29ucygpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6OTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2siOjc6e3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAc3VtbWFyeSI7czowOiIiO3M6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAZGVzY3JpcHRpb24iO086NDU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbiI6Mjp7czo1OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgBib2R5VGVtcGxhdGUiO3M6MDoiIjtzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAHRhZ3MiO2E6MDp7fX1zOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHRhZ3MiO2E6MTp7aTowO086NDY6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXFJldHVybl8iOjM6e3M6NzoiACoAdHlwZSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbXBvdW5kIjoxOntzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbXBvdW5kAHR5cGVzIjthOjI6e2k6MDtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQm9vbGVhbiI6MDp7fWk6MTtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQXJyYXlfIjozOntzOjEyOiIAKgB2YWx1ZVR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjEwOiIAKgBrZXlUeXBlIjtOO3M6MTc6IgAqAGRlZmF1bHRLZXlUeXBlIjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29tcG91bmQiOjE6e3M6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29tcG91bmQAdHlwZXMiO2E6Mjp7aTowO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xTdHJpbmdfIjowOnt9aToxO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xJbnRlZ2VyIjowOnt9fX19fX1zOjc6IgAqAG5hbWUiO3M6NjoicmV0dXJuIjtzOjE0OiIAKgBkZXNjcmlwdGlvbiI7Tzo0NToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uIjoyOntzOjU5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAGJvZHlUZW1wbGF0ZSI7czowOiIiO3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AdGFncyI7YTowOnt9fX19czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBjb250ZXh0IjtyOjMwO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjg4O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZVN0YXJ0IjtiOjA7czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBpc1RlbXBsYXRlRW5kIjtiOjA7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjQzOiJcdW1cYWRtaW5cU2l0ZV9IZWFsdGg6OmdldF9vdXRkYXRlZF9pY29ucygpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTg6ImdldF9vdXRkYXRlZF9pY29ucyI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NzoicHJpdmF0ZSI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6OTE7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e319czo0NDoiXHVtXGFkbWluXFNpdGVfSGVhbHRoOjpvdXRkYXRlZF9pY29uc190ZXN0KCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjo5OntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO047czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6NDQ6Ilx1bVxhZG1pblxTaXRlX0hlYWx0aDo6b3V0ZGF0ZWRfaWNvbnNfdGVzdCgpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTk6Im91dGRhdGVkX2ljb25zX3Rlc3QiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjY6InB1YmxpYyI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MTg0O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9fXM6MzQ6Ilx1bVxhZG1pblxTaXRlX0hlYWx0aDo6Z2V0X3JvbGVzKCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjo5OntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO047czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6MzQ6Ilx1bVxhZG1pblxTaXRlX0hlYWx0aDo6Z2V0X3JvbGVzKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czo5OiJnZXRfcm9sZXMiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjc6InByaXZhdGUiO31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjIxMztzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fX1zOjM0OiJcdW1cYWRtaW5cU2l0ZV9IZWFsdGg6OmdldF9mb3JtcygpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6OTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjM0OiJcdW1cYWRtaW5cU2l0ZV9IZWFsdGg6OmdldF9mb3JtcygpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6OToiZ2V0X2Zvcm1zIjt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZpbmFsIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo3OiJwcml2YXRlIjt9czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToyMTc7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e319czozODoiXHVtXGFkbWluXFNpdGVfSGVhbHRoOjpnZXRfcm9sZV9tZXRhKCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjo5OntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO047czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6Mzg6Ilx1bVxhZG1pblxTaXRlX0hlYWx0aDo6Z2V0X3JvbGVfbWV0YSgpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTM6ImdldF9yb2xlX21ldGEiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjc6InByaXZhdGUiO31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjE6e2k6MDtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjM6ImtleSI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fX1zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjIzMTtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fX1zOjM0OiJcdW1cYWRtaW5cU2l0ZV9IZWFsdGg6OmFycmF5X21hcCgpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6OTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjM0OiJcdW1cYWRtaW5cU2l0ZV9IZWFsdGg6OmFycmF5X21hcCgpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6OToiYXJyYXlfbWFwIjt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZpbmFsIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo2OiJwdWJsaWMiO31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjE6e2k6MDtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjQ6Iml0ZW0iO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO319czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToyMzU7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e319czozOToiXHVtXGFkbWluXFNpdGVfSGVhbHRoOjpnZXRfZmllbGRfZGF0YSgpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6OTp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjM5OiJcdW1cYWRtaW5cU2l0ZV9IZWFsdGg6OmdldF9maWVsZF9kYXRhKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxNDoiZ2V0X2ZpZWxkX2RhdGEiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjc6InByaXZhdGUiO31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjQ6e2k6MDtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjQ6ImluZm8iO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO31pOjE7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czozOiJrZXkiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO31pOjI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo5OiJmaWVsZF9rZXkiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO31pOjM7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo1OiJmaWVsZCI7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fX1zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjI0MjtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fX1zOjQ3OiJcdW1cYWRtaW5cU2l0ZV9IZWFsdGg6OmdldF9tZW1iZXJfZGlyZWN0b3JpZXMoKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjk6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TjtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo0NzoiXHVtXGFkbWluXFNpdGVfSGVhbHRoOjpnZXRfbWVtYmVyX2RpcmVjdG9yaWVzKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoyMjoiZ2V0X21lbWJlcl9kaXJlY3RvcmllcyI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NzoicHJpdmF0ZSI7fXM6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MjU2O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9fXM6NDI6Ilx1bVxhZG1pblxTaXRlX0hlYWx0aDo6ZGVidWdfaW5mb3JtYXRpb24oKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjk6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6NDA6IkFkZCBvdXIgZGF0YSB0byBTaXRlIEhlYWx0aCBpbmZvcm1hdGlvbi4iO3M6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAZGVzY3JpcHRpb24iO086NDU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbiI6Mjp7czo1OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgBib2R5VGVtcGxhdGUiO3M6MDoiIjtzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAHRhZ3MiO2E6MDp7fX1zOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHRhZ3MiO2E6Mzp7aTowO086NDQ6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXFNpbmNlIjozOntzOjc6IgAqAG5hbWUiO3M6NToic2luY2UiO3M6NTM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xTaW5jZQB2ZXJzaW9uIjtzOjU6IjIuNy4wIjtzOjE0OiIAKgBkZXNjcmlwdGlvbiI7Tzo0NToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uIjoyOntzOjU5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAGJvZHlUZW1wbGF0ZSI7czowOiIiO3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AdGFncyI7YTowOnt9fX1pOjE7Tzo0NDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXFRhZ3NcUGFyYW0iOjU6e3M6NTg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xQYXJhbQB2YXJpYWJsZU5hbWUiO3M6NDoiaW5mbyI7czo1NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXFBhcmFtAGlzVmFyaWFkaWMiO2I6MDtzOjc6IgAqAHR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBcnJheV8iOjM6e3M6MTI6IgAqAHZhbHVlVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6MTA6IgAqAGtleVR5cGUiO047czoxNzoiACoAZGVmYXVsdEtleVR5cGUiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb21wb3VuZCI6MTp7czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb21wb3VuZAB0eXBlcyI7YToyOntpOjA7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXFN0cmluZ18iOjA6e31pOjE7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEludGVnZXIiOjA6e319fX1zOjc6IgAqAG5hbWUiO3M6NToicGFyYW0iO3M6MTQ6IgAqAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjI4OiJUaGUgU2l0ZSBIZWFsdGggaW5mb3JtYXRpb24uIjtzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAHRhZ3MiO2E6MDp7fX19aToyO086NDY6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXFJldHVybl8iOjM6e3M6NzoiACoAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEFycmF5XyI6Mzp7czoxMjoiACoAdmFsdWVUeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czoxMDoiACoAa2V5VHlwZSI7TjtzOjE3OiIAKgBkZWZhdWx0S2V5VHlwZSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbXBvdW5kIjoxOntzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbXBvdW5kAHR5cGVzIjthOjI6e2k6MDtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcU3RyaW5nXyI6MDp7fWk6MTtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcSW50ZWdlciI6MDp7fX19fXM6NzoiACoAbmFtZSI7czo2OiJyZXR1cm4iO3M6MTQ6IgAqAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjM2OiJUaGUgdXBkYXRlZCBTaXRlIEhlYWx0aCBpbmZvcm1hdGlvbi4iO3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AdGFncyI7YTowOnt9fX19czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBjb250ZXh0IjtyOjMwO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjI3MztzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVTdGFydCI7YjowO3M6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZUVuZCI7YjowO31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo0MjoiXHVtXGFkbWluXFNpdGVfSGVhbHRoOjpkZWJ1Z19pbmZvcm1hdGlvbigpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTc6ImRlYnVnX2luZm9ybWF0aW9uIjt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZpbmFsIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo2OiJwdWJsaWMiO31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjE6e2k6MDtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjQ6ImluZm8iO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO319czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToyODI7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e319fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwB1c2VkVHJhaXRzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjEzO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fX19czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbnRlcmZhY2VzIjthOjA6e31zOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHRyYWl0cyI7YTowOnt9fQ==";