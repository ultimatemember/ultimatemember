1759265128
ijeqzL8hUX%3A27c0e4fc829c9c318fc636a0b0a33ab5-7e712e707c9014122dfaa4ac22772004
s:7556:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjdlNzEyZTcwN2M5MDE0MTIyZGZhYTRhYzIyNzcyMDA0IjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MjM6ImNvbnRlbnRfcmVzdHJpY3Rpb24ucGhwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6NjI6ImluY2x1ZGVzL2FkbWluL2NvcmUvcGFja2FnZXMvMi4wLWJldGExL2NvbnRlbnRfcmVzdHJpY3Rpb24ucGhwIjtzOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHNvdXJjZSI7czo0ODI1OiI8P3BocAokcm9sZXNfYXNzb2NpYXRpb25zID0gZ2V0X29wdGlvbiggJ3VtX3JvbGVzX2Fzc29jaWF0aW9ucycgKTsKCi8vQ29udGVudCBSZXN0cmljdGlvbiB0cmFuc2ZlcgoKLy9mb3IgY2hlY2sgYWxsIHBvc3QgdHlwZXMgYW5kIHRheG9ub21pZXMKJGFsbF9wb3N0X3R5cGVzID0gZ2V0X3Bvc3RfdHlwZXMoIGFycmF5KCAncHVibGljJyA9PiB0cnVlICkgKTsKCiRhbGxfdGF4b25vbWllcyA9IGdldF90YXhvbm9taWVzKCBhcnJheSggJ3B1YmxpYycgPT4gdHJ1ZSApICk7CiRleGNsdWRlX3RheG9ub21pZXMgPSBVTSgpLT5leGNsdWRlZF90YXhvbm9taWVzKCk7Cgpmb3JlYWNoICggJGFsbF90YXhvbm9taWVzIGFzICRrZXkgPT4gJHRheG9ub215ICkgewoJaWYgKCBpbl9hcnJheSggJGtleSwgJGV4Y2x1ZGVfdGF4b25vbWllcyApICkgewoJCXVuc2V0KCAkYWxsX3RheG9ub21pZXNbICRrZXkgXSApOwoJfQp9Cgpmb3JlYWNoICggJGFsbF9wb3N0X3R5cGVzIGFzICRrZXkgPT4gJHZhbHVlICkgewoJJGFsbF9wb3N0X3R5cGVzWyAka2V5IF0gPSB0cnVlOwp9Cgpmb3JlYWNoICggJGFsbF90YXhvbm9taWVzIGFzICRrZXkgPT4gJHZhbHVlICkgewoJJGFsbF90YXhvbm9taWVzWyAka2V5IF0gPSB0cnVlOwp9CgpVTSgpLT5vcHRpb25zKCktPnVwZGF0ZSggJ3Jlc3RyaWN0ZWRfYWNjZXNzX3Bvc3RfbWV0YWJveCcsICRhbGxfcG9zdF90eXBlcyApOwpVTSgpLT5vcHRpb25zKCktPnVwZGF0ZSggJ3Jlc3RyaWN0ZWRfYWNjZXNzX3RheG9ub215X21ldGFib3gnLCAkYWxsX3RheG9ub21pZXMgKTsKCgokcm9sZXNfYXJyYXkgPSBVTSgpLT5yb2xlcygpLT5nZXRfcm9sZXMoIGZhbHNlLCBhcnJheSggJ2FkbWluaXN0cmF0b3InICkgKTsKCi8qJHBvc3RzID0gZ2V0X3Bvc3RzKCBhcnJheSgKCSdwb3N0X3R5cGUnICAgICA9PiAnYW55JywKCSdtZXRhX2tleScgICAgICA9PiAnX3VtX2N1c3RvbV9hY2Nlc3Nfc2V0dGluZ3MnLAoJJ21ldGFfdmFsdWUnICAgID0+ICcxJywKCSdmaWVsZHMnICAgICAgICA9PiAnaWRzJywKCSdudW1iZXJwb3N0cycgICA9PiAtMQopICk7Ki8KCiRwX3F1ZXJ5ID0gbmV3IFdQX1F1ZXJ5OwokcG9zdHMgPSAkcF9xdWVyeS0+cXVlcnkoIGFycmF5KAoJJ3Bvc3RfdHlwZScgICAgICAgICA9PiAnYW55JywKCSdtZXRhX2tleScgICAgICAgICAgPT4gJ191bV9jdXN0b21fYWNjZXNzX3NldHRpbmdzJywKCSdtZXRhX3ZhbHVlJyAgICAgICAgPT4gJzEnLAoJJ3Bvc3RzX3Blcl9wYWdlJyAgICA9PiAtMSwKCSdmaWVsZHMnICAgICAgICAgICAgPT4gJ2lkcycKKSApOwoKaWYgKCAhIGVtcHR5KCAkcG9zdHMgKSApIHsKCWZvcmVhY2ggKCAkcG9zdHMgYXMgJHBvc3RfaWQgKSB7CgkJJHVtX2FjY2Vzc2libGUgPSBnZXRfcG9zdF9tZXRhKCAkcG9zdF9pZCwgJ191bV9hY2Nlc3NpYmxlJywgdHJ1ZSApOwoJCSR1bV9hY2Nlc3Nfcm9sZXMgPSBnZXRfcG9zdF9tZXRhKCAkcG9zdF9pZCwgJ191bV9hY2Nlc3Nfcm9sZXMnLCB0cnVlICk7CgkJJHVtX2FjY2Vzc19yZWRpcmVjdCA9ICggJHVtX2FjY2Vzc2libGUgPT0gJzInICkgPyBnZXRfcG9zdF9tZXRhKCAkcG9zdF9pZCwgJ191bV9hY2Nlc3NfcmVkaXJlY3QnLCB0cnVlICkgOiBnZXRfcG9zdF9tZXRhKCAkcG9zdF9pZCwgJ191bV9hY2Nlc3NfcmVkaXJlY3QyJywgdHJ1ZSApOwoKCQkkYWNjZXNzX3JvbGVzID0gYXJyYXkoKTsKCQlpZiAoICEgZW1wdHkoICR1bV9hY2Nlc3Nfcm9sZXMgKSApIHsKCQkJZm9yZWFjaCAoICRyb2xlc19hcnJheSBhcyAkcm9sZSA9PiAkcm9sZV9sYWJlbCApIHsKCQkJCS8vaWYgKCBpbl9hcnJheSggc3Vic3RyKCAkcm9sZSwgMyApLCAkdW1fYWNjZXNzX3JvbGVzICkgKQoJCQkJaWYgKCBmYWxzZSAhPT0gYXJyYXlfc2VhcmNoKCAkcm9sZSwgJHJvbGVzX2Fzc29jaWF0aW9ucyApICYmIGluX2FycmF5KCBhcnJheV9zZWFyY2goICRyb2xlLCAkcm9sZXNfYXNzb2NpYXRpb25zICksICR1bV9hY2Nlc3Nfcm9sZXMgKSApCgkJCQkJJGFjY2Vzc19yb2xlc1sgJHJvbGUgXSA9ICcxJzsKCQkJCWVsc2UKCQkJCQkkYWNjZXNzX3JvbGVzWyAkcm9sZSBdID0gJzAnOwoJCQl9CgkJfSBlbHNlIHsKCQkJZm9yZWFjaCAoICRyb2xlc19hcnJheSBhcyAkcm9sZSA9PiAkcm9sZV9sYWJlbCApIHsKCQkJCSRhY2Nlc3Nfcm9sZXNbICRyb2xlIF0gPSAnMCc7CgkJCX0KCQl9CgoJCSRyZXN0cmljdF9vcHRpb25zID0gYXJyYXkoCgkJCSdfdW1fY3VzdG9tX2FjY2Vzc19zZXR0aW5ncycgICAgICAgID0+ICcxJywKCQkJJ191bV9hY2Nlc3NpYmxlJyAgICAgICAgICAgICAgICAgICAgPT4gJHVtX2FjY2Vzc2libGUsCgkJCSdfdW1fYWNjZXNzX3JvbGVzJyAgICAgICAgICAgICAgICAgID0+ICRhY2Nlc3Nfcm9sZXMsCgkJCSdfdW1fbm9hY2Nlc3NfYWN0aW9uJyAgICAgICAgICAgICAgID0+ICcxJywKCQkJJ191bV9yZXN0cmljdF9ieV9jdXN0b21fbWVzc2FnZScgICAgPT4gJzAnLAoJCQknX3VtX3Jlc3RyaWN0X2N1c3RvbV9tZXNzYWdlJyAgICAgICA9PiAnJywKCQkJJ191bV9hY2Nlc3NfcmVkaXJlY3QnICAgICAgICAgICAgICAgPT4gJzEnLAoJCQknX3VtX2FjY2Vzc19yZWRpcmVjdF91cmwnICAgICAgICAgICA9PiAhIGVtcHR5KCAkdW1fYWNjZXNzX3JlZGlyZWN0ICkgPyAkdW1fYWNjZXNzX3JlZGlyZWN0IDogJycsCgkJCSdfdW1fYWNjZXNzX2hpZGVfZnJvbV9xdWVyaWVzJyAgICAgID0+ICcwJywKCQkpOwoKCQl1cGRhdGVfcG9zdF9tZXRhKCAkcG9zdF9pZCwgJ3VtX2NvbnRlbnRfcmVzdHJpY3Rpb24nLCAkcmVzdHJpY3Rfb3B0aW9ucyApOwoJfQp9CgoKJGFsbF90YXhvbm9taWVzID0gZ2V0X3RheG9ub21pZXMoIGFycmF5KCAncHVibGljJyA9PiB0cnVlICkgKTsKJGV4Y2x1ZGVfdGF4b25vbWllcyA9IFVNKCktPmV4Y2x1ZGVkX3RheG9ub21pZXMoKTsKCmZvcmVhY2ggKCAkYWxsX3RheG9ub21pZXMgYXMgJGtleSA9PiAkdGF4b25vbXkgKSB7CglpZiAoIGluX2FycmF5KCAka2V5ICwgJGV4Y2x1ZGVfdGF4b25vbWllcyApICkKCQljb250aW51ZTsKCgkkdGVybXMgPSBnZXRfdGVybXMoIGFycmF5KAoJCSd0YXhvbm9teScgICAgICA9PiAkdGF4b25vbXksCgkJJ2hpZGVfZW1wdHknICAgID0+IGZhbHNlLAoJCSdmaWVsZHMnICAgICAgICA9PiAnaWRzJwoJKSApOwoKCWlmICggZW1wdHkoICR0ZXJtcyApICkKCQljb250aW51ZTsKCglmb3JlYWNoICggJHRlcm1zIGFzICR0ZXJtX2lkICkgewoJCSR0ZXJtX21ldGEgPSBnZXRfb3B0aW9uKCAiY2F0ZWdvcnlfeyR0ZXJtX2lkfSIgKTsKCgkJaWYgKCBlbXB0eSggJHRlcm1fbWV0YSApICkKCQkJY29udGludWU7CgoJCSR1bV9hY2Nlc3NpYmxlID0gISBlbXB0eSggJHRlcm1fbWV0YVsnX3VtX2FjY2Vzc2libGUnXSApID8gJHRlcm1fbWV0YVsnX3VtX2FjY2Vzc2libGUnXSA6IGZhbHNlOwoJCSR1bV9hY2Nlc3Nfcm9sZXMgPSAhIGVtcHR5KCAkdGVybV9tZXRhWydfdW1fcm9sZXMnXSApID8gJHRlcm1fbWV0YVsnX3VtX3JvbGVzJ10gOiBhcnJheSgpOwoJCSRyZWRpcmVjdCA9ICEgZW1wdHkoICR0ZXJtX21ldGFbJ191bV9yZWRpcmVjdCddICkgPyAkdGVybV9tZXRhWydfdW1fcmVkaXJlY3QnXSA6ICcnOwoJCSRyZWRpcmVjdDIgPSAhIGVtcHR5KCAkdGVybV9tZXRhWydfdW1fcmVkaXJlY3QyJ10gKSA/ICR0ZXJtX21ldGFbJ191bV9yZWRpcmVjdDInXSA6ICcnOwoJCSR1bV9hY2Nlc3NfcmVkaXJlY3QgPSAoICR1bV9hY2Nlc3NpYmxlID09ICcyJyApID8gJHJlZGlyZWN0IDogJHJlZGlyZWN0MjsKCgkJJGFjY2Vzc19yb2xlcyA9IGFycmF5KCk7CgkJaWYgKCAhIGVtcHR5KCAkdW1fYWNjZXNzX3JvbGVzICkgKSB7CgkJCWZvcmVhY2ggKCAkcm9sZXNfYXJyYXkgYXMgJHJvbGUgPT4gJHJvbGVfbGFiZWwgKSB7CgkJCQlpZiAoIGZhbHNlICE9PSBhcnJheV9zZWFyY2goICRyb2xlLCAkcm9sZXNfYXNzb2NpYXRpb25zICkgJiYgaW5fYXJyYXkoIGFycmF5X3NlYXJjaCggJHJvbGUsICRyb2xlc19hc3NvY2lhdGlvbnMgKSwgJHVtX2FjY2Vzc19yb2xlcyApICkKCQkJCQkkYWNjZXNzX3JvbGVzWyAkcm9sZSBdID0gJzEnOwoJCQkJZWxzZQoJCQkJCSRhY2Nlc3Nfcm9sZXNbICRyb2xlIF0gPSAnMCc7CgkJCX0KCQl9IGVsc2UgewoJCQlmb3JlYWNoICggJHJvbGVzX2FycmF5IGFzICRyb2xlID0+ICRyb2xlX2xhYmVsICkgewoJCQkJJGFjY2Vzc19yb2xlc1sgJHJvbGUgXSA9ICcwJzsKCQkJfQoJCX0KCgkJJHJlc3RyaWN0X29wdGlvbnMgPSBhcnJheSgKCQkJJ191bV9jdXN0b21fYWNjZXNzX3NldHRpbmdzJyAgICAgICAgPT4gJzEnLAoJCQknX3VtX2FjY2Vzc2libGUnICAgICAgICAgICAgICAgICAgICA9PiAkdW1fYWNjZXNzaWJsZSwKCQkJJ191bV9hY2Nlc3Nfcm9sZXMnICAgICAgICAgICAgICAgICAgPT4gJGFjY2Vzc19yb2xlcywKCQkJJ191bV9ub2FjY2Vzc19hY3Rpb24nICAgICAgICAgICAgICAgPT4gJzEnLAoJCQknX3VtX3Jlc3RyaWN0X2J5X2N1c3RvbV9tZXNzYWdlJyAgICA9PiAnMCcsCgkJCSdfdW1fcmVzdHJpY3RfY3VzdG9tX21lc3NhZ2UnICAgICAgID0+ICcnLAoJCQknX3VtX2FjY2Vzc19yZWRpcmVjdCcgICAgICAgICAgICAgICA9PiAnMScsCgkJCSdfdW1fYWNjZXNzX3JlZGlyZWN0X3VybCcgICAgICAgICAgID0+ICEgZW1wdHkoICR1bV9hY2Nlc3NfcmVkaXJlY3QgKSA/ICR1bV9hY2Nlc3NfcmVkaXJlY3QgOiAnJywKCQkJJ191bV9hY2Nlc3NfaGlkZV9mcm9tX3F1ZXJpZXMnICAgICAgPT4gJzAnLAoJCSk7CgoJCXVwZGF0ZV90ZXJtX21ldGEoICR0ZXJtX2lkLCAndW1fY29udGVudF9yZXN0cmljdGlvbicsICRyZXN0cmljdF9vcHRpb25zICk7Cgl9Cn0KIjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWVzcGFjZXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW5jbHVkZXMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZnVuY3Rpb25zIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNvbnN0YW50cyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjbGFzc2VzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGludGVyZmFjZXMiO2E6MDp7fXM6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAdHJhaXRzIjthOjA6e319";