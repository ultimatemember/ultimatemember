1762997515
ijeqzL8hUX%3A5706603e6507b8c3ae31ca9a2b79c4a0-158d69c53982a95f65d66c54b9ce6c7c
s:7564:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjE1OGQ2OWM1Mzk4MmE5NWY2NWQ2NmM1NGI5Y2U2YzdjIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MTQ6InVzZXJfcm9sZXMucGhwIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6NTM6ImluY2x1ZGVzL2FkbWluL2NvcmUvcGFja2FnZXMvMi4wLWJldGExL3VzZXJfcm9sZXMucGhwIjtzOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHNvdXJjZSI7czo0ODQ5OiI8P3BocApnbG9iYWwgJHdwZGI7CgokcmVzcG9uc2Vfcm9sZXNfZGF0YSA9IGFycmF5KCk7CgovL1VNIFJvbGVzIHRvIFdQIFJvbGVzCi8vYWxsIFVNIFJvbGVzIGZyb20gcG9zdCB0eXBlCiRyb2xlX2tleXMgPSBhcnJheSgpOwoKcmVnaXN0ZXJfcG9zdF90eXBlKCAndW1fcm9sZScsIGFycmF5KAoJJ2xhYmVscycgPT4gYXJyYXkoCgkJJ25hbWUnICAgICAgICAgICAgICAgICAgPT4gX18oICdVc2VyIFJvbGVzJyApLAoJCSdzaW5ndWxhcl9uYW1lJyAgICAgICAgID0+IF9fKCAnVXNlciBSb2xlJyApLAoJCSdhZGRfbmV3JyAgICAgICAgICAgICAgID0+IF9fKCAnQWRkIE5ldycgKSwKCQknYWRkX25ld19pdGVtJyAgICAgICAgICA9PiBfXygnQWRkIE5ldyBVc2VyIFJvbGUnICksCgkJJ2VkaXRfaXRlbScgICAgICAgICAgICAgPT4gX18oJ0VkaXQgVXNlciBSb2xlJyksCgkJJ25vdF9mb3VuZCcgICAgICAgICAgICAgPT4gX18oJ1lvdSBkaWQgbm90IGNyZWF0ZSBhbnkgdXNlciByb2xlcyB5ZXQnKSwKCQknbm90X2ZvdW5kX2luX3RyYXNoJyAgICA9PiBfXygnTm90aGluZyBmb3VuZCBpbiBUcmFzaCcpLAoJCSdzZWFyY2hfaXRlbXMnICAgICAgICAgID0+IF9fKCdTZWFyY2ggVXNlciBSb2xlcycpCgkpLAoJJ3Nob3dfdWknID0+IHRydWUsCgknc2hvd19pbl9tZW51JyA9PiBmYWxzZSwKCSdwdWJsaWMnID0+IGZhbHNlLAoJJ3N1cHBvcnRzJyA9PiBhcnJheSgndGl0bGUnKQopICk7CgoKJHVtX3JvbGVzID0gZ2V0X3Bvc3RzKCBhcnJheSgKCSdwb3N0X3R5cGUnICAgICAgICAgPT4gJ3VtX3JvbGUnLAoJJ3Bvc3RzX3Blcl9wYWdlJyAgICA9PiAtMSwKCSdwb3N0X3N0YXR1cycgICAgICAgPT4gJ3B1Ymxpc2gnCikgKTsKCiRyb2xlc19hc3NvY2lhdGlvbnMgPSBhcnJheSgpOwoKJGFsbF93cF9yb2xlcyA9IGFycmF5X2tleXMoIGdldF9lZGl0YWJsZV9yb2xlcygpICk7CgppZiAoICEgZW1wdHkoICR1bV9yb2xlcyApICkgewoJZm9yZWFjaCAoICR1bV9yb2xlcyBhcyAkdW1fcm9sZSApIHsKCQkvL29sZCByb2xlIGtleSB3aGljaCBpbnNlcnRlZCBmb3IgZWFjaCB1c2VyIHRvIHVzZXJtZXRhICJyb2xlIgoJCSRrZXlfaW5fbWV0YSA9ICR1bV9yb2xlLT5wb3N0X25hbWU7CgoJCWlmICggcHJlZ19tYXRjaCggIi9bYS16MC05XSskL2kiLCAkdW1fcm9sZS0+cG9zdF90aXRsZSApICkgewoJCQkkcm9sZV9rZXkgPSBzYW5pdGl6ZV90aXRsZSggJHVtX3JvbGUtPnBvc3RfdGl0bGUgKTsKCQl9IGVsc2UgewoJCQkkYXV0b19pbmNyZW1lbnQgPSBVTSgpLT5vcHRpb25zKCktPmdldCggJ2N1c3RvbV9yb2xlc19pbmNyZW1lbnQnICk7CgkJCSRhdXRvX2luY3JlbWVudCA9ICEgZW1wdHkoICRhdXRvX2luY3JlbWVudCApID8gJGF1dG9faW5jcmVtZW50IDogMTsKCQkJJHJvbGVfa2V5ID0gJ2N1c3RvbV9yb2xlXycgLiAkYXV0b19pbmNyZW1lbnQ7CgoJCQkkYXV0b19pbmNyZW1lbnQrKzsKCQkJVU0oKS0+b3B0aW9ucygpLT51cGRhdGUoICdjdXN0b21fcm9sZXNfaW5jcmVtZW50JywgJGF1dG9faW5jcmVtZW50ICk7CgkJfQoKCQlpZiAoICEgaW5fYXJyYXkoICRyb2xlX2tleSwgJGFsbF93cF9yb2xlcyApICkgewoJCQkkcm9sZV9rZXlzW10gPSAkcm9sZV9rZXk7CgkJfQoKCQkkYWxsX3JvbGVfbWV0YWRhdGEgPSAkd3BkYi0+Z2V0X3Jlc3VsdHMoICR3cGRiLT5wcmVwYXJlKAoJCQkiU0VMRUNUIHBtLm1ldGFfa2V5LAogICAgICAgICAgICAgICAgICAgIHBtLm1ldGFfdmFsdWUKICAgICAgICAgICAgRlJPTSB7JHdwZGItPnBvc3RtZXRhfSBwbQogICAgICAgICAgICBXSEVSRSBwbS5wb3N0X2lkID0gJWQgQU5ECiAgICAgICAgICAgICAgICAgIHBtLm1ldGFfa2V5IExJS0UgJXMiLAoJCQkkdW1fcm9sZS0+SUQsCgkJCSJfdW1fJSIKCQkpLCBBUlJBWV9BICk7CgoJCSRyb2xlX21ldGFkYXRhID0gYXJyYXkoKTsKCQlpZiAoICEgZW1wdHkoICRhbGxfcm9sZV9tZXRhZGF0YSApICkgewoJCQlmb3JlYWNoICggJGFsbF9yb2xlX21ldGFkYXRhIGFzICRtZXRhZGF0YSApIHsKCgkJCQlpZiAoICdfdW1fY2FuX2VkaXRfcm9sZXMnID09ICRtZXRhZGF0YVsnbWV0YV9rZXknXSB8fCAnX3VtX2Nhbl9kZWxldGVfcm9sZXMnID09ICRtZXRhZGF0YVsnbWV0YV9rZXknXQoJCQkJICAgICB8fCAnX3VtX2Nhbl92aWV3X3JvbGVzJyA9PSAkbWV0YWRhdGFbJ21ldGFfa2V5J10gfHwgJ191bV9jYW5fZm9sbG93X3JvbGVzJyA9PSAkbWV0YWRhdGFbJ21ldGFfa2V5J10KCQkJCSAgICAgfHwgJ191bV9jYW5fZnJpZW5kX3JvbGVzJyA9PSAkbWV0YWRhdGFbJ21ldGFfa2V5J10gfHwgJ191bV9jYW5fcmV2aWV3X3JvbGVzJyA9PSAkbWV0YWRhdGFbJ21ldGFfa2V5J10gKSB7CgkJCQkJJG1ldGFkYXRhWydtZXRhX3ZhbHVlJ10gPSBtYXliZV91bnNlcmlhbGl6ZSggJG1ldGFkYXRhWydtZXRhX3ZhbHVlJ10gKTsKCQkJCX0KCgkJCQkkcm9sZV9tZXRhZGF0YVsgJG1ldGFkYXRhWydtZXRhX2tleSddIF0gPSAkbWV0YWRhdGFbJ21ldGFfdmFsdWUnXTsKCQkJfQoJCX0KCgkJaWYgKCAhIGluX2FycmF5KCAkcm9sZV9rZXksICRhbGxfd3Bfcm9sZXMgKSApIHsKCQkJJHJvbGVfbWV0YSA9IGFycmF5X21lcmdlKCAkcm9sZV9tZXRhZGF0YSwgYXJyYXkoCgkJCQknbmFtZScgICAgICAgICAgICAgID0+ICR1bV9yb2xlLT5wb3N0X3RpdGxlLAoJCQkJJ3dwX2NhcGFiaWxpdGllcycgICA9PiBhcnJheSggJ3JlYWQnID0+IHRydWUgKSwKCQkJCSdfdW1faXNfY3VzdG9tJyAgICAgPT4gdHJ1ZSwKCQkJKSApOwoJCX0gZWxzZSB7CgkJCSRyb2xlX21ldGEgPSAkcm9sZV9tZXRhZGF0YTsKCQl9CgoJCS8vJG9sZF9rZXkgPSAhIGVtcHR5KCAkcm9sZV9tZXRhWydfdW1fY29yZSddICkgPyAkcm9sZV9tZXRhWydfdW1fY29yZSddIDogJHJvbGVfa2V5OwoJCWlmICggISBpbl9hcnJheSggJHJvbGVfa2V5LCAkYWxsX3dwX3JvbGVzICkgKSB7CgkJCSRyb2xlc19hc3NvY2lhdGlvbnNbICRrZXlfaW5fbWV0YSBdID0gJ3VtXycgLiAkcm9sZV9rZXk7CgkJfSBlbHNlIHsKCQkJJHJvbGVzX2Fzc29jaWF0aW9uc1sgJGtleV9pbl9tZXRhIF0gPSAkcm9sZV9rZXk7CgkJfQoKCgkJJHJlc3BvbnNlX3JvbGVzX2RhdGFbXSA9IGFycmF5KAoJCQkncm9sZV9rZXknICAgICAgPT4gJHJvbGVfa2V5LAoJCQkna2V5X2luX21ldGEnICAgPT4gJGtleV9pbl9tZXRhCgkJKTsKCgkJaWYgKCAhIGVtcHR5KCAkcm9sZV9tZXRhWydfdW1fY29yZSddICkgKQoJCQl1bnNldCggJHJvbGVfbWV0YVsnX3VtX2NvcmUnXSApOwoKCQl1cGRhdGVfb3B0aW9uKCAidW1fcm9sZV97JHJvbGVfa2V5fV9tZXRhIiwgJHJvbGVfbWV0YSApOwoJfQoKCS8vdXBkYXRlIHVzZXIgcm9sZSBtZXRhIHdoZXJlIHJvbGUga2V5cyBzdG9yZWQKCWZvcmVhY2ggKCAkdW1fcm9sZXMgYXMgJHVtX3JvbGUgKSB7CgoJCSRrZXlfaW5fbWV0YSA9ICR1bV9yb2xlLT5wb3N0X25hbWU7CgoJCSRyb2xlX2tleSA9ICRyb2xlc19hc3NvY2lhdGlvbnNbICRrZXlfaW5fbWV0YSBdOwoJCWlmICggc3RycG9zKCAkcm9sZV9rZXksICd1bV8nICkgPT09IDAgKQoJCQkkcm9sZV9rZXkgPSBzdWJzdHIoICRyb2xlX2tleSwgMyApOwoKCQkkcm9sZV9tZXRhID0gZ2V0X29wdGlvbiggInVtX3JvbGVfeyRyb2xlX2tleX1fbWV0YSIgKTsKCgkJJHJvbGVfbWV0YWRhdGEgPSBhcnJheSgpOwoJCWlmICggISBlbXB0eSggJHJvbGVfbWV0YSApICkgewoJCQlmb3JlYWNoICggJHJvbGVfbWV0YSBhcyAkbWV0YWtleSA9PiAkbWV0YWRhdGEgKSB7CgoJCQkJaWYgKCAnX3VtX2Nhbl9lZGl0X3JvbGVzJyA9PSAkbWV0YWtleSB8fCAnX3VtX2Nhbl9kZWxldGVfcm9sZXMnID09ICRtZXRha2V5CgkJCQkgICAgIHx8ICdfdW1fY2FuX3ZpZXdfcm9sZXMnID09ICRtZXRha2V5IHx8ICdfdW1fY2FuX2ZvbGxvd19yb2xlcycgPT0gJG1ldGFrZXkKCQkJCSAgICAgfHwgJ191bV9jYW5fZnJpZW5kX3JvbGVzJyA9PSAkbWV0YWtleSB8fCAnX3VtX2Nhbl9yZXZpZXdfcm9sZXMnID09ICRtZXRha2V5ICkgewoKCQkJCQlpZiAoICEgZW1wdHkoICRtZXRhZGF0YSApICkgewoJCQkJCQlmb3JlYWNoICggJG1ldGFkYXRhIGFzICRpID0+ICRyb2xlX2sgKSB7CgkJCQkJCQkkbWV0YWRhdGFbICRpIF0gPSAkcm9sZXNfYXNzb2NpYXRpb25zWyAkcm9sZV9rIF07CgkJCQkJCX0KCQkJCQl9CgkJCQl9IGVsc2VpZiAoICdfdW1fcHJvZmlsZWNfdXBncmFkZV9yb2xlJyA9PSAkbWV0YWtleSApIHsKCQkJCQlpZiAoIGlzc2V0KCAkcm9sZXNfYXNzb2NpYXRpb25zWyAkbWV0YWRhdGEgXSApICkgewoJCQkJCQkkbWV0YWRhdGEgPSAkcm9sZXNfYXNzb2NpYXRpb25zWyAkbWV0YWRhdGEgXTsKCQkJCQl9IGVsc2UgewoJCQkJCQkkbWV0YWRhdGEgPSAnJzsKCQkJCQl9CgkJCQl9CgoJCQkJJHJvbGVfbWV0YVsgJG1ldGFrZXkgXSA9ICRtZXRhZGF0YTsKCQkJfQoJCX0KCgkJdXBkYXRlX29wdGlvbiggInVtX3JvbGVfeyRyb2xlX2tleX1fbWV0YSIsICRyb2xlX21ldGEgKTsKCX0KfQoKdXBkYXRlX29wdGlvbiggJ3VtX3JvbGVzJywgJHJvbGVfa2V5cyApOwoKZ2xvYmFsICR3cF9yb2xlcywgJHdwX3ZlcnNpb247CmlmICggdmVyc2lvbl9jb21wYXJlKCAkd3BfdmVyc2lvbiwgJzQuOScsICc8JyApICkgewoJJHdwX3JvbGVzLT5faW5pdCgpOwoJJHdwX3JvbGVzLT5yZWluaXQoKTsKfSBlbHNlaWYgKCBtZXRob2RfZXhpc3RzKCAkd3Bfcm9sZXMsICdmb3Jfc2l0ZScgKSApIHsKCSR3cF9yb2xlcy0+Zm9yX3NpdGUoIGdldF9jdXJyZW50X2Jsb2dfaWQoKSApOwp9CgoKLy90ZW1wb3Jhcnkgb3B0aW9uCnVwZGF0ZV9vcHRpb24oICd1bV9yb2xlc19hc3NvY2lhdGlvbnMnLCAkcm9sZXNfYXNzb2NpYXRpb25zICk7IjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWVzcGFjZXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW5jbHVkZXMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZnVuY3Rpb25zIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNvbnN0YW50cyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjbGFzc2VzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGludGVyZmFjZXMiO2E6MDp7fXM6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAdHJhaXRzIjthOjA6e319";