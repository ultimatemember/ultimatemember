1782421247
ijeqzL8hUX%3A6c0c53af53f3777993ac476c103c04cc-e27d83be284ce94387a21664784ff40d
s:10040:"O:33:"phpDocumentor\Reflection\Php\File":12:{s:43:" phpDocumentor\Reflection\Php\File docBlock";N;s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"e27d83be284ce94387a21664784ff40d";s:39:" phpDocumentor\Reflection\Php\File name";s:13:"functions.php";s:39:" phpDocumentor\Reflection\Php\File path";s:48:"includes/admin/core/packages/2.8.0/functions.php";s:41:" phpDocumentor\Reflection\Php\File source";s:4321:"<?php
if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

function um_upgrade_usermeta_count280() {
	UM()->admin()->check_ajax_nonce();

	um_maybe_unset_time_limit();

	global $wpdb;

	$count = $wpdb->get_var(
		"SELECT COUNT(*)
		FROM {$wpdb->usermeta}
		WHERE meta_key = 'use_gdpr_agreement' OR
			  meta_key = 'um_user_blocked__timestamp' OR
			  meta_key = '_um_last_login' OR
			  meta_key = 'submitted'"
	);

	wp_send_json_success( array( 'count' => $count ) );
}


function um_upgrade_metadata_per_user280() {
	UM()->admin()->check_ajax_nonce();

	um_maybe_unset_time_limit();

	if ( empty( $_POST['page'] ) ) {
		wp_send_json_error( __( 'Wrong data', 'ultimate-member' ) );
	}

	global $wpdb;

	$per_page = 100;
	$usermeta = $wpdb->get_results(
		$wpdb->prepare(
			"SELECT *
			FROM {$wpdb->usermeta}
			WHERE meta_key = 'use_gdpr_agreement' OR
				  meta_key = 'um_user_blocked__timestamp' OR
				  meta_key = '_um_last_login' OR
				  meta_key = 'submitted'
			LIMIT %d, %d",
			( absint( $_POST['page'] ) - 1 ) * $per_page,
			$per_page
		),
		ARRAY_A
	);

	// Make non-GMT timestamp as GMT base on current wp_timezone().
	$offset = (int) ( get_option( 'gmt_offset' ) * HOUR_IN_SECONDS );
	foreach ( $usermeta as $usermeta_row ) {
		$updated_meta = null;

		if ( empty( $usermeta_row['meta_key'] ) ) {
			continue;
		}

		$user_id = $usermeta_row['user_id'];
		if ( 'use_gdpr_agreement' === $usermeta_row['meta_key'] ) {
			if ( is_numeric( $usermeta_row['meta_value'] ) ) {
				update_user_meta( $user_id, 'um_use_gdpr_agreement_backup', $usermeta_row['meta_value'] );
				$updated_meta = gmdate( 'Y-m-d H:i:s', $usermeta_row['meta_value'] );
			}
		} elseif ( '_um_last_login' === $usermeta_row['meta_key'] ) {
			if ( is_numeric( $usermeta_row['meta_value'] ) ) {
				update_user_meta( $user_id, '_um_last_login_backup', $usermeta_row['meta_value'] );
				if ( ! empty( $offset ) ) {
					$updated_meta = (int) $usermeta_row['meta_value'] - $offset;
				} else {
					$updated_meta = (int) $usermeta_row['meta_value'];
				}

				$updated_meta = gmdate( 'Y-m-d H:i:s', $updated_meta );
			}
		} elseif ( 'submitted' === $usermeta_row['meta_key'] ) {
			$unserialized_meta = maybe_unserialize( $usermeta_row['meta_value'] );
			if ( isset( $unserialized_meta['use_gdpr_agreement'] ) && is_numeric( $unserialized_meta['use_gdpr_agreement'] ) ) {
				update_user_meta( $user_id, 'submitted_backup', $unserialized_meta );
				$unserialized_meta['use_gdpr_agreement'] = gmdate( 'Y-m-d H:i:s', $unserialized_meta['use_gdpr_agreement'] );

				$updated_meta = maybe_serialize( $unserialized_meta );
			}
		} elseif ( 'um_user_blocked__timestamp' === $usermeta_row['meta_key'] ) {
			if ( ! empty( $offset ) ) {
				$last_scanned_time = $usermeta_row['meta_value'];
				if ( ! empty( $last_scanned_time ) ) {
					update_user_meta( $user_id, 'um_user_blocked__timestamp_backup', $last_scanned_time );
					$last_scanned_time = strtotime( $last_scanned_time ) - $offset;
					$updated_meta      = gmdate( 'Y-m-d H:i:s', $last_scanned_time );
				}
			}
		}

		if ( isset( $updated_meta ) ) {
			update_user_meta( $user_id, $usermeta_row['meta_key'], $updated_meta );
		}
	}

	$from = ( absint( $_POST['page'] ) * $per_page ) - $per_page + 1;
	$to   = absint( $_POST['page'] ) * $per_page;

	// translators: %1$s is a from; %2$s is a to.
	wp_send_json_success( array( 'message' => sprintf( __( 'Metadata from %1$s to %2$s were upgraded successfully...', 'ultimate-member' ), $from, $to ) ) );
}

function um_upgrade_update_options280() {
	UM()->admin()->check_ajax_nonce();

	um_maybe_unset_time_limit();

	$offset = (int) ( get_option( 'gmt_offset' ) * HOUR_IN_SECONDS );

	if ( ! empty( $offset ) ) {
		$last_scanned_time = get_option( 'um_secure_last_time_scanned' );
		if ( ! empty( $last_scanned_time ) ) {
			update_option( 'um_secure_last_time_scanned_backup', $last_scanned_time );
			$last_scanned_time = strtotime( $last_scanned_time ) - $offset;
			$last_scanned_time = gmdate( 'Y-m-d H:i:s', $last_scanned_time );

			update_option( 'um_secure_last_time_scanned', $last_scanned_time );
		}
	}

	// delete temporarily option for fields upgrade
	update_option( 'um_last_version_upgrade', '2.8.0' );

	wp_send_json_success( array( 'message' => __( 'Database has been updated successfully', 'ultimate-member' ) ) );
}
";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:0:{}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:3:{s:31:"\um_upgrade_usermeta_count280()";O:38:"phpDocumentor\Reflection\Php\Function_":5:{s:45:" phpDocumentor\Reflection\Php\Function_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:31:"\um_upgrade_usermeta_count280()";s:36:" phpDocumentor\Reflection\Fqsen name";s:28:"um_upgrade_usermeta_count280";}s:49:" phpDocumentor\Reflection\Php\Function_ arguments";a:0:{}s:48:" phpDocumentor\Reflection\Php\Function_ docBlock";N;s:48:" phpDocumentor\Reflection\Php\Function_ location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:6;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:50:" phpDocumentor\Reflection\Php\Function_ returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}}s:34:"\um_upgrade_metadata_per_user280()";O:38:"phpDocumentor\Reflection\Php\Function_":5:{s:45:" phpDocumentor\Reflection\Php\Function_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:34:"\um_upgrade_metadata_per_user280()";s:36:" phpDocumentor\Reflection\Fqsen name";s:31:"um_upgrade_metadata_per_user280";}s:49:" phpDocumentor\Reflection\Php\Function_ arguments";a:0:{}s:48:" phpDocumentor\Reflection\Php\Function_ docBlock";N;s:48:" phpDocumentor\Reflection\Php\Function_ location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:26;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:50:" phpDocumentor\Reflection\Php\Function_ returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}}s:31:"\um_upgrade_update_options280()";O:38:"phpDocumentor\Reflection\Php\Function_":5:{s:45:" phpDocumentor\Reflection\Php\Function_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:31:"\um_upgrade_update_options280()";s:36:" phpDocumentor\Reflection\Fqsen name";s:28:"um_upgrade_update_options280";}s:49:" phpDocumentor\Reflection\Php\Function_ arguments";a:0:{}s:48:" phpDocumentor\Reflection\Php\Function_ docBlock";N;s:48:" phpDocumentor\Reflection\Php\Function_ location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:110;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:50:" phpDocumentor\Reflection\Php\Function_ returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}}}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:0:{}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}}";